
SPI_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e04  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd8  08004fd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fe0  08004fe0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  2000000c  08004ff4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08004ff4  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f8e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a0  00000000  00000000  00039fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003d370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003e780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b8c  00000000  00000000  0003fa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017713  00000000  00000000  000625c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d09fc  00000000  00000000  00079cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a6d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f4  00000000  00000000  0014a728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004f78 	.word	0x08004f78

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004f78 	.word	0x08004f78

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b17      	ldr	r3, [pc, #92]	; (8000538 <MX_GPIO_Init+0x74>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a16      	ldr	r2, [pc, #88]	; (8000538 <MX_GPIO_Init+0x74>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b14      	ldr	r3, [pc, #80]	; (8000538 <MX_GPIO_Init+0x74>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_GPIO_Init+0x74>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a10      	ldr	r2, [pc, #64]	; (8000538 <MX_GPIO_Init+0x74>)
 80004f8:	f043 0302 	orr.w	r3, r3, #2
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_GPIO_Init+0x74>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2108      	movs	r1, #8
 800050e:	480b      	ldr	r0, [pc, #44]	; (800053c <MX_GPIO_Init+0x78>)
 8000510:	f000 ff76 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000514:	2308      	movs	r3, #8
 8000516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	4619      	mov	r1, r3
 800052a:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_GPIO_Init+0x78>)
 800052c:	f000 fde6 	bl	80010fc <HAL_GPIO_Init>

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	48000400 	.word	0x48000400

08000540 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000544:	f000 fbd5 	bl	8000cf2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000548:	f000 f8a4 	bl	8000694 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800054c:	f7ff ffba 	bl	80004c4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000550:	f000 faec 	bl	8000b2c <MX_USART2_UART_Init>
	MX_USB_PCD_Init();
 8000554:	f000 fb5c 	bl	8000c10 <MX_USB_PCD_Init>
	MX_SPI1_Init();
 8000558:	f000 f94e 	bl	80007f8 <MX_SPI1_Init>
	MX_TIM2_Init();
 800055c:	f000 fa70 	bl	8000a40 <MX_TIM2_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000560:	f000 f91c 	bl	800079c <MX_NVIC_Init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_SPI_Receive_IT(&hspi1, (uint8_t*) &app.spi.rec_buff,
 8000564:	2201      	movs	r2, #1
 8000566:	4946      	ldr	r1, [pc, #280]	; (8000680 <main+0x140>)
 8000568:	4846      	ldr	r0, [pc, #280]	; (8000684 <main+0x144>)
 800056a:	f002 fb3f 	bl	8002bec <HAL_SPI_Receive_IT>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d002      	beq.n	800057a <main+0x3a>
				sizeof(frame)) != HAL_OK)   // check is any error on spi rec.
		{
			Error_Handler();
 8000574:	f000 f93a 	bl	80007ec <Error_Handler>
 8000578:	e008      	b.n	800058c <main+0x4c>
		} else {
			if (app.spi.rec_buff[SYNC_BYTE_1] == DEVICE_ADDRESS)
 800057a:	4b43      	ldr	r3, [pc, #268]	; (8000688 <main+0x148>)
 800057c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8000580:	2b14      	cmp	r3, #20
 8000582:	d103      	bne.n	800058c <main+0x4c>
				app.switch_state = SPI_RX; // if the device address match process frame
 8000584:	4b40      	ldr	r3, [pc, #256]	; (8000688 <main+0x148>)
 8000586:	2204      	movs	r2, #4
 8000588:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}

		switch (app.switch_state) {
 800058c:	4b3e      	ldr	r3, [pc, #248]	; (8000688 <main+0x148>)
 800058e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8000592:	2b04      	cmp	r3, #4
 8000594:	d872      	bhi.n	800067c <main+0x13c>
 8000596:	a201      	add	r2, pc, #4	; (adr r2, 800059c <main+0x5c>)
 8000598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059c:	0800067d 	.word	0x0800067d
 80005a0:	080005df 	.word	0x080005df
 80005a4:	0800067d 	.word	0x0800067d
 80005a8:	08000669 	.word	0x08000669
 80005ac:	080005b1 	.word	0x080005b1
		case REST:
			break;
		case SPI_RX:   // prepare for inbound spi
			app.spi.cmd_fom_serial = app.spi.rec_buff[CMD_BYTE];
 80005b0:	4b35      	ldr	r3, [pc, #212]	; (8000688 <main+0x148>)
 80005b2:	f893 210a 	ldrb.w	r2, [r3, #266]	; 0x10a
 80005b6:	4b34      	ldr	r3, [pc, #208]	; (8000688 <main+0x148>)
 80005b8:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
			app.spi.sensor_form_serial = app.spi.rec_buff[SENSOR_BYTE];
 80005bc:	4b32      	ldr	r3, [pc, #200]	; (8000688 <main+0x148>)
 80005be:	f893 210b 	ldrb.w	r2, [r3, #267]	; 0x10b
 80005c2:	4b31      	ldr	r3, [pc, #196]	; (8000688 <main+0x148>)
 80005c4:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
			app.spi.data = app.spi.rec_buff[DATA_BYTE];
 80005c8:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <main+0x148>)
 80005ca:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80005ce:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <main+0x148>)
 80005d0:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
			app.switch_state = PROC;
 80005d4:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <main+0x148>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			break;
 80005dc:	e04f      	b.n	800067e <main+0x13e>
		case PROC: // process the request
			switch (app.spi.cmd_fom_serial) {
 80005de:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <main+0x148>)
 80005e0:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <main+0xae>
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d023      	beq.n	8000634 <main+0xf4>
						}
						app.spi.tx_buff[DATA_BYTE] = OK;
					}  //  sensor case close
					break;
				default:
					break;
 80005ec:	e03c      	b.n	8000668 <main+0x128>
				switch (app.spi.sensor_form_serial) { // sensor for read request
 80005ee:	4b26      	ldr	r3, [pc, #152]	; (8000688 <main+0x148>)
 80005f0:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <main+0xbe>
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d00e      	beq.n	800061a <main+0xda>
					break;
 80005fc:	e019      	b.n	8000632 <main+0xf2>
					app.spi.tx_buff[DATA_BYTE] = VAL;
 80005fe:	4b22      	ldr	r3, [pc, #136]	; (8000688 <main+0x148>)
 8000600:	2201      	movs	r2, #1
 8000602:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
					app.spi.tx_buff[DATA_BYTE_2] = READ_GREEN_LED
 8000606:	2108      	movs	r1, #8
 8000608:	4820      	ldr	r0, [pc, #128]	; (800068c <main+0x14c>)
 800060a:	f000 fee1 	bl	80013d0 <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <main+0x148>)
 8000614:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
					break;
 8000618:	e00b      	b.n	8000632 <main+0xf2>
					app.spi.tx_buff[DATA_BYTE] = TEMPR;
 800061a:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <main+0x148>)
 800061c:	2202      	movs	r2, #2
 800061e:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
					app.spi.tx_buff[DATA_BYTE_2] = read_temp_sensor();
 8000622:	f000 f8d7 	bl	80007d4 <read_temp_sensor>
 8000626:	4603      	mov	r3, r0
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <main+0x148>)
 800062c:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
					break;
 8000630:	bf00      	nop
				break; // Read case vreak
 8000632:	e019      	b.n	8000668 <main+0x128>
					if (app.spi.sensor_form_serial == LED) { // sensor for read request
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <main+0x148>)
 8000636:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800063a:	2b00      	cmp	r3, #0
 800063c:	d113      	bne.n	8000666 <main+0x126>
						if (app.spi.tx_buff[DATA_BYTE]) {
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <main+0x148>)
 8000640:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8000644:	2b00      	cmp	r3, #0
 8000646:	d005      	beq.n	8000654 <main+0x114>
							GREEN_LED_ON
 8000648:	2200      	movs	r2, #0
 800064a:	2108      	movs	r1, #8
 800064c:	480f      	ldr	r0, [pc, #60]	; (800068c <main+0x14c>)
 800064e:	f000 fed7 	bl	8001400 <HAL_GPIO_WritePin>
 8000652:	e004      	b.n	800065e <main+0x11e>
							GREEN_LED_OFF
 8000654:	2201      	movs	r2, #1
 8000656:	2108      	movs	r1, #8
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <main+0x14c>)
 800065a:	f000 fed1 	bl	8001400 <HAL_GPIO_WritePin>
						app.spi.tx_buff[DATA_BYTE] = OK;
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <main+0x148>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
					break;
 8000666:	bf00      	nop
					app.switch_state = SPI_TX;
			}
			case SPI_TX:
				// prepare for outbound spi
				HAL_SPI_Transmit_IT(&hspi1, (uint8_t*) &app.spi.tx_buff,
 8000668:	2201      	movs	r2, #1
 800066a:	4909      	ldr	r1, [pc, #36]	; (8000690 <main+0x150>)
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <main+0x144>)
 800066e:	f002 fa2f 	bl	8002ad0 <HAL_SPI_Transmit_IT>
						sizeof(frame)); // send data on SPI
				app.switch_state = REST;
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <main+0x148>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
				break;
 800067a:	e000      	b.n	800067e <main+0x13e>
			default:
				break;
 800067c:	bf00      	nop
		if (HAL_SPI_Receive_IT(&hspi1, (uint8_t*) &app.spi.rec_buff,
 800067e:	e771      	b.n	8000564 <main+0x24>
 8000680:	20000130 	.word	0x20000130
 8000684:	20000240 	.word	0x20000240
 8000688:	20000028 	.word	0x20000028
 800068c:	48000400 	.word	0x48000400
 8000690:	200001b0 	.word	0x200001b0

08000694 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b0ac      	sub	sp, #176	; 0xb0
 8000698:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800069a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800069e:	2244      	movs	r2, #68	; 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fc60 	bl	8004f68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2254      	movs	r2, #84	; 0x54
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fc52 	bl	8004f68 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006c4:	2310      	movs	r3, #16
 80006c6:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d4:	2360      	movs	r3, #96	; 0x60
 80006d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006e0:	2301      	movs	r3, #1
 80006e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 40;
 80006ec:	2328      	movs	r3, #40	; 0x28
 80006ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006f2:	2307      	movs	r3, #7
 80006f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000704:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000708:	4618      	mov	r0, r3
 800070a:	f001 f831 	bl	8001770 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x84>
		Error_Handler();
 8000714:	f000 f86a 	bl	80007ec <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	65bb      	str	r3, [r7, #88]	; 0x58
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2303      	movs	r3, #3
 800071e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800072c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000730:	2104      	movs	r1, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fc3c 	bl	8001fb0 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xae>
		Error_Handler();
 800073e:	f000 f855 	bl	80007ec <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8000742:	f242 0302 	movw	r3, #8194	; 0x2002
 8000746:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USB;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800074c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000750:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000752:	2301      	movs	r3, #1
 8000754:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800075a:	2318      	movs	r3, #24
 800075c:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800075e:	2307      	movs	r3, #7
 8000760:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000762:	2302      	movs	r3, #2
 8000764:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800076a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800076e:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fe22 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xee>
		Error_Handler();
 800077e:	f000 f835 	bl	80007ec <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000782:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000786:	f000 ff9d 	bl	80016c4 <HAL_PWREx_ControlVoltageScaling>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x100>
			!= HAL_OK) {
		Error_Handler();
 8000790:	f000 f82c 	bl	80007ec <Error_Handler>
	}
}
 8000794:	bf00      	nop
 8000796:	37b0      	adds	r7, #176	; 0xb0
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	201c      	movs	r0, #28
 80007a6:	f000 fbf4 	bl	8000f92 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007aa:	201c      	movs	r0, #28
 80007ac:	f000 fc0d 	bl	8000fca <HAL_NVIC_EnableIRQ>
	/* SPI1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2023      	movs	r0, #35	; 0x23
 80007b6:	f000 fbec 	bl	8000f92 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80007ba:	2023      	movs	r0, #35	; 0x23
 80007bc:	f000 fc05 	bl	8000fca <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2026      	movs	r0, #38	; 0x26
 80007c6:	f000 fbe4 	bl	8000f92 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007ca:	2026      	movs	r0, #38	; 0x26
 80007cc:	f000 fbfd 	bl	8000fca <HAL_NVIC_EnableIRQ>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <read_temp_sensor>:

/* USER CODE BEGIN 4 */

static int read_temp_sensor(void) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0

	/*expand  code here for temperature sensor*/
	int temp = 18;
 80007da:	2312      	movs	r3, #18
 80007dc:	607b      	str	r3, [r7, #4]
	return temp;
 80007de:	687b      	ldr	r3, [r7, #4]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_SPI1_Init+0x6c>)
 80007fe:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <MX_SPI1_Init+0x70>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_SPI1_Init+0x6c>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_SPI1_Init+0x6c>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_SPI1_Init+0x6c>)
 8000810:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000814:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_SPI1_Init+0x6c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_SPI1_Init+0x6c>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_SPI1_Init+0x6c>)
 8000824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000828:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_SPI1_Init+0x6c>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_SPI1_Init+0x6c>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_SPI1_Init+0x6c>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_SPI1_Init+0x6c>)
 800083e:	2207      	movs	r2, #7
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_SPI1_Init+0x6c>)
 8000844:	2200      	movs	r2, #0
 8000846:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_SPI1_Init+0x6c>)
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_SPI1_Init+0x6c>)
 8000850:	f002 f89a 	bl	8002988 <HAL_SPI_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800085a:	f7ff ffc7 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000240 	.word	0x20000240
 8000868:	40013000 	.word	0x40013000

0800086c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <HAL_SPI_MspInit+0x7c>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d128      	bne.n	80008e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_SPI_MspInit+0x80>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <HAL_SPI_MspInit+0x80>)
 8000894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000898:	6613      	str	r3, [r2, #96]	; 0x60
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_SPI_MspInit+0x80>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_SPI_MspInit+0x80>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_SPI_MspInit+0x80>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_SPI_MspInit+0x80>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80008be:	23c2      	movs	r3, #194	; 0xc2
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ce:	2305      	movs	r3, #5
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f000 fc0e 	bl	80010fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40013000 	.word	0x40013000
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <HAL_MspInit+0x44>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6613      	str	r3, [r2, #96]	; 0x60
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <HAL_MspInit+0x44>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x44>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	6593      	str	r3, [r2, #88]	; 0x58
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x44>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_TIM_PeriodElapsedCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 fa00 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <TIM2_IRQHandler+0x10>)
 80009a6:	f003 f871 	bl	8003a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200002a4 	.word	0x200002a4

080009b4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <SPI1_IRQHandler+0x10>)
 80009ba:	f002 fa77 	bl	8002eac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000240 	.word	0x20000240

080009c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <USART2_IRQHandler+0x10>)
 80009ce:	f003 fc3b 	bl	8004248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //HAL_UART_Receive_IT(&huart2, (uint8_t *)app.rec_buff, 3);
  /* USER CODE END USART2_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200002f0 	.word	0x200002f0

080009dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <SystemInit+0x5c>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e6:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <SystemInit+0x5c>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <SystemInit+0x60>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <SystemInit+0x60>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <SystemInit+0x60>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <SystemInit+0x60>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <SystemInit+0x60>)
 8000a08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <SystemInit+0x60>)
 8000a14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <SystemInit+0x60>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <SystemInit+0x60>)
 8000a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <SystemInit+0x60>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00
 8000a3c:	40021000 	.word	0x40021000

08000a40 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a5e:	4b23      	ldr	r3, [pc, #140]	; (8000aec <MX_TIM2_Init+0xac>)
 8000a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <MX_TIM2_Init+0xac>)
 8000a68:	224f      	movs	r2, #79	; 0x4f
 8000a6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <MX_TIM2_Init+0xac>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <MX_TIM2_Init+0xac>)
 8000a74:	f240 321f 	movw	r2, #799	; 0x31f
 8000a78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_TIM2_Init+0xac>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_TIM2_Init+0xac>)
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a86:	4819      	ldr	r0, [pc, #100]	; (8000aec <MX_TIM2_Init+0xac>)
 8000a88:	f002 ff55 	bl	8003936 <HAL_TIM_Base_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a92:	f7ff feab 	bl	80007ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <MX_TIM2_Init+0xac>)
 8000aa4:	f003 f911 	bl	8003cca <HAL_TIM_ConfigClockSource>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000aae:	f7ff fe9d 	bl	80007ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <MX_TIM2_Init+0xac>)
 8000ac0:	f003 faf0 	bl	80040a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000aca:	f7ff fe8f 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_TIM_Base_MspInit(&htim2);
 8000ace:	4807      	ldr	r0, [pc, #28]	; (8000aec <MX_TIM2_Init+0xac>)
 8000ad0:	f000 f80e 	bl	8000af0 <HAL_TIM_Base_MspInit>
	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_TIM2_Init+0xac>)
 8000ad6:	f002 ff85 	bl	80039e4 <HAL_TIM_Base_Start_IT>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM2_Init+0xa4>
		/* Starting Error */
		Error_Handler();
 8000ae0:	f7ff fe84 	bl	80007ec <Error_Handler>
	}
  /* USER CODE END TIM2_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200002a4 	.word	0x200002a4

08000af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b00:	d10b      	bne.n	8000b1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_TIM_Base_MspInit+0x38>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_TIM_Base_MspInit+0x38>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_TIM_Base_MspInit+0x38>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000

08000b2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b32:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <MX_USART2_UART_Init+0x5c>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b70:	f003 fb1c 	bl	80041ac <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b7a:	f7ff fe37 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200002f0 	.word	0x200002f0
 8000b88:	40004400 	.word	0x40004400

08000b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_UART_MspInit+0x7c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d128      	bne.n	8000c00 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bde:	230c      	movs	r3, #12
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f000 fa7e 	bl	80010fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40021000 	.word	0x40021000

08000c10 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_USB_PCD_Init+0x48>)
 8000c16:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <MX_USB_PCD_Init+0x4c>)
 8000c18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_USB_PCD_Init+0x48>)
 8000c1c:	2208      	movs	r2, #8
 8000c1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_USB_PCD_Init+0x48>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_USB_PCD_Init+0x48>)
 8000c28:	2202      	movs	r2, #2
 8000c2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_USB_PCD_Init+0x48>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_USB_PCD_Init+0x48>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_USB_PCD_Init+0x48>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_USB_PCD_Init+0x48>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_USB_PCD_Init+0x48>)
 8000c46:	f000 fbf3 	bl	8001430 <HAL_PCD_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000c50:	f7ff fdcc 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000374 	.word	0x20000374
 8000c5c:	40006800 	.word	0x40006800

08000c60 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_PCD_MspInit+0x38>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d10b      	bne.n	8000c8a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_PCD_MspInit+0x3c>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c76:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <HAL_PCD_MspInit+0x3c>)
 8000c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HAL_PCD_MspInit+0x3c>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40006800 	.word	0x40006800
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca4:	f7ff fe9a 	bl	80009dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ca8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000caa:	e003      	b.n	8000cb4 <LoopCopyDataInit>

08000cac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cb0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cb2:	3104      	adds	r1, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cb4:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cb8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cbc:	d3f6      	bcc.n	8000cac <CopyDataInit>
	ldr	r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cc0:	e002      	b.n	8000cc8 <LoopFillZerobss>

08000cc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cc2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cc4:	f842 3b04 	str.w	r3, [r2], #4

08000cc8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <LoopForever+0x16>)
	cmp	r2, r3
 8000cca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ccc:	d3f9      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cce:	f004 f927 	bl	8004f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd2:	f7ff fc35 	bl	8000540 <main>

08000cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd6:	e7fe      	b.n	8000cd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000cdc:	08004fe8 	.word	0x08004fe8
	ldr	r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ce4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ce8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000cec:	2000066c 	.word	0x2000066c

08000cf0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_IRQHandler>

08000cf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f93d 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f80e 	bl	8000d24 <HAL_InitTick>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	71fb      	strb	r3, [r7, #7]
 8000d12:	e001      	b.n	8000d18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d14:	f7ff fdec 	bl	80008f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_InitTick+0x6c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d023      	beq.n	8000d80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_InitTick+0x70>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_InitTick+0x6c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f949 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10f      	bne.n	8000d7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d809      	bhi.n	8000d74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f913 	bl	8000f92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_InitTick+0x74>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e007      	b.n	8000d84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	e004      	b.n	8000d84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	e001      	b.n	8000d84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000668 	.word	0x20000668

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000668 	.word	0x20000668

08000ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0b      	blt.n	8000e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4907      	ldr	r1, [pc, #28]	; (8000e78 <__NVIC_EnableIRQ+0x38>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00f      	b.n	8000f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <SysTick_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f56:	210f      	movs	r1, #15
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f7ff ff8e 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x40>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff29 	bl	8000ddc <__NVIC_SetPriorityGrouping>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff3e 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff8e 	bl	8000ed0 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5d 	bl	8000e7c <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff31 	bl	8000e40 <__NVIC_EnableIRQ>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffa2 	bl	8000f38 <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b085      	sub	sp, #20
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d008      	beq.n	8001028 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2204      	movs	r2, #4
 800101a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e022      	b.n	800106e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 020e 	bic.w	r2, r2, #14
 8001036:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	f003 021c 	and.w	r2, r3, #28
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d005      	beq.n	800109e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2204      	movs	r2, #4
 8001096:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e029      	b.n	80010f2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 020e 	bic.w	r2, r2, #14
 80010ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0201 	bic.w	r2, r2, #1
 80010bc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f003 021c 	and.w	r2, r3, #28
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2101      	movs	r1, #1
 80010cc:	fa01 f202 	lsl.w	r2, r1, r2
 80010d0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	4798      	blx	r3
    }
  }
  return status;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	e148      	b.n	800139e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 813a 	beq.w	8001398 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d00b      	beq.n	8001144 <HAL_GPIO_Init+0x48>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d007      	beq.n	8001144 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001138:	2b11      	cmp	r3, #17
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b12      	cmp	r3, #18
 8001142:	d130      	bne.n	80011a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800117a:	2201      	movs	r2, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	f003 0201 	and.w	r2, r3, #1
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0xea>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d123      	bne.n	800122e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	691a      	ldr	r2, [r3, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	6939      	ldr	r1, [r7, #16]
 800122a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0203 	and.w	r2, r3, #3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8094 	beq.w	8001398 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001270:	4b52      	ldr	r3, [pc, #328]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 8001272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001274:	4a51      	ldr	r2, [pc, #324]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6613      	str	r3, [r2, #96]	; 0x60
 800127c:	4b4f      	ldr	r3, [pc, #316]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 800127e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001288:	4a4d      	ldr	r2, [pc, #308]	; (80013c0 <HAL_GPIO_Init+0x2c4>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012b2:	d00d      	beq.n	80012d0 <HAL_GPIO_Init+0x1d4>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a43      	ldr	r2, [pc, #268]	; (80013c4 <HAL_GPIO_Init+0x2c8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d007      	beq.n	80012cc <HAL_GPIO_Init+0x1d0>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a42      	ldr	r2, [pc, #264]	; (80013c8 <HAL_GPIO_Init+0x2cc>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d101      	bne.n	80012c8 <HAL_GPIO_Init+0x1cc>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e004      	b.n	80012d2 <HAL_GPIO_Init+0x1d6>
 80012c8:	2307      	movs	r3, #7
 80012ca:	e002      	b.n	80012d2 <HAL_GPIO_Init+0x1d6>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <HAL_GPIO_Init+0x1d6>
 80012d0:	2300      	movs	r3, #0
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	f002 0203 	and.w	r2, r2, #3
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	4093      	lsls	r3, r2
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012e2:	4937      	ldr	r1, [pc, #220]	; (80013c0 <HAL_GPIO_Init+0x2c4>)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012f0:	4b36      	ldr	r3, [pc, #216]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001314:	4a2d      	ldr	r2, [pc, #180]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800133e:	4a23      	ldr	r2, [pc, #140]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001368:	4a18      	ldr	r2, [pc, #96]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001392:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f47f aeaf 	bne.w	800110c <HAL_GPIO_Init+0x10>
  }
}
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
 80013b2:	371c      	adds	r7, #28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000
 80013c4:	48000400 	.word	0x48000400
 80013c8:	48000800 	.word	0x48000800
 80013cc:	40010400 	.word	0x40010400

080013d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e001      	b.n	80013f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800141c:	e002      	b.n	8001424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	b08b      	sub	sp, #44	; 0x2c
 8001434:	af06      	add	r7, sp, #24
 8001436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e104      	b.n	800164c <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d106      	bne.n	800145c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fc02 	bl	8000c60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2203      	movs	r2, #3
 8001460:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fcfb 	bl	8004e64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	687e      	ldr	r6, [r7, #4]
 8001476:	466d      	mov	r5, sp
 8001478:	f106 0410 	add.w	r4, r6, #16
 800147c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	602b      	str	r3, [r5, #0]
 8001484:	1d33      	adds	r3, r6, #4
 8001486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001488:	6838      	ldr	r0, [r7, #0]
 800148a:	f003 fcda 	bl	8004e42 <USB_CoreInit>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0d5      	b.n	800164c <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fcf7 	bl	8004e9a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e04c      	b.n	800154c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	440b      	add	r3, r1
 80014c2:	3301      	adds	r3, #1
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	b298      	uxth	r0, r3
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	3336      	adds	r3, #54	; 0x36
 80014f0:	4602      	mov	r2, r0
 80014f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	440b      	add	r3, r1
 8001504:	3303      	adds	r3, #3
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	3338      	adds	r3, #56	; 0x38
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	333c      	adds	r3, #60	; 0x3c
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	3340      	adds	r3, #64	; 0x40
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	3301      	adds	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	d3ad      	bcc.n	80014b2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e044      	b.n	80015e6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	440b      	add	r3, r1
 80015c2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	440b      	add	r3, r1
 80015d8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	3301      	adds	r3, #1
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d3b5      	bcc.n	800155c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	687e      	ldr	r6, [r7, #4]
 80015f8:	466d      	mov	r5, sp
 80015fa:	f106 0410 	add.w	r4, r6, #16
 80015fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	602b      	str	r3, [r5, #0]
 8001606:	1d33      	adds	r3, r6, #4
 8001608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160a:	6838      	ldr	r0, [r7, #0]
 800160c:	f003 fc52 	bl	8004eb4 <USB_DevInit>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2202      	movs	r2, #2
 800161a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e014      	b.n	800164c <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d102      	bne.n	8001640 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f80a 	bl	8001654 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f003 fc56 	bl	8004ef6 <USB_DevDisconnect>

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001654 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001678:	b29b      	uxth	r3, r3
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800168c:	b29b      	uxth	r3, r3
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	b29a      	uxth	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40007000 	.word	0x40007000

080016c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d2:	d130      	bne.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e0:	d038      	beq.n	8001754 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016ea:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2232      	movs	r2, #50	; 0x32
 80016f8:	fb02 f303 	mul.w	r3, r2, r3
 80016fc:	4a1b      	ldr	r2, [pc, #108]	; (800176c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	0c9b      	lsrs	r3, r3, #18
 8001704:	3301      	adds	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001708:	e002      	b.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3b01      	subs	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171c:	d102      	bne.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x60>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f2      	bne.n	800170a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001730:	d110      	bne.n	8001754 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e00f      	b.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d007      	beq.n	8001754 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800174c:	4a05      	ldr	r2, [pc, #20]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001752:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40007000 	.word	0x40007000
 8001768:	20000000 	.word	0x20000000
 800176c:	431bde83 	.word	0x431bde83

08001770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	f000 bc11 	b.w	8001fa6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001784:	4ba0      	ldr	r3, [pc, #640]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800178e:	4b9e      	ldr	r3, [pc, #632]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80e4 	beq.w	800196e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d007      	beq.n	80017bc <HAL_RCC_OscConfig+0x4c>
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	f040 808b 	bne.w	80018ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	f040 8087 	bne.w	80018ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017bc:	4b92      	ldr	r3, [pc, #584]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_OscConfig+0x64>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e3e8      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1a      	ldr	r2, [r3, #32]
 80017d8:	4b8b      	ldr	r3, [pc, #556]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <HAL_RCC_OscConfig+0x7e>
 80017e4:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ec:	e005      	b.n	80017fa <HAL_RCC_OscConfig+0x8a>
 80017ee:	4b86      	ldr	r3, [pc, #536]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80017f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d223      	bcs.n	8001846 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fd7a 	bl	80022fc <RCC_SetFlashLatencyFromMSIRange>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e3c9      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001812:	4b7d      	ldr	r3, [pc, #500]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7c      	ldr	r2, [pc, #496]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b7a      	ldr	r3, [pc, #488]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4977      	ldr	r1, [pc, #476]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001830:	4b75      	ldr	r3, [pc, #468]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	4972      	ldr	r1, [pc, #456]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
 8001844:	e025      	b.n	8001892 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001846:	4b70      	ldr	r3, [pc, #448]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6f      	ldr	r2, [pc, #444]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b6d      	ldr	r3, [pc, #436]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	496a      	ldr	r1, [pc, #424]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001864:	4b68      	ldr	r3, [pc, #416]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	4965      	ldr	r1, [pc, #404]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fd3a 	bl	80022fc <RCC_SetFlashLatencyFromMSIRange>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e389      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001892:	f000 fc6f 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8001896:	4602      	mov	r2, r0
 8001898:	4b5b      	ldr	r3, [pc, #364]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	495a      	ldr	r1, [pc, #360]	; (8001a0c <HAL_RCC_OscConfig+0x29c>)
 80018a4:	5ccb      	ldrb	r3, [r1, r3]
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_RCC_OscConfig+0x2a0>)
 80018b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018b2:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <HAL_RCC_OscConfig+0x2a4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fa34 	bl	8000d24 <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d052      	beq.n	800196c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	e36d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d032      	beq.n	8001938 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018d2:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a4c      	ldr	r2, [pc, #304]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018de:	f7ff fa71 	bl	8000dc4 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018e6:	f7ff fa6d 	bl	8000dc4 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e356      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018f8:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001904:	4b40      	ldr	r3, [pc, #256]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a3f      	ldr	r2, [pc, #252]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 800190a:	f043 0308 	orr.w	r3, r3, #8
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	493a      	ldr	r1, [pc, #232]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001922:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	4935      	ldr	r1, [pc, #212]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001932:	4313      	orrs	r3, r2
 8001934:	604b      	str	r3, [r1, #4]
 8001936:	e01a      	b.n	800196e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001938:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a32      	ldr	r2, [pc, #200]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001944:	f7ff fa3e 	bl	8000dc4 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800194c:	f7ff fa3a 	bl	8000dc4 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e323      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1dc>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d073      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b08      	cmp	r3, #8
 800197e:	d005      	beq.n	800198c <HAL_RCC_OscConfig+0x21c>
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d10e      	bne.n	80019a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d10b      	bne.n	80019a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d063      	beq.n	8001a60 <HAL_RCC_OscConfig+0x2f0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d15f      	bne.n	8001a60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e300      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ac:	d106      	bne.n	80019bc <HAL_RCC_OscConfig+0x24c>
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e01d      	b.n	80019f8 <HAL_RCC_OscConfig+0x288>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c4:	d10c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x270>
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80019cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e00b      	b.n	80019f8 <HAL_RCC_OscConfig+0x288>
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80019e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <HAL_RCC_OscConfig+0x298>)
 80019f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d01b      	beq.n	8001a38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff f9e0 	bl	8000dc4 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a06:	e010      	b.n	8001a2a <HAL_RCC_OscConfig+0x2ba>
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08004f90 	.word	0x08004f90
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff f9d4 	bl	8000dc4 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e2bd      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2a:	4baf      	ldr	r3, [pc, #700]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2a8>
 8001a36:	e014      	b.n	8001a62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f9c4 	bl	8000dc4 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff f9c0 	bl	8000dc4 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e2a9      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a52:	4ba5      	ldr	r3, [pc, #660]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2d0>
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d060      	beq.n	8001b30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_OscConfig+0x310>
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d119      	bne.n	8001aae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d116      	bne.n	8001aae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a80:	4b99      	ldr	r3, [pc, #612]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_OscConfig+0x328>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e286      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b93      	ldr	r3, [pc, #588]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	4990      	ldr	r1, [pc, #576]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aac:	e040      	b.n	8001b30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d023      	beq.n	8001afe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab6:	4b8c      	ldr	r3, [pc, #560]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a8b      	ldr	r2, [pc, #556]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f97f 	bl	8000dc4 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff f97b 	bl	8000dc4 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e264      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001adc:	4b82      	ldr	r3, [pc, #520]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b7f      	ldr	r3, [pc, #508]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	497c      	ldr	r1, [pc, #496]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
 8001afc:	e018      	b.n	8001b30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b7a      	ldr	r3, [pc, #488]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a79      	ldr	r2, [pc, #484]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff f95b 	bl	8000dc4 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b12:	f7ff f957 	bl	8000dc4 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e240      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b24:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d03c      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01c      	beq.n	8001b7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b44:	4b68      	ldr	r3, [pc, #416]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4a:	4a67      	ldr	r2, [pc, #412]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b54:	f7ff f936 	bl	8000dc4 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff f932 	bl	8000dc4 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e21b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b6e:	4b5e      	ldr	r3, [pc, #376]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0ef      	beq.n	8001b5c <HAL_RCC_OscConfig+0x3ec>
 8001b7c:	e01b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7e:	4b5a      	ldr	r3, [pc, #360]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b84:	4a58      	ldr	r2, [pc, #352]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f919 	bl	8000dc4 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b96:	f7ff f915 	bl	8000dc4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e1fe      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ef      	bne.n	8001b96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80a6 	beq.w	8001d10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bc8:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	4a43      	ldr	r2, [pc, #268]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bde:	6593      	str	r3, [r2, #88]	; 0x58
 8001be0:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bec:	2301      	movs	r3, #1
 8001bee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf0:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_RCC_OscConfig+0x57c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d118      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <HAL_RCC_OscConfig+0x57c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a3a      	ldr	r2, [pc, #232]	; (8001cec <HAL_RCC_OscConfig+0x57c>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c08:	f7ff f8dc 	bl	8000dc4 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c10:	f7ff f8d8 	bl	8000dc4 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1c1      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d108      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4d8>
 8001c36:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3c:	4a2a      	ldr	r2, [pc, #168]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c46:	e024      	b.n	8001c92 <HAL_RCC_OscConfig+0x522>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d110      	bne.n	8001c72 <HAL_RCC_OscConfig+0x502>
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c56:	4a24      	ldr	r2, [pc, #144]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c60:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	4a20      	ldr	r2, [pc, #128]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c70:	e00f      	b.n	8001c92 <HAL_RCC_OscConfig+0x522>
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f023 0304 	bic.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d016      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f893 	bl	8000dc4 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff f88f 	bl	8000dc4 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e176      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_OscConfig+0x578>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0ed      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x532>
 8001cc6:	e01a      	b.n	8001cfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7ff f87c 	bl	8000dc4 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cce:	e00f      	b.n	8001cf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f878 	bl	8000dc4 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d906      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e15f      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf0:	4baa      	ldr	r3, [pc, #680]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1e8      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cfe:	7ffb      	ldrb	r3, [r7, #31]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d04:	4ba5      	ldr	r3, [pc, #660]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	4aa4      	ldr	r2, [pc, #656]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d03c      	beq.n	8001d96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01c      	beq.n	8001d5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d24:	4b9d      	ldr	r3, [pc, #628]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d2a:	4a9c      	ldr	r2, [pc, #624]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f846 	bl	8000dc4 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d3c:	f7ff f842 	bl	8000dc4 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e12b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d4e:	4b93      	ldr	r3, [pc, #588]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ef      	beq.n	8001d3c <HAL_RCC_OscConfig+0x5cc>
 8001d5c:	e01b      	b.n	8001d96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d5e:	4b8f      	ldr	r3, [pc, #572]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d64:	4a8d      	ldr	r2, [pc, #564]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6e:	f7ff f829 	bl	8000dc4 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d76:	f7ff f825 	bl	8000dc4 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e10e      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d88:	4b84      	ldr	r3, [pc, #528]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1ef      	bne.n	8001d76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8102 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	f040 80c5 	bne.w	8001f34 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001daa:	4b7c      	ldr	r3, [pc, #496]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0203 	and.w	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d12c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d123      	bne.n	8001e18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d11b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d113      	bne.n	8001e18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d109      	bne.n	8001e18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	3b01      	subs	r3, #1
 8001e12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d067      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d062      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e1e:	4b5f      	ldr	r3, [pc, #380]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0bb      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a5a      	ldr	r2, [pc, #360]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001e34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e3a:	f7fe ffc3 	bl	8000dc4 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e42:	f7fe ffbf 	bl	8000dc4 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0a8      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e54:	4b51      	ldr	r3, [pc, #324]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f0      	bne.n	8001e42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e60:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	4b4e      	ldr	r3, [pc, #312]	; (8001fa0 <HAL_RCC_OscConfig+0x830>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e70:	3a01      	subs	r2, #1
 8001e72:	0112      	lsls	r2, r2, #4
 8001e74:	4311      	orrs	r1, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e7a:	0212      	lsls	r2, r2, #8
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e82:	0852      	lsrs	r2, r2, #1
 8001e84:	3a01      	subs	r2, #1
 8001e86:	0552      	lsls	r2, r2, #21
 8001e88:	4311      	orrs	r1, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e8e:	0852      	lsrs	r2, r2, #1
 8001e90:	3a01      	subs	r2, #1
 8001e92:	0652      	lsls	r2, r2, #25
 8001e94:	4311      	orrs	r1, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e9a:	06d2      	lsls	r2, r2, #27
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	493f      	ldr	r1, [pc, #252]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a3c      	ldr	r2, [pc, #240]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb0:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a39      	ldr	r2, [pc, #228]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ebc:	f7fe ff82 	bl	8000dc4 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe ff7e 	bl	8000dc4 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e067      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed6:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee2:	e05f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e05e      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee8:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d157      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a28      	ldr	r2, [pc, #160]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f00:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f0c:	f7fe ff5a 	bl	8000dc4 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7fe ff56 	bl	8000dc4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e03f      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x7a4>
 8001f32:	e037      	b.n	8001fa4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d02d      	beq.n	8001f96 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001f40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f44:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001f58:	f023 0303 	bic.w	r3, r3, #3
 8001f5c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001f64:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7fe ff29 	bl	8000dc4 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f76:	f7fe ff25 	bl	8000dc4 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e00e      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <HAL_RCC_OscConfig+0x82c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f0      	bne.n	8001f76 <HAL_RCC_OscConfig+0x806>
 8001f94:	e006      	b.n	8001fa4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e005      	b.n	8001fa6 <HAL_RCC_OscConfig+0x836>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop

08001fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0c8      	b.n	8002156 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b66      	ldr	r3, [pc, #408]	; (8002160 <HAL_RCC_ClockConfig+0x1b0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d910      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b63      	ldr	r3, [pc, #396]	; (8002160 <HAL_RCC_ClockConfig+0x1b0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4961      	ldr	r1, [pc, #388]	; (8002160 <HAL_RCC_ClockConfig+0x1b0>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b5f      	ldr	r3, [pc, #380]	; (8002160 <HAL_RCC_ClockConfig+0x1b0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0b0      	b.n	8002156 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d04c      	beq.n	800209a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d107      	bne.n	8002018 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002008:	4b56      	ldr	r3, [pc, #344]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d121      	bne.n	8002058 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e09e      	b.n	8002156 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d107      	bne.n	8002030 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002020:	4b50      	ldr	r3, [pc, #320]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d115      	bne.n	8002058 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e092      	b.n	8002156 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002038:	4b4a      	ldr	r3, [pc, #296]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e086      	b.n	8002156 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002048:	4b46      	ldr	r3, [pc, #280]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e07e      	b.n	8002156 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002058:	4b42      	ldr	r3, [pc, #264]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 0203 	bic.w	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	493f      	ldr	r1, [pc, #252]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800206a:	f7fe feab 	bl	8000dc4 <HAL_GetTick>
 800206e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002070:	e00a      	b.n	8002088 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002072:	f7fe fea7 	bl	8000dc4 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e066      	b.n	8002156 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 020c 	and.w	r2, r3, #12
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	429a      	cmp	r2, r3
 8002098:	d1eb      	bne.n	8002072 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a6:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	492c      	ldr	r1, [pc, #176]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b8:	4b29      	ldr	r3, [pc, #164]	; (8002160 <HAL_RCC_ClockConfig+0x1b0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d210      	bcs.n	80020e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b26      	ldr	r3, [pc, #152]	; (8002160 <HAL_RCC_ClockConfig+0x1b0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 0207 	bic.w	r2, r3, #7
 80020ce:	4924      	ldr	r1, [pc, #144]	; (8002160 <HAL_RCC_ClockConfig+0x1b0>)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_RCC_ClockConfig+0x1b0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e036      	b.n	8002156 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4918      	ldr	r1, [pc, #96]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4910      	ldr	r1, [pc, #64]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002126:	f000 f825 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 800212a:	4602      	mov	r2, r0
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_RCC_ClockConfig+0x1b4>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	490c      	ldr	r1, [pc, #48]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	5ccb      	ldrb	r3, [r1, r3]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	fa22 f303 	lsr.w	r3, r2, r3
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fdea 	bl	8000d24 <HAL_InitTick>
 8002150:	4603      	mov	r3, r0
 8002152:	72fb      	strb	r3, [r7, #11]

  return status;
 8002154:	7afb      	ldrb	r3, [r7, #11]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40022000 	.word	0x40022000
 8002164:	40021000 	.word	0x40021000
 8002168:	08004f90 	.word	0x08004f90
 800216c:	20000000 	.word	0x20000000
 8002170:	20000004 	.word	0x20000004

08002174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800218c:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x34>
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2b0c      	cmp	r3, #12
 80021a0:	d121      	bne.n	80021e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d11e      	bne.n	80021e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021a8:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021b4:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 80021b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	e005      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021d0:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10d      	bne.n	80021fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d102      	bne.n	80021f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	e004      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <HAL_RCC_GetSysClockFreq+0x114>)
 80021fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	d134      	bne.n	800226c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d003      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0xa6>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d003      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0xac>
 8002218:	e005      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_RCC_GetSysClockFreq+0x110>)
 800221c:	617b      	str	r3, [r7, #20]
      break;
 800221e:	e005      	b.n	800222c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_RCC_GetSysClockFreq+0x114>)
 8002222:	617b      	str	r3, [r7, #20]
      break;
 8002224:	e002      	b.n	800222c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	617b      	str	r3, [r7, #20]
      break;
 800222a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	3301      	adds	r3, #1
 8002238:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	fb02 f203 	mul.w	r2, r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	0e5b      	lsrs	r3, r3, #25
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	3301      	adds	r3, #1
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800226c:	69bb      	ldr	r3, [r7, #24]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
 8002280:	08004fa8 	.word	0x08004fa8
 8002284:	00f42400 	.word	0x00f42400
 8002288:	007a1200 	.word	0x007a1200

0800228c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000000 	.word	0x20000000

080022a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022a8:	f7ff fff0 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4904      	ldr	r1, [pc, #16]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08004fa0 	.word	0x08004fa0

080022d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022d4:	f7ff ffda 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0adb      	lsrs	r3, r3, #11
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08004fa0 	.word	0x08004fa0

080022fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002314:	f7ff f9c8 	bl	80016a8 <HAL_PWREx_GetVoltageRange>
 8002318:	6178      	str	r0, [r7, #20]
 800231a:	e014      	b.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800231c:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	4a24      	ldr	r2, [pc, #144]	; (80023b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002326:	6593      	str	r3, [r2, #88]	; 0x58
 8002328:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002334:	f7ff f9b8 	bl	80016a8 <HAL_PWREx_GetVoltageRange>
 8002338:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800233a:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002344:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234c:	d10b      	bne.n	8002366 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b80      	cmp	r3, #128	; 0x80
 8002352:	d919      	bls.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2ba0      	cmp	r3, #160	; 0xa0
 8002358:	d902      	bls.n	8002360 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800235a:	2302      	movs	r3, #2
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	e013      	b.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002360:	2301      	movs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	e010      	b.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b80      	cmp	r3, #128	; 0x80
 800236a:	d902      	bls.n	8002372 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800236c:	2303      	movs	r3, #3
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	e00a      	b.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b80      	cmp	r3, #128	; 0x80
 8002376:	d102      	bne.n	800237e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002378:	2302      	movs	r3, #2
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	e004      	b.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b70      	cmp	r3, #112	; 0x70
 8002382:	d101      	bne.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002384:	2301      	movs	r3, #1
 8002386:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 0207 	bic.w	r2, r3, #7
 8002390:	4909      	ldr	r1, [pc, #36]	; (80023b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d001      	beq.n	80023aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40022000 	.word	0x40022000

080023bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023c4:	2300      	movs	r3, #0
 80023c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c8:	2300      	movs	r3, #0
 80023ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d031      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023e0:	d01a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80023e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023e6:	d814      	bhi.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d009      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023f0:	d10f      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80023f2:	4bac      	ldr	r3, [pc, #688]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	4aab      	ldr	r2, [pc, #684]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023fe:	e00c      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f9cc 	bl	80027a4 <RCCEx_PLLSAI1_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002410:	e003      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	74fb      	strb	r3, [r7, #19]
      break;
 8002416:	e000      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800241a:	7cfb      	ldrb	r3, [r7, #19]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10b      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002420:	4ba0      	ldr	r3, [pc, #640]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	499d      	ldr	r1, [pc, #628]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002436:	e001      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 8099 	beq.w	800257c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800244e:	4b95      	ldr	r3, [pc, #596]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800245e:	2300      	movs	r3, #0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00d      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002464:	4b8f      	ldr	r3, [pc, #572]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	4a8e      	ldr	r2, [pc, #568]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800246a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246e:	6593      	str	r3, [r2, #88]	; 0x58
 8002470:	4b8c      	ldr	r3, [pc, #560]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247c:	2301      	movs	r3, #1
 800247e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002480:	4b89      	ldr	r3, [pc, #548]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a88      	ldr	r2, [pc, #544]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800248c:	f7fe fc9a 	bl	8000dc4 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002492:	e009      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002494:	f7fe fc96 	bl	8000dc4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d902      	bls.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	74fb      	strb	r3, [r7, #19]
        break;
 80024a6:	e005      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024a8:	4b7f      	ldr	r3, [pc, #508]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ef      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d155      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ba:	4b7a      	ldr	r3, [pc, #488]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01e      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d019      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024d6:	4b73      	ldr	r3, [pc, #460]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024e2:	4b70      	ldr	r3, [pc, #448]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	4a6e      	ldr	r2, [pc, #440]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024f2:	4b6c      	ldr	r3, [pc, #432]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	4a6a      	ldr	r2, [pc, #424]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002502:	4a68      	ldr	r2, [pc, #416]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d016      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fc56 	bl	8000dc4 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800251a:	e00b      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251c:	f7fe fc52 	bl	8000dc4 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d902      	bls.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	74fb      	strb	r3, [r7, #19]
            break;
 8002532:	e006      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002534:	4b5b      	ldr	r3, [pc, #364]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0ec      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002548:	4b56      	ldr	r3, [pc, #344]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	4953      	ldr	r1, [pc, #332]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800255e:	e004      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	74bb      	strb	r3, [r7, #18]
 8002564:	e001      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800256a:	7c7b      	ldrb	r3, [r7, #17]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d105      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002570:	4b4c      	ldr	r3, [pc, #304]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	4a4b      	ldr	r2, [pc, #300]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002588:	4b46      	ldr	r3, [pc, #280]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4943      	ldr	r1, [pc, #268]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025aa:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b0:	f023 020c 	bic.w	r2, r3, #12
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	493a      	ldr	r1, [pc, #232]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025cc:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	4932      	ldr	r1, [pc, #200]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fc:	4929      	ldr	r1, [pc, #164]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	4921      	ldr	r1, [pc, #132]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002638:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	4918      	ldr	r1, [pc, #96]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4910      	ldr	r1, [pc, #64]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d02c      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002694:	d10a      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002696:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	4a02      	ldr	r2, [pc, #8]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800269c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a0:	60d3      	str	r3, [r2, #12]
 80026a2:	e015      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2101      	movs	r1, #1
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 f871 	bl	80027a4 <RCCEx_PLLSAI1_Config>
 80026c2:	4603      	mov	r3, r0
 80026c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d028      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026dc:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	492d      	ldr	r1, [pc, #180]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026fa:	d106      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026fc:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a27      	ldr	r2, [pc, #156]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002706:	60d3      	str	r3, [r2, #12]
 8002708:	e011      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002712:	d10c      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3304      	adds	r3, #4
 8002718:	2101      	movs	r1, #1
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f842 	bl	80027a4 <RCCEx_PLLSAI1_Config>
 8002720:	4603      	mov	r3, r0
 8002722:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800272a:	7cfb      	ldrb	r3, [r7, #19]
 800272c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d01c      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002740:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002748:	4915      	ldr	r1, [pc, #84]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002758:	d10c      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	2102      	movs	r1, #2
 8002760:	4618      	mov	r0, r3
 8002762:	f000 f81f 	bl	80027a4 <RCCEx_PLLSAI1_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278e:	4904      	ldr	r1, [pc, #16]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002796:	7cbb      	ldrb	r3, [r7, #18]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000

080027a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027b2:	4b74      	ldr	r3, [pc, #464]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d018      	beq.n	80027f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027be:	4b71      	ldr	r3, [pc, #452]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 0203 	and.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d10d      	bne.n	80027ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
       ||
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027d6:	4b6b      	ldr	r3, [pc, #428]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
       ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d047      	beq.n	800287a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	e044      	b.n	800287a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d018      	beq.n	800282a <RCCEx_PLLSAI1_Config+0x86>
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d825      	bhi.n	8002848 <RCCEx_PLLSAI1_Config+0xa4>
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d002      	beq.n	8002806 <RCCEx_PLLSAI1_Config+0x62>
 8002800:	2b02      	cmp	r3, #2
 8002802:	d009      	beq.n	8002818 <RCCEx_PLLSAI1_Config+0x74>
 8002804:	e020      	b.n	8002848 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002806:	4b5f      	ldr	r3, [pc, #380]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d11d      	bne.n	800284e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002816:	e01a      	b.n	800284e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002818:	4b5a      	ldr	r3, [pc, #360]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d116      	bne.n	8002852 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002828:	e013      	b.n	8002852 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800282a:	4b56      	ldr	r3, [pc, #344]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10f      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002836:	4b53      	ldr	r3, [pc, #332]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002846:	e006      	b.n	8002856 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      break;
 800284c:	e004      	b.n	8002858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800284e:	bf00      	nop
 8002850:	e002      	b.n	8002858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002852:	bf00      	nop
 8002854:	e000      	b.n	8002858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002856:	bf00      	nop
    }

    if(status == HAL_OK)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10d      	bne.n	800287a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800285e:	4b49      	ldr	r3, [pc, #292]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	430b      	orrs	r3, r1
 8002874:	4943      	ldr	r1, [pc, #268]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d17c      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002880:	4b40      	ldr	r3, [pc, #256]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a3f      	ldr	r2, [pc, #252]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002886:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800288a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800288c:	f7fe fa9a 	bl	8000dc4 <HAL_GetTick>
 8002890:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002892:	e009      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002894:	f7fe fa96 	bl	8000dc4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d902      	bls.n	80028a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	73fb      	strb	r3, [r7, #15]
        break;
 80028a6:	e005      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ef      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d15f      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d110      	bne.n	80028e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c0:	4b30      	ldr	r3, [pc, #192]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6892      	ldr	r2, [r2, #8]
 80028d0:	0211      	lsls	r1, r2, #8
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68d2      	ldr	r2, [r2, #12]
 80028d6:	06d2      	lsls	r2, r2, #27
 80028d8:	430a      	orrs	r2, r1
 80028da:	492a      	ldr	r1, [pc, #168]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	610b      	str	r3, [r1, #16]
 80028e0:	e027      	b.n	8002932 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d112      	bne.n	800290e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028e8:	4b26      	ldr	r3, [pc, #152]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6892      	ldr	r2, [r2, #8]
 80028f8:	0211      	lsls	r1, r2, #8
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6912      	ldr	r2, [r2, #16]
 80028fe:	0852      	lsrs	r2, r2, #1
 8002900:	3a01      	subs	r2, #1
 8002902:	0552      	lsls	r2, r2, #21
 8002904:	430a      	orrs	r2, r1
 8002906:	491f      	ldr	r1, [pc, #124]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	610b      	str	r3, [r1, #16]
 800290c:	e011      	b.n	8002932 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002916:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6892      	ldr	r2, [r2, #8]
 800291e:	0211      	lsls	r1, r2, #8
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6952      	ldr	r2, [r2, #20]
 8002924:	0852      	lsrs	r2, r2, #1
 8002926:	3a01      	subs	r2, #1
 8002928:	0652      	lsls	r2, r2, #25
 800292a:	430a      	orrs	r2, r1
 800292c:	4915      	ldr	r1, [pc, #84]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800292e:	4313      	orrs	r3, r2
 8002930:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002932:	4b14      	ldr	r3, [pc, #80]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a13      	ldr	r2, [pc, #76]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002938:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800293c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293e:	f7fe fa41 	bl	8000dc4 <HAL_GetTick>
 8002942:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002944:	e009      	b.n	800295a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002946:	f7fe fa3d 	bl	8000dc4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d902      	bls.n	800295a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	73fb      	strb	r3, [r7, #15]
          break;
 8002958:	e005      	b.n	8002966 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0ef      	beq.n	8002946 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	4903      	ldr	r1, [pc, #12]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000

08002988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e095      	b.n	8002ac6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d108      	bne.n	80029b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029aa:	d009      	beq.n	80029c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	61da      	str	r2, [r3, #28]
 80029b2:	e005      	b.n	80029c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fd ff46 	bl	800086c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a00:	d902      	bls.n	8002a08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	e002      	b.n	8002a0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a16:	d007      	beq.n	8002a28 <HAL_SPI_Init+0xa0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a20:	d002      	beq.n	8002a28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6a:	ea42 0103 	orr.w	r1, r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	f003 0204 	and.w	r2, r3, #4
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002aa4:	ea42 0103 	orr.w	r1, r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	4613      	mov	r3, r2
 8002adc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_SPI_Transmit_IT+0x20>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e072      	b.n	8002bd6 <HAL_SPI_Transmit_IT+0x106>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_SPI_Transmit_IT+0x34>
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b08:	e060      	b.n	8002bcc <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d002      	beq.n	8002b1c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002b16:	2302      	movs	r3, #2
 8002b18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b1a:	e057      	b.n	8002bcc <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	88fa      	ldrh	r2, [r7, #6]
 8002b34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	88fa      	ldrh	r2, [r7, #6]
 8002b3a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b60:	d903      	bls.n	8002b6a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <HAL_SPI_Transmit_IT+0x114>)
 8002b66:	651a      	str	r2, [r3, #80]	; 0x50
 8002b68:	e002      	b.n	8002b70 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <HAL_SPI_Transmit_IT+0x118>)
 8002b6e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b78:	d10f      	bne.n	8002b9a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002ba8:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	d008      	beq.n	8002bca <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e000      	b.n	8002bcc <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8002bca:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	0800341f 	.word	0x0800341f
 8002be8:	080033d9 	.word	0x080033d9

08002bec <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d110      	bne.n	8002c28 <HAL_SPI_Receive_IT+0x3c>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c0e:	d10b      	bne.n	8002c28 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2204      	movs	r2, #4
 8002c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f894 	bl	8002d4c <HAL_SPI_TransmitReceive_IT>
 8002c24:	4603      	mov	r3, r0
 8002c26:	e089      	b.n	8002d3c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Receive_IT+0x4a>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e082      	b.n	8002d3c <HAL_SPI_Receive_IT+0x150>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d002      	beq.n	8002c50 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c4e:	e070      	b.n	8002d32 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_SPI_Receive_IT+0x70>
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c60:	e067      	b.n	8002d32 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2204      	movs	r2, #4
 8002c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	88fa      	ldrh	r2, [r7, #6]
 8002c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ca6:	d90b      	bls.n	8002cc0 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cb6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <HAL_SPI_Receive_IT+0x158>)
 8002cbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cbe:	e00a      	b.n	8002cd6 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cce:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_SPI_Receive_IT+0x15c>)
 8002cd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cde:	d10f      	bne.n	8002d00 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cfe:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002d0e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d008      	beq.n	8002d30 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e000      	b.n	8002d32 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8002d30:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	0800338d 	.word	0x0800338d
 8002d48:	0800333d 	.word	0x0800333d

08002d4c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_SPI_TransmitReceive_IT+0x20>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e091      	b.n	8002e90 <HAL_SPI_TransmitReceive_IT+0x144>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d7a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d82:	7dbb      	ldrb	r3, [r7, #22]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d00d      	beq.n	8002da4 <HAL_SPI_TransmitReceive_IT+0x58>
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d8e:	d106      	bne.n	8002d9e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <HAL_SPI_TransmitReceive_IT+0x52>
 8002d98:	7dbb      	ldrb	r3, [r7, #22]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d002      	beq.n	8002da4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002da2:	e070      	b.n	8002e86 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dba:	e064      	b.n	8002e86 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d003      	beq.n	8002dd0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2205      	movs	r2, #5
 8002dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	887a      	ldrh	r2, [r7, #2]
 8002de6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	887a      	ldrh	r2, [r7, #2]
 8002df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	887a      	ldrh	r2, [r7, #2]
 8002dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e06:	d906      	bls.n	8002e16 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a24      	ldr	r2, [pc, #144]	; (8002e9c <HAL_SPI_TransmitReceive_IT+0x150>)
 8002e0c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4a23      	ldr	r2, [pc, #140]	; (8002ea0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002e12:	651a      	str	r2, [r3, #80]	; 0x50
 8002e14:	e005      	b.n	8002e22 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4a22      	ldr	r2, [pc, #136]	; (8002ea4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002e1a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a22      	ldr	r2, [pc, #136]	; (8002ea8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8002e20:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e2a:	d802      	bhi.n	8002e32 <HAL_SPI_TransmitReceive_IT+0xe6>
 8002e2c:	887b      	ldrh	r3, [r7, #2]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d908      	bls.n	8002e44 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	e007      	b.n	8002e54 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e52:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002e62:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d008      	beq.n	8002e84 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e000      	b.n	8002e86 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8002e84:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	08003277 	.word	0x08003277
 8002ea0:	080032dd 	.word	0x080032dd
 8002ea4:	08003127 	.word	0x08003127
 8002ea8:	080031e5 	.word	0x080031e5

08002eac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	099b      	lsrs	r3, r3, #6
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10f      	bne.n	8002ef0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	099b      	lsrs	r3, r3, #6
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d004      	beq.n	8002ef0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
    return;
 8002eee:	e0d7      	b.n	80030a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	085b      	lsrs	r3, r3, #1
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_SPI_IRQHandler+0x66>
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	09db      	lsrs	r3, r3, #7
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
    return;
 8002f10:	e0c6      	b.n	80030a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10c      	bne.n	8002f38 <HAL_SPI_IRQHandler+0x8c>
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80b4 	beq.w	80030a0 <HAL_SPI_IRQHandler+0x1f4>
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80ad 	beq.w	80030a0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d023      	beq.n	8002f9a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d011      	beq.n	8002f82 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f62:	f043 0204 	orr.w	r2, r3, #4
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	e00b      	b.n	8002f9a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	693b      	ldr	r3, [r7, #16]
        return;
 8002f98:	e082      	b.n	80030a0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d014      	beq.n	8002fd0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00c      	beq.n	8002ff6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe0:	f043 0208 	orr.w	r2, r3, #8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d04f      	beq.n	800309e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800300c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d104      	bne.n	800302a <HAL_SPI_IRQHandler+0x17e>
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d034      	beq.n	8003094 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0203 	bic.w	r2, r2, #3
 8003038:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303e:	2b00      	cmp	r3, #0
 8003040:	d011      	beq.n	8003066 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <HAL_SPI_IRQHandler+0x1fc>)
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe f813 	bl	800107a <HAL_DMA_Abort_IT>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	4a0d      	ldr	r2, [pc, #52]	; (80030a8 <HAL_SPI_IRQHandler+0x1fc>)
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fffd 	bl	800107a <HAL_DMA_Abort_IT>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003092:	e003      	b.n	800309c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f827 	bl	80030e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800309a:	e000      	b.n	800309e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800309c:	bf00      	nop
    return;
 800309e:	bf00      	nop
  }
}
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	080030fd 	.word	0x080030fd

080030ac <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7ff ffe5 	bl	80030e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d923      	bls.n	8003182 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	b292      	uxth	r2, r2
 8003146:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	1c9a      	adds	r2, r3, #2
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b02      	subs	r3, #2
 800315c:	b29a      	uxth	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d11f      	bne.n	80031b0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800317e:	605a      	str	r2, [r3, #4]
 8003180:	e016      	b.n	80031b0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f103 020c 	add.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	7812      	ldrb	r2, [r2, #0]
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10f      	bne.n	80031dc <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031ca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d102      	bne.n	80031dc <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fafc 	bl	80037d4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d912      	bls.n	800321c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	881a      	ldrh	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	1c9a      	adds	r2, r3, #2
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b02      	subs	r3, #2
 8003214:	b29a      	uxth	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	87da      	strh	r2, [r3, #62]	; 0x3e
 800321a:	e012      	b.n	8003242 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	330c      	adds	r3, #12
 8003226:	7812      	ldrb	r2, [r2, #0]
 8003228:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d110      	bne.n	800326e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800325a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fab3 	bl	80037d4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	b292      	uxth	r2, r2
 800328a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	1c9a      	adds	r2, r3, #2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10f      	bne.n	80032d4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fa80 	bl	80037d4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	881a      	ldrh	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	1c9a      	adds	r2, r3, #2
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d110      	bne.n	8003334 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003320:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fa50 	bl	80037d4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f103 020c 	add.w	r2, r3, #12
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	7812      	ldrb	r2, [r2, #0]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fa6a 	bl	8003858 <SPI_CloseRx_ISR>
  }
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	b292      	uxth	r2, r2
 80033a0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	1c9a      	adds	r2, r3, #2
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fa44 	bl	8003858 <SPI_CloseRx_ISR>
  }
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	330c      	adds	r3, #12
 80033ea:	7812      	ldrb	r2, [r2, #0]
 80033ec:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fa51 	bl	80038b8 <SPI_CloseTx_ISR>
  }
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	881a      	ldrh	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	1c9a      	adds	r2, r3, #2
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fa2f 	bl	80038b8 <SPI_CloseTx_ISR>
  }
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003474:	f7fd fca6 	bl	8000dc4 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	4413      	add	r3, r2
 8003482:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003484:	f7fd fc9e 	bl	8000dc4 <HAL_GetTick>
 8003488:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800348a:	4b39      	ldr	r3, [pc, #228]	; (8003570 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	015b      	lsls	r3, r3, #5
 8003490:	0d1b      	lsrs	r3, r3, #20
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	fb02 f303 	mul.w	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800349a:	e054      	b.n	8003546 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d050      	beq.n	8003546 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034a4:	f7fd fc8e 	bl	8000dc4 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d902      	bls.n	80034ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d13d      	bne.n	8003536 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034d2:	d111      	bne.n	80034f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034dc:	d004      	beq.n	80034e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e6:	d107      	bne.n	80034f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003500:	d10f      	bne.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003520:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e017      	b.n	8003566 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	3b01      	subs	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4013      	ands	r3, r2
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	429a      	cmp	r2, r3
 8003554:	bf0c      	ite	eq
 8003556:	2301      	moveq	r3, #1
 8003558:	2300      	movne	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	429a      	cmp	r2, r3
 8003562:	d19b      	bne.n	800349c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000000 	.word	0x20000000

08003574 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003582:	f7fd fc1f 	bl	8000dc4 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	4413      	add	r3, r2
 8003590:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003592:	f7fd fc17 	bl	8000dc4 <HAL_GetTick>
 8003596:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003598:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	00da      	lsls	r2, r3, #3
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	0d1b      	lsrs	r3, r3, #20
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80035b0:	e062      	b.n	8003678 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035b8:	d109      	bne.n	80035ce <SPI_WaitFifoStateUntilTimeout+0x5a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80035cc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d050      	beq.n	8003678 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035d6:	f7fd fbf5 	bl	8000dc4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d902      	bls.n	80035ec <SPI_WaitFifoStateUntilTimeout+0x78>
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d13d      	bne.n	8003668 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003604:	d111      	bne.n	800362a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800360e:	d004      	beq.n	800361a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003618:	d107      	bne.n	800362a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003628:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003632:	d10f      	bne.n	8003654 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003652:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e010      	b.n	800368a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	3b01      	subs	r3, #1
 8003676:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	d194      	bne.n	80035b2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000000 	.word	0x20000000

08003698 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ac:	d111      	bne.n	80036d2 <SPI_EndRxTransaction+0x3a>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b6:	d004      	beq.n	80036c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c0:	d107      	bne.n	80036d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2200      	movs	r2, #0
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7ff fec1 	bl	8003464 <SPI_WaitFlagStateUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ec:	f043 0220 	orr.w	r2, r3, #32
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e023      	b.n	8003740 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003700:	d11d      	bne.n	800373e <SPI_EndRxTransaction+0xa6>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370a:	d004      	beq.n	8003716 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003714:	d113      	bne.n	800373e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2200      	movs	r2, #0
 800371e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff ff26 	bl	8003574 <SPI_WaitFifoStateUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e000      	b.n	8003740 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2200      	movs	r2, #0
 800375c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff ff07 	bl	8003574 <SPI_WaitFifoStateUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	f043 0220 	orr.w	r2, r3, #32
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e027      	b.n	80037cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2200      	movs	r2, #0
 8003784:	2180      	movs	r1, #128	; 0x80
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff fe6c 	bl	8003464 <SPI_WaitFlagStateUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e014      	b.n	80037cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f7ff fee0 	bl	8003574 <SPI_WaitFifoStateUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037be:	f043 0220 	orr.w	r2, r3, #32
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e000      	b.n	80037cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037dc:	f7fd faf2 	bl	8000dc4 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0220 	bic.w	r2, r2, #32
 80037f0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	2164      	movs	r1, #100	; 0x64
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ffa6 	bl	8003748 <SPI_EndRxTxTransaction>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003812:	2b00      	cmp	r3, #0
 8003814:	d115      	bne.n	8003842 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b04      	cmp	r3, #4
 8003820:	d107      	bne.n	8003832 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff fc48 	bl	80030c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003830:	e00e      	b.n	8003850 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff fc4a 	bl	80030d4 <HAL_SPI_TxRxCpltCallback>
}
 8003840:	e006      	b.n	8003850 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff fc4c 	bl	80030e8 <HAL_SPI_ErrorCallback>
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800386e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003870:	f7fd faa8 	bl	8000dc4 <HAL_GetTick>
 8003874:	4603      	mov	r3, r0
 8003876:	461a      	mov	r2, r3
 8003878:	2164      	movs	r1, #100	; 0x64
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ff0c 	bl	8003698 <SPI_EndRxTransaction>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d103      	bne.n	80038aa <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fc0c 	bl	80030c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80038a8:	e002      	b.n	80038b0 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff fc1c 	bl	80030e8 <HAL_SPI_ErrorCallback>
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c0:	f7fd fa80 	bl	8000dc4 <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	2164      	movs	r1, #100	; 0x64
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff ff34 	bl	8003748 <SPI_EndRxTxTransaction>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	f043 0220 	orr.w	r2, r3, #32
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff fbe1 	bl	80030e8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003926:	e002      	b.n	800392e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fbbf 	bl	80030ac <HAL_SPI_TxCpltCallback>
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e049      	b.n	80039dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7fd f8c7 	bl	8000af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3304      	adds	r3, #4
 8003972:	4619      	mov	r1, r3
 8003974:	4610      	mov	r0, r2
 8003976:	f000 fa97 	bl	8003ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d001      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e03b      	b.n	8003a74 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a19      	ldr	r2, [pc, #100]	; (8003a80 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d009      	beq.n	8003a32 <HAL_TIM_Base_Start_IT+0x4e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a26:	d004      	beq.n	8003a32 <HAL_TIM_Base_Start_IT+0x4e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d115      	bne.n	8003a5e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <HAL_TIM_Base_Start_IT+0xa4>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b06      	cmp	r3, #6
 8003a42:	d015      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x8c>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4a:	d011      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5c:	e008      	b.n	8003a70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e000      	b.n	8003a72 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40014000 	.word	0x40014000
 8003a88:	00010007 	.word	0x00010007

08003a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d122      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d11b      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0202 	mvn.w	r2, #2
 8003ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9cb 	bl	8003e6a <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f9bd 	bl	8003e56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f9ce 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d122      	bne.n	8003b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d11b      	bne.n	8003b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0204 	mvn.w	r2, #4
 8003b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f9a1 	bl	8003e6a <HAL_TIM_IC_CaptureCallback>
 8003b28:	e005      	b.n	8003b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f993 	bl	8003e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f9a4 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d122      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d11b      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0208 	mvn.w	r2, #8
 8003b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2204      	movs	r2, #4
 8003b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f977 	bl	8003e6a <HAL_TIM_IC_CaptureCallback>
 8003b7c:	e005      	b.n	8003b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f969 	bl	8003e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f97a 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b10      	cmp	r3, #16
 8003b9c:	d122      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0210 	mvn.w	r2, #16
 8003bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f94d 	bl	8003e6a <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f93f 	bl	8003e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f950 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0201 	mvn.w	r2, #1
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fc fe94 	bl	8000938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	2b80      	cmp	r3, #128	; 0x80
 8003c1c:	d10e      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c28:	2b80      	cmp	r3, #128	; 0x80
 8003c2a:	d107      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 faa4 	bl	8004184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4a:	d10e      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b80      	cmp	r3, #128	; 0x80
 8003c58:	d107      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fa97 	bl	8004198 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d10e      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	d107      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f8fe 	bl	8003e92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d107      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0220 	mvn.w	r2, #32
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fa57 	bl	8004170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_TIM_ConfigClockSource+0x18>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e0b5      	b.n	8003e4e <HAL_TIM_ConfigClockSource+0x184>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2202      	movs	r2, #2
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d04:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d0c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1e:	d03e      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0xd4>
 8003d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d24:	f200 8087 	bhi.w	8003e36 <HAL_TIM_ConfigClockSource+0x16c>
 8003d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2c:	f000 8085 	beq.w	8003e3a <HAL_TIM_ConfigClockSource+0x170>
 8003d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d34:	d87f      	bhi.n	8003e36 <HAL_TIM_ConfigClockSource+0x16c>
 8003d36:	2b70      	cmp	r3, #112	; 0x70
 8003d38:	d01a      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0xa6>
 8003d3a:	2b70      	cmp	r3, #112	; 0x70
 8003d3c:	d87b      	bhi.n	8003e36 <HAL_TIM_ConfigClockSource+0x16c>
 8003d3e:	2b60      	cmp	r3, #96	; 0x60
 8003d40:	d050      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x11a>
 8003d42:	2b60      	cmp	r3, #96	; 0x60
 8003d44:	d877      	bhi.n	8003e36 <HAL_TIM_ConfigClockSource+0x16c>
 8003d46:	2b50      	cmp	r3, #80	; 0x50
 8003d48:	d03c      	beq.n	8003dc4 <HAL_TIM_ConfigClockSource+0xfa>
 8003d4a:	2b50      	cmp	r3, #80	; 0x50
 8003d4c:	d873      	bhi.n	8003e36 <HAL_TIM_ConfigClockSource+0x16c>
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d058      	beq.n	8003e04 <HAL_TIM_ConfigClockSource+0x13a>
 8003d52:	2b40      	cmp	r3, #64	; 0x40
 8003d54:	d86f      	bhi.n	8003e36 <HAL_TIM_ConfigClockSource+0x16c>
 8003d56:	2b30      	cmp	r3, #48	; 0x30
 8003d58:	d064      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0x15a>
 8003d5a:	2b30      	cmp	r3, #48	; 0x30
 8003d5c:	d86b      	bhi.n	8003e36 <HAL_TIM_ConfigClockSource+0x16c>
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d060      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0x15a>
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d867      	bhi.n	8003e36 <HAL_TIM_ConfigClockSource+0x16c>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d05c      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0x15a>
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d05a      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d6e:	e062      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	6899      	ldr	r1, [r3, #8]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f000 f970 	bl	8004064 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	609a      	str	r2, [r3, #8]
      break;
 8003d9c:	e04e      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6899      	ldr	r1, [r3, #8]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f000 f959 	bl	8004064 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dc0:	609a      	str	r2, [r3, #8]
      break;
 8003dc2:	e03b      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f000 f8cd 	bl	8003f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2150      	movs	r1, #80	; 0x50
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 f926 	bl	800402e <TIM_ITRx_SetConfig>
      break;
 8003de2:	e02b      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6859      	ldr	r1, [r3, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	461a      	mov	r2, r3
 8003df2:	f000 f8ec 	bl	8003fce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2160      	movs	r1, #96	; 0x60
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f916 	bl	800402e <TIM_ITRx_SetConfig>
      break;
 8003e02:	e01b      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	461a      	mov	r2, r3
 8003e12:	f000 f8ad 	bl	8003f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2140      	movs	r1, #64	; 0x40
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f906 	bl	800402e <TIM_ITRx_SetConfig>
      break;
 8003e22:	e00b      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f000 f8fd 	bl	800402e <TIM_ITRx_SetConfig>
        break;
 8003e34:	e002      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003e36:	bf00      	nop
 8003e38:	e000      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
	...

08003ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <TIM_Base_SetConfig+0xbc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0x20>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec6:	d108      	bne.n	8003eda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a21      	ldr	r2, [pc, #132]	; (8003f64 <TIM_Base_SetConfig+0xbc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_Base_SetConfig+0x52>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0x52>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <TIM_Base_SetConfig+0xc0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0x52>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <TIM_Base_SetConfig+0xc4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d108      	bne.n	8003f0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a0c      	ldr	r2, [pc, #48]	; (8003f64 <TIM_Base_SetConfig+0xbc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d007      	beq.n	8003f48 <TIM_Base_SetConfig+0xa0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <TIM_Base_SetConfig+0xc0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <TIM_Base_SetConfig+0xa0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <TIM_Base_SetConfig+0xc4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d103      	bne.n	8003f50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	615a      	str	r2, [r3, #20]
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	40014400 	.word	0x40014400

08003f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f023 0201 	bic.w	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f023 030a 	bic.w	r3, r3, #10
 8003fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	621a      	str	r2, [r3, #32]
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b087      	sub	sp, #28
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0210 	bic.w	r2, r3, #16
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ff8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	031b      	lsls	r3, r3, #12
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800400a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	f043 0307 	orr.w	r3, r3, #7
 8004050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	609a      	str	r2, [r3, #8]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800407e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	021a      	lsls	r2, r3, #8
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	431a      	orrs	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4313      	orrs	r3, r2
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	609a      	str	r2, [r3, #8]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e04f      	b.n	800415c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a21      	ldr	r2, [pc, #132]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d108      	bne.n	80040f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a14      	ldr	r2, [pc, #80]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d009      	beq.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004124:	d004      	beq.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a10      	ldr	r2, [pc, #64]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d10c      	bne.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004136:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	4313      	orrs	r3, r2
 8004140:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40014000 	.word	0x40014000

08004170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e040      	b.n	8004240 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fc fcdc 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2224      	movs	r2, #36	; 0x24
 80041d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fa4e 	bl	800468c <UART_SetConfig>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e022      	b.n	8004240 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fc4e 	bl	8004aa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004216:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004226:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fcd5 	bl	8004be8 <UART_CheckIdleState>
 800423e:	4603      	mov	r3, r0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	f640 030f 	movw	r3, #2063	; 0x80f
 800426e:	4013      	ands	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d113      	bne.n	80042a0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00e      	beq.n	80042a0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d009      	beq.n	80042a0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 81ce 	beq.w	8004632 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
      }
      return;
 800429e:	e1c8      	b.n	8004632 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 80e3 	beq.w	800446e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d105      	bne.n	80042be <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4ba6      	ldr	r3, [pc, #664]	; (8004550 <HAL_UART_IRQHandler+0x308>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80d8 	beq.w	800446e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d010      	beq.n	80042ea <HAL_UART_IRQHandler+0xa2>
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2201      	movs	r2, #1
 80042d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e0:	f043 0201 	orr.w	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d010      	beq.n	8004316 <HAL_UART_IRQHandler+0xce>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2202      	movs	r2, #2
 8004304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800430c:	f043 0204 	orr.w	r2, r3, #4
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d010      	beq.n	8004342 <HAL_UART_IRQHandler+0xfa>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2204      	movs	r2, #4
 8004330:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004338:	f043 0202 	orr.w	r2, r3, #2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d015      	beq.n	8004378 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00b      	beq.n	8004378 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2208      	movs	r2, #8
 8004366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800436e:	f043 0208 	orr.w	r2, r3, #8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800437e:	2b00      	cmp	r3, #0
 8004380:	d011      	beq.n	80043a6 <HAL_UART_IRQHandler+0x15e>
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00c      	beq.n	80043a6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439c:	f043 0220 	orr.w	r2, r3, #32
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8142 	beq.w	8004636 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00c      	beq.n	80043d6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e8:	2b40      	cmp	r3, #64	; 0x40
 80043ea:	d004      	beq.n	80043f6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d031      	beq.n	800445a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fcbb 	bl	8004d72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b40      	cmp	r3, #64	; 0x40
 8004408:	d123      	bne.n	8004452 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004418:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	2b00      	cmp	r3, #0
 8004420:	d013      	beq.n	800444a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4a4b      	ldr	r2, [pc, #300]	; (8004554 <HAL_UART_IRQHandler+0x30c>)
 8004428:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	4618      	mov	r0, r3
 8004430:	f7fc fe23 	bl	800107a <HAL_DMA_Abort_IT>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d017      	beq.n	800446a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004444:	4610      	mov	r0, r2
 8004446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	e00f      	b.n	800446a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f908 	bl	8004660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004450:	e00b      	b.n	800446a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f904 	bl	8004660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	e007      	b.n	800446a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f900 	bl	8004660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004468:	e0e5      	b.n	8004636 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446a:	bf00      	nop
    return;
 800446c:	e0e3      	b.n	8004636 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004472:	2b01      	cmp	r3, #1
 8004474:	f040 80a9 	bne.w	80045ca <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 80a3 	beq.w	80045ca <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 809d 	beq.w	80045ca <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2210      	movs	r2, #16
 8004496:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d158      	bne.n	8004558 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80044b0:	893b      	ldrh	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80c1 	beq.w	800463a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044be:	893a      	ldrh	r2, [r7, #8]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	f080 80ba 	bcs.w	800463a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	893a      	ldrh	r2, [r7, #8]
 80044ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d12a      	bne.n	8004534 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800450c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0210 	bic.w	r2, r2, #16
 8004528:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	4618      	mov	r0, r3
 8004530:	f7fc fd65 	bl	8000ffe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004540:	b29b      	uxth	r3, r3
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	b29b      	uxth	r3, r3
 8004546:	4619      	mov	r1, r3
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f893 	bl	8004674 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800454e:	e074      	b.n	800463a <HAL_UART_IRQHandler+0x3f2>
 8004550:	04000120 	.word	0x04000120
 8004554:	08004dd1 	.word	0x08004dd1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004564:	b29b      	uxth	r3, r3
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d063      	beq.n	800463e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8004576:	897b      	ldrh	r3, [r7, #10]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d060      	beq.n	800463e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800458a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0210 	bic.w	r2, r2, #16
 80045bc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045be:	897b      	ldrh	r3, [r7, #10]
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f856 	bl	8004674 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80045c8:	e039      	b.n	800463e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00d      	beq.n	80045f0 <HAL_UART_IRQHandler+0x3a8>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d008      	beq.n	80045f0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fc20 	bl	8004e2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045ee:	e029      	b.n	8004644 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00d      	beq.n	8004616 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01a      	beq.n	8004642 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
    }
    return;
 8004614:	e015      	b.n	8004642 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d011      	beq.n	8004644 <HAL_UART_IRQHandler+0x3fc>
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00c      	beq.n	8004644 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fbe6 	bl	8004dfc <UART_EndTransmit_IT>
    return;
 8004630:	e008      	b.n	8004644 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004632:	bf00      	nop
 8004634:	e006      	b.n	8004644 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004636:	bf00      	nop
 8004638:	e004      	b.n	8004644 <HAL_UART_IRQHandler+0x3fc>
      return;
 800463a:	bf00      	nop
 800463c:	e002      	b.n	8004644 <HAL_UART_IRQHandler+0x3fc>
      return;
 800463e:	bf00      	nop
 8004640:	e000      	b.n	8004644 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004642:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop

0800464c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800468c:	b5b0      	push	{r4, r5, r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4baf      	ldr	r3, [pc, #700]	; (8004974 <UART_SetConfig+0x2e8>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	69f9      	ldr	r1, [r7, #28]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4aa4      	ldr	r2, [pc, #656]	; (8004978 <UART_SetConfig+0x2ec>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a9b      	ldr	r2, [pc, #620]	; (800497c <UART_SetConfig+0x2f0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d121      	bne.n	8004756 <UART_SetConfig+0xca>
 8004712:	4b9b      	ldr	r3, [pc, #620]	; (8004980 <UART_SetConfig+0x2f4>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	2b03      	cmp	r3, #3
 800471e:	d817      	bhi.n	8004750 <UART_SetConfig+0xc4>
 8004720:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <UART_SetConfig+0x9c>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	08004739 	.word	0x08004739
 800472c:	08004745 	.word	0x08004745
 8004730:	0800473f 	.word	0x0800473f
 8004734:	0800474b 	.word	0x0800474b
 8004738:	2301      	movs	r3, #1
 800473a:	76fb      	strb	r3, [r7, #27]
 800473c:	e070      	b.n	8004820 <UART_SetConfig+0x194>
 800473e:	2302      	movs	r3, #2
 8004740:	76fb      	strb	r3, [r7, #27]
 8004742:	e06d      	b.n	8004820 <UART_SetConfig+0x194>
 8004744:	2304      	movs	r3, #4
 8004746:	76fb      	strb	r3, [r7, #27]
 8004748:	e06a      	b.n	8004820 <UART_SetConfig+0x194>
 800474a:	2308      	movs	r3, #8
 800474c:	76fb      	strb	r3, [r7, #27]
 800474e:	e067      	b.n	8004820 <UART_SetConfig+0x194>
 8004750:	2310      	movs	r3, #16
 8004752:	76fb      	strb	r3, [r7, #27]
 8004754:	e064      	b.n	8004820 <UART_SetConfig+0x194>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a8a      	ldr	r2, [pc, #552]	; (8004984 <UART_SetConfig+0x2f8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d132      	bne.n	80047c6 <UART_SetConfig+0x13a>
 8004760:	4b87      	ldr	r3, [pc, #540]	; (8004980 <UART_SetConfig+0x2f4>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d828      	bhi.n	80047c0 <UART_SetConfig+0x134>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0xe8>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	080047a9 	.word	0x080047a9
 8004778:	080047c1 	.word	0x080047c1
 800477c:	080047c1 	.word	0x080047c1
 8004780:	080047c1 	.word	0x080047c1
 8004784:	080047b5 	.word	0x080047b5
 8004788:	080047c1 	.word	0x080047c1
 800478c:	080047c1 	.word	0x080047c1
 8004790:	080047c1 	.word	0x080047c1
 8004794:	080047af 	.word	0x080047af
 8004798:	080047c1 	.word	0x080047c1
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047c1 	.word	0x080047c1
 80047a4:	080047bb 	.word	0x080047bb
 80047a8:	2300      	movs	r3, #0
 80047aa:	76fb      	strb	r3, [r7, #27]
 80047ac:	e038      	b.n	8004820 <UART_SetConfig+0x194>
 80047ae:	2302      	movs	r3, #2
 80047b0:	76fb      	strb	r3, [r7, #27]
 80047b2:	e035      	b.n	8004820 <UART_SetConfig+0x194>
 80047b4:	2304      	movs	r3, #4
 80047b6:	76fb      	strb	r3, [r7, #27]
 80047b8:	e032      	b.n	8004820 <UART_SetConfig+0x194>
 80047ba:	2308      	movs	r3, #8
 80047bc:	76fb      	strb	r3, [r7, #27]
 80047be:	e02f      	b.n	8004820 <UART_SetConfig+0x194>
 80047c0:	2310      	movs	r3, #16
 80047c2:	76fb      	strb	r3, [r7, #27]
 80047c4:	e02c      	b.n	8004820 <UART_SetConfig+0x194>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a6b      	ldr	r2, [pc, #428]	; (8004978 <UART_SetConfig+0x2ec>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d125      	bne.n	800481c <UART_SetConfig+0x190>
 80047d0:	4b6b      	ldr	r3, [pc, #428]	; (8004980 <UART_SetConfig+0x2f4>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047de:	d017      	beq.n	8004810 <UART_SetConfig+0x184>
 80047e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047e4:	d817      	bhi.n	8004816 <UART_SetConfig+0x18a>
 80047e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ea:	d00b      	beq.n	8004804 <UART_SetConfig+0x178>
 80047ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f0:	d811      	bhi.n	8004816 <UART_SetConfig+0x18a>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <UART_SetConfig+0x172>
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fa:	d006      	beq.n	800480a <UART_SetConfig+0x17e>
 80047fc:	e00b      	b.n	8004816 <UART_SetConfig+0x18a>
 80047fe:	2300      	movs	r3, #0
 8004800:	76fb      	strb	r3, [r7, #27]
 8004802:	e00d      	b.n	8004820 <UART_SetConfig+0x194>
 8004804:	2302      	movs	r3, #2
 8004806:	76fb      	strb	r3, [r7, #27]
 8004808:	e00a      	b.n	8004820 <UART_SetConfig+0x194>
 800480a:	2304      	movs	r3, #4
 800480c:	76fb      	strb	r3, [r7, #27]
 800480e:	e007      	b.n	8004820 <UART_SetConfig+0x194>
 8004810:	2308      	movs	r3, #8
 8004812:	76fb      	strb	r3, [r7, #27]
 8004814:	e004      	b.n	8004820 <UART_SetConfig+0x194>
 8004816:	2310      	movs	r3, #16
 8004818:	76fb      	strb	r3, [r7, #27]
 800481a:	e001      	b.n	8004820 <UART_SetConfig+0x194>
 800481c:	2310      	movs	r3, #16
 800481e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a54      	ldr	r2, [pc, #336]	; (8004978 <UART_SetConfig+0x2ec>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d173      	bne.n	8004912 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800482a:	7efb      	ldrb	r3, [r7, #27]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d824      	bhi.n	800487a <UART_SetConfig+0x1ee>
 8004830:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <UART_SetConfig+0x1ac>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	0800485d 	.word	0x0800485d
 800483c:	0800487b 	.word	0x0800487b
 8004840:	08004865 	.word	0x08004865
 8004844:	0800487b 	.word	0x0800487b
 8004848:	0800486b 	.word	0x0800486b
 800484c:	0800487b 	.word	0x0800487b
 8004850:	0800487b 	.word	0x0800487b
 8004854:	0800487b 	.word	0x0800487b
 8004858:	08004873 	.word	0x08004873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800485c:	f7fd fd22 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 8004860:	6178      	str	r0, [r7, #20]
        break;
 8004862:	e00f      	b.n	8004884 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004864:	4b48      	ldr	r3, [pc, #288]	; (8004988 <UART_SetConfig+0x2fc>)
 8004866:	617b      	str	r3, [r7, #20]
        break;
 8004868:	e00c      	b.n	8004884 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486a:	f7fd fc83 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 800486e:	6178      	str	r0, [r7, #20]
        break;
 8004870:	e008      	b.n	8004884 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004876:	617b      	str	r3, [r7, #20]
        break;
 8004878:	e004      	b.n	8004884 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	76bb      	strb	r3, [r7, #26]
        break;
 8004882:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80fe 	beq.w	8004a88 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4413      	add	r3, r2
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	429a      	cmp	r2, r3
 800489a:	d305      	bcc.n	80048a8 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d902      	bls.n	80048ae <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	76bb      	strb	r3, [r7, #26]
 80048ac:	e0ec      	b.n	8004a88 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f04f 0100 	mov.w	r1, #0
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	020b      	lsls	r3, r1, #8
 80048c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048c4:	0202      	lsls	r2, r0, #8
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	6849      	ldr	r1, [r1, #4]
 80048ca:	0849      	lsrs	r1, r1, #1
 80048cc:	4608      	mov	r0, r1
 80048ce:	f04f 0100 	mov.w	r1, #0
 80048d2:	1814      	adds	r4, r2, r0
 80048d4:	eb43 0501 	adc.w	r5, r3, r1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	461a      	mov	r2, r3
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	4620      	mov	r0, r4
 80048e4:	4629      	mov	r1, r5
 80048e6:	f7fb fc71 	bl	80001cc <__aeabi_uldivmod>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4613      	mov	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048f8:	d308      	bcc.n	800490c <UART_SetConfig+0x280>
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004900:	d204      	bcs.n	800490c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	e0bd      	b.n	8004a88 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	76bb      	strb	r3, [r7, #26]
 8004910:	e0ba      	b.n	8004a88 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491a:	d168      	bne.n	80049ee <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800491c:	7efb      	ldrb	r3, [r7, #27]
 800491e:	2b08      	cmp	r3, #8
 8004920:	d834      	bhi.n	800498c <UART_SetConfig+0x300>
 8004922:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <UART_SetConfig+0x29c>)
 8004924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004928:	0800494d 	.word	0x0800494d
 800492c:	08004955 	.word	0x08004955
 8004930:	0800495d 	.word	0x0800495d
 8004934:	0800498d 	.word	0x0800498d
 8004938:	08004963 	.word	0x08004963
 800493c:	0800498d 	.word	0x0800498d
 8004940:	0800498d 	.word	0x0800498d
 8004944:	0800498d 	.word	0x0800498d
 8004948:	0800496b 	.word	0x0800496b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800494c:	f7fd fcaa 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 8004950:	6178      	str	r0, [r7, #20]
        break;
 8004952:	e020      	b.n	8004996 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004954:	f7fd fcbc 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 8004958:	6178      	str	r0, [r7, #20]
        break;
 800495a:	e01c      	b.n	8004996 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <UART_SetConfig+0x2fc>)
 800495e:	617b      	str	r3, [r7, #20]
        break;
 8004960:	e019      	b.n	8004996 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004962:	f7fd fc07 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8004966:	6178      	str	r0, [r7, #20]
        break;
 8004968:	e015      	b.n	8004996 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800496a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496e:	617b      	str	r3, [r7, #20]
        break;
 8004970:	e011      	b.n	8004996 <UART_SetConfig+0x30a>
 8004972:	bf00      	nop
 8004974:	efff69f3 	.word	0xefff69f3
 8004978:	40008000 	.word	0x40008000
 800497c:	40013800 	.word	0x40013800
 8004980:	40021000 	.word	0x40021000
 8004984:	40004400 	.word	0x40004400
 8004988:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	76bb      	strb	r3, [r7, #26]
        break;
 8004994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d075      	beq.n	8004a88 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	005a      	lsls	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	441a      	add	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b0f      	cmp	r3, #15
 80049b8:	d916      	bls.n	80049e8 <UART_SetConfig+0x35c>
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c0:	d212      	bcs.n	80049e8 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	f023 030f 	bic.w	r3, r3, #15
 80049ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	89fb      	ldrh	r3, [r7, #14]
 80049da:	4313      	orrs	r3, r2
 80049dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	89fa      	ldrh	r2, [r7, #14]
 80049e4:	60da      	str	r2, [r3, #12]
 80049e6:	e04f      	b.n	8004a88 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	76bb      	strb	r3, [r7, #26]
 80049ec:	e04c      	b.n	8004a88 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049ee:	7efb      	ldrb	r3, [r7, #27]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d828      	bhi.n	8004a46 <UART_SetConfig+0x3ba>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0x370>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	08004a47 	.word	0x08004a47
 8004a0c:	08004a37 	.word	0x08004a37
 8004a10:	08004a47 	.word	0x08004a47
 8004a14:	08004a47 	.word	0x08004a47
 8004a18:	08004a47 	.word	0x08004a47
 8004a1c:	08004a3f 	.word	0x08004a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7fd fc40 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 8004a24:	6178      	str	r0, [r7, #20]
        break;
 8004a26:	e013      	b.n	8004a50 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a28:	f7fd fc52 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 8004a2c:	6178      	str	r0, [r7, #20]
        break;
 8004a2e:	e00f      	b.n	8004a50 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a30:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <UART_SetConfig+0x414>)
 8004a32:	617b      	str	r3, [r7, #20]
        break;
 8004a34:	e00c      	b.n	8004a50 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a36:	f7fd fb9d 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8004a3a:	6178      	str	r0, [r7, #20]
        break;
 8004a3c:	e008      	b.n	8004a50 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a42:	617b      	str	r3, [r7, #20]
        break;
 8004a44:	e004      	b.n	8004a50 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	76bb      	strb	r3, [r7, #26]
        break;
 8004a4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d018      	beq.n	8004a88 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	085a      	lsrs	r2, r3, #1
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	441a      	add	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d908      	bls.n	8004a84 <UART_SetConfig+0x3f8>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d204      	bcs.n	8004a84 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	60da      	str	r2, [r3, #12]
 8004a82:	e001      	b.n	8004a88 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a94:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	00f42400 	.word	0x00f42400

08004aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01a      	beq.n	8004bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba2:	d10a      	bne.n	8004bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	605a      	str	r2, [r3, #4]
  }
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bf8:	f7fc f8e4 	bl	8000dc4 <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d10e      	bne.n	8004c2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f82d 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e023      	b.n	8004c72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d10e      	bne.n	8004c56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f817 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e00d      	b.n	8004c72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8a:	e05e      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d05a      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c94:	f7fc f896 	bl	8000dc4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d11b      	bne.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cb8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0201 	bic.w	r2, r2, #1
 8004cc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e043      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02c      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfe:	d124      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d08:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d18:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e00f      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4013      	ands	r3, r2
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d091      	beq.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d88:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d107      	bne.n	8004db2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0210 	bic.w	r2, r2, #16
 8004db0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff fc36 	bl	8004660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df4:	bf00      	nop
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e12:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff fc13 	bl	800464c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e42:	b084      	sub	sp, #16
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	f107 0014 	add.w	r0, r7, #20
 8004e50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	b004      	add	sp, #16
 8004e62:	4770      	bx	lr

08004e64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e6c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004e70:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	4013      	ands	r3, r2
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	f107 0014 	add.w	r0, r7, #20
 8004ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	b004      	add	sp, #16
 8004ef4:	4770      	bx	lr

08004ef6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <__libc_init_array>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	4d0d      	ldr	r5, [pc, #52]	; (8004f58 <__libc_init_array+0x38>)
 8004f24:	4c0d      	ldr	r4, [pc, #52]	; (8004f5c <__libc_init_array+0x3c>)
 8004f26:	1b64      	subs	r4, r4, r5
 8004f28:	10a4      	asrs	r4, r4, #2
 8004f2a:	2600      	movs	r6, #0
 8004f2c:	42a6      	cmp	r6, r4
 8004f2e:	d109      	bne.n	8004f44 <__libc_init_array+0x24>
 8004f30:	4d0b      	ldr	r5, [pc, #44]	; (8004f60 <__libc_init_array+0x40>)
 8004f32:	4c0c      	ldr	r4, [pc, #48]	; (8004f64 <__libc_init_array+0x44>)
 8004f34:	f000 f820 	bl	8004f78 <_init>
 8004f38:	1b64      	subs	r4, r4, r5
 8004f3a:	10a4      	asrs	r4, r4, #2
 8004f3c:	2600      	movs	r6, #0
 8004f3e:	42a6      	cmp	r6, r4
 8004f40:	d105      	bne.n	8004f4e <__libc_init_array+0x2e>
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f48:	4798      	blx	r3
 8004f4a:	3601      	adds	r6, #1
 8004f4c:	e7ee      	b.n	8004f2c <__libc_init_array+0xc>
 8004f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f52:	4798      	blx	r3
 8004f54:	3601      	adds	r6, #1
 8004f56:	e7f2      	b.n	8004f3e <__libc_init_array+0x1e>
 8004f58:	08004fe0 	.word	0x08004fe0
 8004f5c:	08004fe0 	.word	0x08004fe0
 8004f60:	08004fe0 	.word	0x08004fe0
 8004f64:	08004fe4 	.word	0x08004fe4

08004f68 <memset>:
 8004f68:	4402      	add	r2, r0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d100      	bne.n	8004f72 <memset+0xa>
 8004f70:	4770      	bx	lr
 8004f72:	f803 1b01 	strb.w	r1, [r3], #1
 8004f76:	e7f9      	b.n	8004f6c <memset+0x4>

08004f78 <_init>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr

08004f84 <_fini>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	bf00      	nop
 8004f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8a:	bc08      	pop	{r3}
 8004f8c:	469e      	mov	lr, r3
 8004f8e:	4770      	bx	lr
