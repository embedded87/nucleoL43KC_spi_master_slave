
SPI_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006348  08006348  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006350  08006350  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  20000070  080063c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  080063c8  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b915  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b8  00000000  00000000  0003b9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  0003f170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  00040640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c49  00000000  00000000  00041998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001844e  00000000  00000000  000655e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2159  00000000  00000000  0007da2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014fb88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e6c  00000000  00000000  0014fbdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006210 	.word	0x08006210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006210 	.word	0x08006210

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_GPIO_Init+0x74>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a16      	ldr	r2, [pc, #88]	; (80005dc <MX_GPIO_Init+0x74>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_GPIO_Init+0x74>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_GPIO_Init+0x74>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a10      	ldr	r2, [pc, #64]	; (80005dc <MX_GPIO_Init+0x74>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_GPIO_Init+0x74>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2108      	movs	r1, #8
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <MX_GPIO_Init+0x78>)
 80005b4:	f001 f866 	bl	8001684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Pin;
 80005b8:	2308      	movs	r3, #8
 80005ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	4619      	mov	r1, r3
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <MX_GPIO_Init+0x78>)
 80005d0:	f000 feee 	bl	80013b0 <HAL_GPIO_Init>

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	48000400 	.word	0x48000400

080005e4 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <__io_putchar+0x20>)
 80005f6:	f003 ff83 	bl	8004500 <HAL_UART_Transmit>
	return ch;
 80005fa:	687b      	ldr	r3, [r7, #4]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000360 	.word	0x20000360

08000608 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800060c:	f000 fccb 	bl	8000fa6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000610:	f000 f8ba 	bl	8000788 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000614:	f7ff ffa8 	bl	8000568 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000618:	f000 fbe2 	bl	8000de0 <MX_USART2_UART_Init>
	MX_USB_PCD_Init();
 800061c:	f000 fc52 	bl	8000ec4 <MX_USB_PCD_Init>
	MX_SPI1_Init();
 8000620:	f000 f958 	bl	80008d4 <MX_SPI1_Init>
	MX_TIM2_Init();
 8000624:	f000 fb66 	bl	8000cf4 <MX_TIM2_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000628:	f000 f932 	bl	8000890 <MX_NVIC_Init>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if ((app.uart.flags.process_usart) && (!app.uart.lock)) // check for if receive commands on serail
 800062c:	4b4d      	ldr	r3, [pc, #308]	; (8000764 <main+0x15c>)
 800062e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8000632:	2b00      	cmp	r3, #0
 8000634:	d01f      	beq.n	8000676 <main+0x6e>
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <main+0x15c>)
 8000638:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800063c:	2b00      	cmp	r3, #0
 800063e:	d11a      	bne.n	8000676 <main+0x6e>
				{
			app.uart.lock = true;
 8000640:	4b48      	ldr	r3, [pc, #288]	; (8000764 <main+0x15c>)
 8000642:	2201      	movs	r2, #1
 8000644:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
			app.uart.flags.process_usart = false;  // disable the process flag
 8000648:	4b46      	ldr	r3, [pc, #280]	; (8000764 <main+0x15c>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
			// store them as there might be new request in queue
			app.uart.cmd_fom_serial = app.uart.rec_buff[CMD_BYTE];
 8000650:	4b44      	ldr	r3, [pc, #272]	; (8000764 <main+0x15c>)
 8000652:	789a      	ldrb	r2, [r3, #2]
 8000654:	4b43      	ldr	r3, [pc, #268]	; (8000764 <main+0x15c>)
 8000656:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
			app.uart.sensor_form_serial = app.uart.rec_buff[SENSOR_BYTE];
 800065a:	4b42      	ldr	r3, [pc, #264]	; (8000764 <main+0x15c>)
 800065c:	78da      	ldrb	r2, [r3, #3]
 800065e:	4b41      	ldr	r3, [pc, #260]	; (8000764 <main+0x15c>)
 8000660:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
			app.uart.data = app.uart.rec_buff[DATA_BYTE];
 8000664:	4b3f      	ldr	r3, [pc, #252]	; (8000764 <main+0x15c>)
 8000666:	791a      	ldrb	r2, [r3, #4]
 8000668:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <main+0x15c>)
 800066a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			//  memset(app.uart.rec_buff,0,sizeof(app.uart.rec_buff));
			app.switch_state = UART_RX;
 800066e:	4b3d      	ldr	r3, [pc, #244]	; (8000764 <main+0x15c>)
 8000670:	2201      	movs	r2, #1
 8000672:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}

		switch (app.switch_state) {
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <main+0x15c>)
 8000678:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 800067c:	2b04      	cmp	r3, #4
 800067e:	d860      	bhi.n	8000742 <main+0x13a>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <main+0x80>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	08000743 	.word	0x08000743
 800068c:	0800069d 	.word	0x0800069d
 8000690:	08000743 	.word	0x08000743
 8000694:	0800072f 	.word	0x0800072f
 8000698:	080006cb 	.word	0x080006cb
		case REST:
			break;
		case UART_RX: // prepare for spi
			app.spi.tx_buff[CMD_BYTE] = app.uart.cmd_fom_serial;
 800069c:	4b31      	ldr	r3, [pc, #196]	; (8000764 <main+0x15c>)
 800069e:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 80006a2:	4b30      	ldr	r3, [pc, #192]	; (8000764 <main+0x15c>)
 80006a4:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
			app.spi.tx_buff[SENSOR_BYTE] = app.uart.sensor_form_serial;
 80006a8:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <main+0x15c>)
 80006aa:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
 80006ae:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <main+0x15c>)
 80006b0:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
			app.spi.tx_buff[DATA_BYTE] = app.uart.data;
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <main+0x15c>)
 80006b6:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <main+0x15c>)
 80006bc:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
			app.switch_state = SPI_TX;
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <main+0x15c>)
 80006c2:	2203      	movs	r2, #3
 80006c4:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			break;
 80006c8:	e03c      	b.n	8000744 <main+0x13c>
		case UART_TX:  // prepare for serial terminal
			break;
		case SPI_RX:   // prepare for inbound spi

			HAL_SPI_Receive_IT(&hspi1, (uint8_t*) &app.spi.rec_buff,
 80006ca:	2201      	movs	r2, #1
 80006cc:	4926      	ldr	r1, [pc, #152]	; (8000768 <main+0x160>)
 80006ce:	4827      	ldr	r0, [pc, #156]	; (800076c <main+0x164>)
 80006d0:	f002 fbe8 	bl	8002ea4 <HAL_SPI_Receive_IT>
					sizeof(frame));  // get spi in interrupt
			switch (app.spi.rec_buff[DATA_BYTE]) {
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <main+0x15c>)
 80006d6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d012      	beq.n	8000704 <main+0xfc>
 80006de:	2b02      	cmp	r3, #2
 80006e0:	dc18      	bgt.n	8000714 <main+0x10c>
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d002      	beq.n	80006ec <main+0xe4>
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d004      	beq.n	80006f4 <main+0xec>
 80006ea:	e013      	b.n	8000714 <main+0x10c>
			case OK:
				printf("OK/r/n");  // respond  status of led changed
 80006ec:	4820      	ldr	r0, [pc, #128]	; (8000770 <main+0x168>)
 80006ee:	f004 fe39 	bl	8005364 <iprintf>
				break;
 80006f2:	e013      	b.n	800071c <main+0x114>
			case VAL:
				printf("Status of Led is %d", app.spi.rec_buff[DATA_BYTE_2]); // send status of led
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <main+0x15c>)
 80006f6:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80006fa:	4619      	mov	r1, r3
 80006fc:	481d      	ldr	r0, [pc, #116]	; (8000774 <main+0x16c>)
 80006fe:	f004 fe31 	bl	8005364 <iprintf>
				break;
 8000702:	e00b      	b.n	800071c <main+0x114>
			case TEMPR:
				printf("Temperature is %d",
						(int) app.spi.rec_buff[DATA_BYTE_2]);
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <main+0x15c>)
 8000706:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
				printf("Temperature is %d",
 800070a:	4619      	mov	r1, r3
 800070c:	481a      	ldr	r0, [pc, #104]	; (8000778 <main+0x170>)
 800070e:	f004 fe29 	bl	8005364 <iprintf>
				break;
 8000712:	e003      	b.n	800071c <main+0x114>
			default:
				printf("SPI CMD ERROR");
 8000714:	4819      	ldr	r0, [pc, #100]	; (800077c <main+0x174>)
 8000716:	f004 fe25 	bl	8005364 <iprintf>
				break;
 800071a:	bf00      	nop
			}
			app.uart.lock = false;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <main+0x15c>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
			app.switch_state = REST;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <main+0x15c>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			break;
 800072c:	e00a      	b.n	8000744 <main+0x13c>
		case SPI_TX:   // prepare for outbound spi
			HAL_SPI_Transmit_IT(&hspi1, (uint8_t*) &app.spi.tx_buff,
 800072e:	2201      	movs	r2, #1
 8000730:	4913      	ldr	r1, [pc, #76]	; (8000780 <main+0x178>)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <main+0x164>)
 8000734:	f002 fb28 	bl	8002d88 <HAL_SPI_Transmit_IT>
					sizeof(frame));  // send data on SPI
			app.switch_state = SPI_RX;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <main+0x15c>)
 800073a:	2204      	movs	r2, #4
 800073c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			break;
 8000740:	e000      	b.n	8000744 <main+0x13c>
		default:
			break;
 8000742:	bf00      	nop

		}

		if (!app.led_timer) {
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <main+0x15c>)
 8000746:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 800074a:	2b00      	cmp	r3, #0
 800074c:	f47f af6e 	bne.w	800062c <main+0x24>
			app.led_timer = 600;
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <main+0x15c>)
 8000752:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000756:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
			GREEN_LED_TOGGLE
 800075a:	2108      	movs	r1, #8
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <main+0x17c>)
 800075e:	f000 ffa9 	bl	80016b4 <HAL_GPIO_TogglePin>
		if ((app.uart.flags.process_usart) && (!app.uart.lock)) // check for if receive commands on serail
 8000762:	e763      	b.n	800062c <main+0x24>
 8000764:	2000008c 	.word	0x2000008c
 8000768:	20000194 	.word	0x20000194
 800076c:	200002b0 	.word	0x200002b0
 8000770:	08006228 	.word	0x08006228
 8000774:	08006230 	.word	0x08006230
 8000778:	08006244 	.word	0x08006244
 800077c:	08006258 	.word	0x08006258
 8000780:	20000214 	.word	0x20000214
 8000784:	48000400 	.word	0x48000400

08000788 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b0ac      	sub	sp, #176	; 0xb0
 800078c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800078e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000792:	2244      	movs	r2, #68	; 0x44
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 fddc 	bl	8005354 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800079c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2254      	movs	r2, #84	; 0x54
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 fdce 	bl	8005354 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007b8:	2310      	movs	r3, #16
 80007ba:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007c8:	2360      	movs	r3, #96	; 0x60
 80007ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007d4:	2301      	movs	r3, #1
 80007d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 40;
 80007e0:	2328      	movs	r3, #40	; 0x28
 80007e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e6:	2307      	movs	r3, #7
 80007e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 f913 	bl	8001a28 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x84>
		Error_Handler();
 8000808:	f000 f85e 	bl	80008c8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	65bb      	str	r3, [r7, #88]	; 0x58
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2303      	movs	r3, #3
 8000812:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000820:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000824:	2104      	movs	r1, #4
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fd1e 	bl	8002268 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xae>
		Error_Handler();
 8000832:	f000 f849 	bl	80008c8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8000836:	f242 0302 	movw	r3, #8194	; 0x2002
 800083a:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USB;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000840:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000844:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000846:	2301      	movs	r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800084e:	2318      	movs	r3, #24
 8000850:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000852:	2307      	movs	r3, #7
 8000854:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800085e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000862:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4618      	mov	r0, r3
 8000868:	f001 ff04 	bl	8002674 <HAL_RCCEx_PeriphCLKConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xee>
		Error_Handler();
 8000872:	f000 f829 	bl	80008c8 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000876:	f44f 7000 	mov.w	r0, #512	; 0x200
 800087a:	f001 f87f 	bl	800197c <HAL_PWREx_ControlVoltageScaling>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x100>
			!= HAL_OK) {
		Error_Handler();
 8000884:	f000 f820 	bl	80008c8 <Error_Handler>
	}
}
 8000888:	bf00      	nop
 800088a:	37b0      	adds	r7, #176	; 0xb0
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	201c      	movs	r0, #28
 800089a:	f000 fcd4 	bl	8001246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800089e:	201c      	movs	r0, #28
 80008a0:	f000 fced 	bl	800127e <HAL_NVIC_EnableIRQ>
	/* SPI1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2023      	movs	r0, #35	; 0x23
 80008aa:	f000 fccc 	bl	8001246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008ae:	2023      	movs	r0, #35	; 0x23
 80008b0:	f000 fce5 	bl	800127e <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2026      	movs	r0, #38	; 0x26
 80008ba:	f000 fcc4 	bl	8001246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008be:	2026      	movs	r0, #38	; 0x26
 80008c0:	f000 fcdd 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_SPI1_Init+0x6c>)
 80008da:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <MX_SPI1_Init+0x70>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI1_Init+0x6c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI1_Init+0x6c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_SPI1_Init+0x6c>)
 80008ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SPI1_Init+0x6c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI1_Init+0x6c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_SPI1_Init+0x6c>)
 8000900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000904:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI1_Init+0x6c>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI1_Init+0x6c>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SPI1_Init+0x6c>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI1_Init+0x6c>)
 800091a:	2207      	movs	r2, #7
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SPI1_Init+0x6c>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI1_Init+0x6c>)
 8000926:	2200      	movs	r2, #0
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_SPI1_Init+0x6c>)
 800092c:	f002 f988 	bl	8002c40 <HAL_SPI_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000936:	f7ff ffc7 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200002b0 	.word	0x200002b0
 8000944:	40013000 	.word	0x40013000

08000948 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_SPI_MspInit+0x7c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d128      	bne.n	80009bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <HAL_SPI_MspInit+0x80>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <HAL_SPI_MspInit+0x80>)
 8000970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000974:	6613      	str	r3, [r2, #96]	; 0x60
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_SPI_MspInit+0x80>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_SPI_MspInit+0x80>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <HAL_SPI_MspInit+0x80>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_SPI_MspInit+0x80>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800099a:	23c2      	movs	r3, #194	; 0xc2
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009aa:	2305      	movs	r3, #5
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f000 fcfa 	bl	80013b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	; 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40013000 	.word	0x40013000
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_MspInit+0x44>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6613      	str	r3, [r2, #96]	; 0x60
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_MspInit+0x44>)
 80009e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x44>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6593      	str	r3, [r2, #88]	; 0x58
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x44>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  Millisecond timer call back
 * @param  Timer Handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	if (app.uart.rx_timer) {
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a1e:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d016      	beq.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x42>
		app.uart.rx_timer--;
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a2a:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	3b01      	subs	r3, #1
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a36:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
		if (!app.uart.rx_timer) {
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a3c:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d107      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x42>
			app.uart.flags.process_usart = true; // 100ms timeout on serial processing
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
			app.uart.rec_index = 0;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		}
	}

	if (app.lock_timer) {
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a58:	f8b3 3213 	ldrh.w	r3, [r3, #531]	; 0x213
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d012      	beq.n	8000a88 <HAL_TIM_PeriodElapsedCallback+0x74>
		app.lock_timer--;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a64:	f8b3 3213 	ldrh.w	r3, [r3, #531]	; 0x213
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a70:	f8a3 2213 	strh.w	r2, [r3, #531]	; 0x213
		if (!app.lock_timer)
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a76:	f8b3 3213 	ldrh.w	r3, [r3, #531]	; 0x213
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d103      	bne.n	8000a88 <HAL_TIM_PeriodElapsedCallback+0x74>
			app.uart.lock = false;   // 100 miliseacond timeout on lock on usart
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	}

	if (app.led_timer)
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a8a:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d008      	beq.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x92>
		app.led_timer--;         // heart beat timer
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a96:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000aa2:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	2000008c 	.word	0x2000008c

08000ab8 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000b04:	f000 faa4 	bl	8001050 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <TIM2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <TIM2_IRQHandler+0x10>)
 8000b12:	f003 f917 	bl	8003d44 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000314 	.word	0x20000314

08000b20 <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_IRQn 0 */

	/* USER CODE END SPI1_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi1);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <SPI1_IRQHandler+0x10>)
 8000b26:	f002 fb1d 	bl	8003164 <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI1_IRQn 1 */

	/* USER CODE END SPI1_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200002b0 	.word	0x200002b0

08000b34 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <USART2_IRQHandler+0x10>)
 8000b3a:	f003 fd75 	bl	8004628 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000360 	.word	0x20000360

08000b48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e00a      	b.n	8000b70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b5a:	f3af 8000 	nop.w
 8000b5e:	4601      	mov	r1, r0
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	60ba      	str	r2, [r7, #8]
 8000b66:	b2ca      	uxtb	r2, r1
 8000b68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbf0      	blt.n	8000b5a <_read+0x12>
	}

return len;
 8000b78:	687b      	ldr	r3, [r7, #4]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e009      	b.n	8000ba8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fd21 	bl	80005e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf1      	blt.n	8000b94 <_write+0x12>
	}
	return len;
 8000bb0:	687b      	ldr	r3, [r7, #4]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_close>:

int _close(int file)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	return -1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be2:	605a      	str	r2, [r3, #4]
	return 0;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <_isatty>:

int _isatty(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
	return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f004 fb54 	bl	8005300 <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20010000 	.word	0x20010000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	200002a4 	.word	0x200002a4
 8000c8c:	200006f0 	.word	0x200006f0

08000c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <SystemInit+0x5c>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a14      	ldr	r2, [pc, #80]	; (8000cec <SystemInit+0x5c>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <SystemInit+0x60>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a11      	ldr	r2, [pc, #68]	; (8000cf0 <SystemInit+0x60>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <SystemInit+0x60>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <SystemInit+0x60>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <SystemInit+0x60>)
 8000cbc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cc0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cc4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <SystemInit+0x60>)
 8000cc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ccc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <SystemInit+0x60>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <SystemInit+0x60>)
 8000cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SystemInit+0x60>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <MX_TIM2_Init+0xac>)
 8000d14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_TIM2_Init+0xac>)
 8000d1c:	224f      	movs	r2, #79	; 0x4f
 8000d1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_TIM2_Init+0xac>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_TIM2_Init+0xac>)
 8000d28:	f240 321f 	movw	r2, #799	; 0x31f
 8000d2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_TIM2_Init+0xac>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_TIM2_Init+0xac>)
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d3a:	4819      	ldr	r0, [pc, #100]	; (8000da0 <MX_TIM2_Init+0xac>)
 8000d3c:	f002 ff57 	bl	8003bee <HAL_TIM_Base_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d46:	f7ff fdbf 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	4812      	ldr	r0, [pc, #72]	; (8000da0 <MX_TIM2_Init+0xac>)
 8000d58:	f003 f913 	bl	8003f82 <HAL_TIM_ConfigClockSource>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d62:	f7ff fdb1 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	480b      	ldr	r0, [pc, #44]	; (8000da0 <MX_TIM2_Init+0xac>)
 8000d74:	f003 faf2 	bl	800435c <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d7e:	f7ff fda3 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_TIM_Base_MspInit(&htim2);
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <MX_TIM2_Init+0xac>)
 8000d84:	f000 f80e 	bl	8000da4 <HAL_TIM_Base_MspInit>
	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_TIM2_Init+0xac>)
 8000d8a:	f002 ff87 	bl	8003c9c <HAL_TIM_Base_Start_IT>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0xa4>
		/* Starting Error */
		Error_Handler();
 8000d94:	f7ff fd98 	bl	80008c8 <Error_Handler>
	}
  /* USER CODE END TIM2_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3720      	adds	r7, #32
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000314 	.word	0x20000314

08000da4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db4:	d10b      	bne.n	8000dce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_TIM_Base_MspInit+0x38>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_TIM_Base_MspInit+0x38>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_TIM_Base_MspInit+0x38>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000

08000de0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_USART2_UART_Init+0x58>)
 8000de6:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <MX_USART2_UART_Init+0x5c>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_USART2_UART_Init+0x58>)
 8000dec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_USART2_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_USART2_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_USART2_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_USART2_UART_Init+0x58>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_USART2_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_USART2_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_USART2_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_USART2_UART_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_USART2_UART_Init+0x58>)
 8000e24:	f003 fb1e 	bl	8004464 <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e2e:	f7ff fd4b 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000360 	.word	0x20000360
 8000e3c:	40004400 	.word	0x40004400

08000e40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0x7c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d128      	bne.n	8000eb4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e92:	230c      	movs	r3, #12
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f000 fa7e 	bl	80013b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_USB_PCD_Init+0x48>)
 8000eca:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <MX_USB_PCD_Init+0x4c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_USB_PCD_Init+0x48>)
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <MX_USB_PCD_Init+0x48>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_USB_PCD_Init+0x48>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <MX_USB_PCD_Init+0x48>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_USB_PCD_Init+0x48>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <MX_USB_PCD_Init+0x48>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_USB_PCD_Init+0x48>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_USB_PCD_Init+0x48>)
 8000efa:	f000 fbf5 	bl	80016e8 <HAL_PCD_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000f04:	f7ff fce0 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200003e4 	.word	0x200003e4
 8000f10:	40006800 	.word	0x40006800

08000f14 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_PCD_MspInit+0x38>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10b      	bne.n	8000f3e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_PCD_MspInit+0x3c>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_PCD_MspInit+0x3c>)
 8000f2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f30:	6593      	str	r3, [r2, #88]	; 0x58
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_PCD_MspInit+0x3c>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40006800 	.word	0x40006800
 8000f50:	40021000 	.word	0x40021000

08000f54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f58:	f7ff fe9a 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f5e:	e003      	b.n	8000f68 <LoopCopyDataInit>

08000f60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f66:	3104      	adds	r1, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f70:	d3f6      	bcc.n	8000f60 <CopyDataInit>
	ldr	r2, =_sbss
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f74:	e002      	b.n	8000f7c <LoopFillZerobss>

08000f76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f78:	f842 3b04 	str.w	r3, [r2], #4

08000f7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <LoopForever+0x16>)
	cmp	r2, r3
 8000f7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f80:	d3f9      	bcc.n	8000f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f82:	f004 f9c3 	bl	800530c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f86:	f7ff fb3f 	bl	8000608 <main>

08000f8a <LoopForever>:

LoopForever:
    b LoopForever
 8000f8a:	e7fe      	b.n	8000f8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f8c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000f90:	08006358 	.word	0x08006358
	ldr	r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f98:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000f9c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000fa0:	200006ec 	.word	0x200006ec

08000fa4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC1_IRQHandler>

08000fa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f93d 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f80e 	bl	8000fd8 <HAL_InitTick>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	e001      	b.n	8000fcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc8:	f7ff fd00 	bl	80009cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_InitTick+0x6c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d023      	beq.n	8001034 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_InitTick+0x70>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_InitTick+0x6c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f949 	bl	800129a <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10f      	bne.n	800102e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d809      	bhi.n	8001028 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f913 	bl	8001246 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_InitTick+0x74>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e007      	b.n	8001038 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e004      	b.n	8001038 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	e001      	b.n	8001038 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	20000000 	.word	0x20000000
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	200006d8 	.word	0x200006d8

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200006d8 	.word	0x200006d8

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <__NVIC_EnableIRQ+0x38>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff29 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff3e 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff8e 	bl	8001184 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5d 	bl	8001130 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff31 	bl	80010f4 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa2 	bl	80011ec <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d008      	beq.n	80012dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e022      	b.n	8001322 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 020e 	bic.w	r2, r2, #14
 80012ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0201 	bic.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	f003 021c 	and.w	r2, r3, #28
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	2101      	movs	r1, #1
 800130a:	fa01 f202 	lsl.w	r2, r1, r2
 800130e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d005      	beq.n	8001352 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2204      	movs	r2, #4
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e029      	b.n	80013a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 020e 	bic.w	r2, r2, #14
 8001360:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0201 	bic.w	r2, r2, #1
 8001370:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f003 021c 	and.w	r2, r3, #28
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	2101      	movs	r1, #1
 8001380:	fa01 f202 	lsl.w	r2, r1, r2
 8001384:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	4798      	blx	r3
    }
  }
  return status;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013be:	e148      	b.n	8001652 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	4013      	ands	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 813a 	beq.w	800164c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d00b      	beq.n	80013f8 <HAL_GPIO_Init+0x48>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d007      	beq.n	80013f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ec:	2b11      	cmp	r3, #17
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b12      	cmp	r3, #18
 80013f6:	d130      	bne.n	800145a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142e:	2201      	movs	r2, #1
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	f003 0201 	and.w	r2, r3, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0xea>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b12      	cmp	r3, #18
 8001498:	d123      	bne.n	80014e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	08da      	lsrs	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3208      	adds	r2, #8
 80014dc:	6939      	ldr	r1, [r7, #16]
 80014de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0203 	and.w	r2, r3, #3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8094 	beq.w	800164c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001524:	4b52      	ldr	r3, [pc, #328]	; (8001670 <HAL_GPIO_Init+0x2c0>)
 8001526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001528:	4a51      	ldr	r2, [pc, #324]	; (8001670 <HAL_GPIO_Init+0x2c0>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6613      	str	r3, [r2, #96]	; 0x60
 8001530:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <HAL_GPIO_Init+0x2c0>)
 8001532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800153c:	4a4d      	ldr	r2, [pc, #308]	; (8001674 <HAL_GPIO_Init+0x2c4>)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001566:	d00d      	beq.n	8001584 <HAL_GPIO_Init+0x1d4>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a43      	ldr	r2, [pc, #268]	; (8001678 <HAL_GPIO_Init+0x2c8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d007      	beq.n	8001580 <HAL_GPIO_Init+0x1d0>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a42      	ldr	r2, [pc, #264]	; (800167c <HAL_GPIO_Init+0x2cc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d101      	bne.n	800157c <HAL_GPIO_Init+0x1cc>
 8001578:	2302      	movs	r3, #2
 800157a:	e004      	b.n	8001586 <HAL_GPIO_Init+0x1d6>
 800157c:	2307      	movs	r3, #7
 800157e:	e002      	b.n	8001586 <HAL_GPIO_Init+0x1d6>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_GPIO_Init+0x1d6>
 8001584:	2300      	movs	r3, #0
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	f002 0203 	and.w	r2, r2, #3
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	4093      	lsls	r3, r2
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001596:	4937      	ldr	r1, [pc, #220]	; (8001674 <HAL_GPIO_Init+0x2c4>)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015c8:	4a2d      	ldr	r2, [pc, #180]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015f2:	4a23      	ldr	r2, [pc, #140]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800161c:	4a18      	ldr	r2, [pc, #96]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001646:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	f47f aeaf 	bne.w	80013c0 <HAL_GPIO_Init+0x10>
  }
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	40021000 	.word	0x40021000
 8001674:	40010000 	.word	0x40010000
 8001678:	48000400 	.word	0x48000400
 800167c:	48000800 	.word	0x48000800
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001694:	787b      	ldrb	r3, [r7, #1]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	041a      	lsls	r2, r3, #16
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43d9      	mvns	r1, r3
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	400b      	ands	r3, r1
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b08b      	sub	sp, #44	; 0x2c
 80016ec:	af06      	add	r7, sp, #24
 80016ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e104      	b.n	8001904 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d106      	bne.n	8001714 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fc00 	bl	8000f14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2203      	movs	r2, #3
 8001718:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f003 fd8f 	bl	8005244 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	687e      	ldr	r6, [r7, #4]
 800172e:	466d      	mov	r5, sp
 8001730:	f106 0410 	add.w	r4, r6, #16
 8001734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	602b      	str	r3, [r5, #0]
 800173c:	1d33      	adds	r3, r6, #4
 800173e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f003 fd6e 	bl	8005222 <USB_CoreInit>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2202      	movs	r2, #2
 8001750:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0d5      	b.n	8001904 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fd8b 	bl	800527a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	e04c      	b.n	8001804 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	3301      	adds	r3, #1
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	7bfa      	ldrb	r2, [r7, #15]
 8001792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	b298      	uxth	r0, r3
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3336      	adds	r3, #54	; 0x36
 80017a8:	4602      	mov	r2, r0
 80017aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	3303      	adds	r3, #3
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	3338      	adds	r3, #56	; 0x38
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	333c      	adds	r3, #60	; 0x3c
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	3340      	adds	r3, #64	; 0x40
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	3301      	adds	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	d3ad      	bcc.n	800176a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	e044      	b.n	800189e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	3301      	adds	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3b5      	bcc.n	8001814 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	687e      	ldr	r6, [r7, #4]
 80018b0:	466d      	mov	r5, sp
 80018b2:	f106 0410 	add.w	r4, r6, #16
 80018b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	602b      	str	r3, [r5, #0]
 80018be:	1d33      	adds	r3, r6, #4
 80018c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c2:	6838      	ldr	r0, [r7, #0]
 80018c4:	f003 fce6 	bl	8005294 <USB_DevInit>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2202      	movs	r2, #2
 80018d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e014      	b.n	8001904 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d102      	bne.n	80018f8 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f80a 	bl	800190c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 fcea 	bl	80052d6 <USB_DevDisconnect>

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800190c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001930:	b29b      	uxth	r3, r3
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001944:	b29b      	uxth	r3, r3
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	b29a      	uxth	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_PWREx_GetVoltageRange+0x18>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40007000 	.word	0x40007000

0800197c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800198a:	d130      	bne.n	80019ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800198c:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001998:	d038      	beq.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019a2:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2232      	movs	r2, #50	; 0x32
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0c9b      	lsrs	r3, r3, #18
 80019bc:	3301      	adds	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c0:	e002      	b.n	80019c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d4:	d102      	bne.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f2      	bne.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e8:	d110      	bne.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e00f      	b.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fa:	d007      	beq.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a04:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	20000000 	.word	0x20000000
 8001a24:	431bde83 	.word	0x431bde83

08001a28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f000 bc11 	b.w	800225e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a3c:	4ba0      	ldr	r3, [pc, #640]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a46:	4b9e      	ldr	r3, [pc, #632]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80e4 	beq.w	8001c26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4c>
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	f040 808b 	bne.w	8001b82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	f040 8087 	bne.w	8001b82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a74:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_OscConfig+0x64>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e3e8      	b.n	800225e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1a      	ldr	r2, [r3, #32]
 8001a90:	4b8b      	ldr	r3, [pc, #556]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x7e>
 8001a9c:	4b88      	ldr	r3, [pc, #544]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa4:	e005      	b.n	8001ab2 <HAL_RCC_OscConfig+0x8a>
 8001aa6:	4b86      	ldr	r3, [pc, #536]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d223      	bcs.n	8001afe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fd7a 	bl	80025b4 <RCC_SetFlashLatencyFromMSIRange>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e3c9      	b.n	800225e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aca:	4b7d      	ldr	r3, [pc, #500]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a7c      	ldr	r2, [pc, #496]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b7a      	ldr	r3, [pc, #488]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4977      	ldr	r1, [pc, #476]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ae8:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	4972      	ldr	r1, [pc, #456]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
 8001afc:	e025      	b.n	8001b4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001afe:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a6f      	ldr	r2, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b6d      	ldr	r3, [pc, #436]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	496a      	ldr	r1, [pc, #424]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b1c:	4b68      	ldr	r3, [pc, #416]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	4965      	ldr	r1, [pc, #404]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fd3a 	bl	80025b4 <RCC_SetFlashLatencyFromMSIRange>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e389      	b.n	800225e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b4a:	f000 fc6f 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	4b5b      	ldr	r3, [pc, #364]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	495a      	ldr	r1, [pc, #360]	; (8001cc4 <HAL_RCC_OscConfig+0x29c>)
 8001b5c:	5ccb      	ldrb	r3, [r1, r3]
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	4a58      	ldr	r2, [pc, #352]	; (8001cc8 <HAL_RCC_OscConfig+0x2a0>)
 8001b68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b6a:	4b58      	ldr	r3, [pc, #352]	; (8001ccc <HAL_RCC_OscConfig+0x2a4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fa32 	bl	8000fd8 <HAL_InitTick>
 8001b74:	4603      	mov	r3, r0
 8001b76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d052      	beq.n	8001c24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	e36d      	b.n	800225e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d032      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b8a:	4b4d      	ldr	r3, [pc, #308]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a4c      	ldr	r2, [pc, #304]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fa6f 	bl	8001078 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fa6b 	bl	8001078 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e356      	b.n	800225e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bb0:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bbc:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a3f      	ldr	r2, [pc, #252]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001bc2:	f043 0308 	orr.w	r3, r3, #8
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	493a      	ldr	r1, [pc, #232]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	4935      	ldr	r1, [pc, #212]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	604b      	str	r3, [r1, #4]
 8001bee:	e01a      	b.n	8001c26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bf0:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a32      	ldr	r2, [pc, #200]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fa3c 	bl	8001078 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c04:	f7ff fa38 	bl	8001078 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e323      	b.n	800225e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x1dc>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d073      	beq.n	8001d1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_OscConfig+0x21c>
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2b0c      	cmp	r3, #12
 8001c3c:	d10e      	bne.n	8001c5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d10b      	bne.n	8001c5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d063      	beq.n	8001d18 <HAL_RCC_OscConfig+0x2f0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d15f      	bne.n	8001d18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e300      	b.n	800225e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d106      	bne.n	8001c74 <HAL_RCC_OscConfig+0x24c>
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e01d      	b.n	8001cb0 <HAL_RCC_OscConfig+0x288>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x270>
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a0c      	ldr	r2, [pc, #48]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x288>
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <HAL_RCC_OscConfig+0x298>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01b      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f9de 	bl	8001078 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbe:	e010      	b.n	8001ce2 <HAL_RCC_OscConfig+0x2ba>
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08006268 	.word	0x08006268
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f9d2 	bl	8001078 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e2bd      	b.n	800225e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce2:	4baf      	ldr	r3, [pc, #700]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x2a8>
 8001cee:	e014      	b.n	8001d1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f9c2 	bl	8001078 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff f9be 	bl	8001078 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e2a9      	b.n	800225e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d0a:	4ba5      	ldr	r3, [pc, #660]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x2d0>
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d060      	beq.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_OscConfig+0x310>
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d119      	bne.n	8001d66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d116      	bne.n	8001d66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d38:	4b99      	ldr	r3, [pc, #612]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_OscConfig+0x328>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e286      	b.n	800225e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	4b93      	ldr	r3, [pc, #588]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	061b      	lsls	r3, r3, #24
 8001d5e:	4990      	ldr	r1, [pc, #576]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d64:	e040      	b.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d023      	beq.n	8001db6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6e:	4b8c      	ldr	r3, [pc, #560]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a8b      	ldr	r2, [pc, #556]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7ff f97d 	bl	8001078 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d82:	f7ff f979 	bl	8001078 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e264      	b.n	800225e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d94:	4b82      	ldr	r3, [pc, #520]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b7f      	ldr	r3, [pc, #508]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	497c      	ldr	r1, [pc, #496]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
 8001db4:	e018      	b.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b7a      	ldr	r3, [pc, #488]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a79      	ldr	r2, [pc, #484]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7ff f959 	bl	8001078 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dca:	f7ff f955 	bl	8001078 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e240      	b.n	800225e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ddc:	4b70      	ldr	r3, [pc, #448]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d03c      	beq.n	8001e6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01c      	beq.n	8001e36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfc:	4b68      	ldr	r3, [pc, #416]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e02:	4a67      	ldr	r2, [pc, #412]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7ff f934 	bl	8001078 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e14:	f7ff f930 	bl	8001078 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e21b      	b.n	800225e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e26:	4b5e      	ldr	r3, [pc, #376]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ef      	beq.n	8001e14 <HAL_RCC_OscConfig+0x3ec>
 8001e34:	e01b      	b.n	8001e6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e36:	4b5a      	ldr	r3, [pc, #360]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3c:	4a58      	ldr	r2, [pc, #352]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7ff f917 	bl	8001078 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4e:	f7ff f913 	bl	8001078 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e1fe      	b.n	800225e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e60:	4b4f      	ldr	r3, [pc, #316]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ef      	bne.n	8001e4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80a6 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e80:	4b47      	ldr	r3, [pc, #284]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10d      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	4b44      	ldr	r3, [pc, #272]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	4a43      	ldr	r2, [pc, #268]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e96:	6593      	str	r3, [r2, #88]	; 0x58
 8001e98:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea8:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <HAL_RCC_OscConfig+0x57c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d118      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb4:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <HAL_RCC_OscConfig+0x57c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a3a      	ldr	r2, [pc, #232]	; (8001fa4 <HAL_RCC_OscConfig+0x57c>)
 8001eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec0:	f7ff f8da 	bl	8001078 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec8:	f7ff f8d6 	bl	8001078 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1c1      	b.n	800225e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eda:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <HAL_RCC_OscConfig+0x57c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d108      	bne.n	8001f00 <HAL_RCC_OscConfig+0x4d8>
 8001eee:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef4:	4a2a      	ldr	r2, [pc, #168]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001efe:	e024      	b.n	8001f4a <HAL_RCC_OscConfig+0x522>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d110      	bne.n	8001f2a <HAL_RCC_OscConfig+0x502>
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0e:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f18:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	4a20      	ldr	r2, [pc, #128]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f28:	e00f      	b.n	8001f4a <HAL_RCC_OscConfig+0x522>
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f30:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f42:	f023 0304 	bic.w	r3, r3, #4
 8001f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d016      	beq.n	8001f80 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f52:	f7ff f891 	bl	8001078 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7ff f88d 	bl	8001078 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e176      	b.n	800225e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ed      	beq.n	8001f5a <HAL_RCC_OscConfig+0x532>
 8001f7e:	e01a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7ff f87a 	bl	8001078 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f86:	e00f      	b.n	8001fa8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7ff f876 	bl	8001078 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d906      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e15f      	b.n	800225e <HAL_RCC_OscConfig+0x836>
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa8:	4baa      	ldr	r3, [pc, #680]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1e8      	bne.n	8001f88 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb6:	7ffb      	ldrb	r3, [r7, #31]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbc:	4ba5      	ldr	r3, [pc, #660]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	4aa4      	ldr	r2, [pc, #656]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8001fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d03c      	beq.n	800204e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01c      	beq.n	8002016 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fdc:	4b9d      	ldr	r3, [pc, #628]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8001fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fe2:	4a9c      	ldr	r2, [pc, #624]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7ff f844 	bl	8001078 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ff4:	f7ff f840 	bl	8001078 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e12b      	b.n	800225e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002006:	4b93      	ldr	r3, [pc, #588]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8002008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ef      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x5cc>
 8002014:	e01b      	b.n	800204e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002016:	4b8f      	ldr	r3, [pc, #572]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8002018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800201c:	4a8d      	ldr	r2, [pc, #564]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7ff f827 	bl	8001078 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800202e:	f7ff f823 	bl	8001078 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e10e      	b.n	800225e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002040:	4b84      	ldr	r3, [pc, #528]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8002042:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ef      	bne.n	800202e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8102 	beq.w	800225c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	2b02      	cmp	r3, #2
 800205e:	f040 80c5 	bne.w	80021ec <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002062:	4b7c      	ldr	r3, [pc, #496]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 0203 	and.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	429a      	cmp	r2, r3
 8002074:	d12c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	3b01      	subs	r3, #1
 8002082:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d123      	bne.n	80020d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002092:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d11b      	bne.n	80020d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d113      	bne.n	80020d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	085b      	lsrs	r3, r3, #1
 80020b4:	3b01      	subs	r3, #1
 80020b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d109      	bne.n	80020d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d067      	beq.n	80021a0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	d062      	beq.n	800219c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020d6:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0bb      	b.n	800225e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020e6:	4b5b      	ldr	r3, [pc, #364]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a5a      	ldr	r2, [pc, #360]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 80020ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020f2:	f7fe ffc1 	bl	8001078 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fa:	f7fe ffbd 	bl	8001078 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0a8      	b.n	800225e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210c:	4b51      	ldr	r3, [pc, #324]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f0      	bne.n	80020fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002118:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	4b4e      	ldr	r3, [pc, #312]	; (8002258 <HAL_RCC_OscConfig+0x830>)
 800211e:	4013      	ands	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002128:	3a01      	subs	r2, #1
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	4311      	orrs	r1, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002132:	0212      	lsls	r2, r2, #8
 8002134:	4311      	orrs	r1, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800213a:	0852      	lsrs	r2, r2, #1
 800213c:	3a01      	subs	r2, #1
 800213e:	0552      	lsls	r2, r2, #21
 8002140:	4311      	orrs	r1, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002146:	0852      	lsrs	r2, r2, #1
 8002148:	3a01      	subs	r2, #1
 800214a:	0652      	lsls	r2, r2, #25
 800214c:	4311      	orrs	r1, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002152:	06d2      	lsls	r2, r2, #27
 8002154:	430a      	orrs	r2, r1
 8002156:	493f      	ldr	r1, [pc, #252]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8002158:	4313      	orrs	r3, r2
 800215a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800215c:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3c      	ldr	r2, [pc, #240]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8002162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002166:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002168:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4a39      	ldr	r2, [pc, #228]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 800216e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002172:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002174:	f7fe ff80 	bl	8001078 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217c:	f7fe ff7c 	bl	8001078 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e067      	b.n	800225e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800218e:	4b31      	ldr	r3, [pc, #196]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800219a:	e05f      	b.n	800225c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e05e      	b.n	800225e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a0:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d157      	bne.n	800225c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021ac:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a28      	ldr	r2, [pc, #160]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 80021b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b8:	4b26      	ldr	r3, [pc, #152]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a25      	ldr	r2, [pc, #148]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 80021be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021c4:	f7fe ff58 	bl	8001078 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021cc:	f7fe ff54 	bl	8001078 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e03f      	b.n	800225e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x7a4>
 80021ea:	e037      	b.n	800225c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d02d      	beq.n	800224e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 80021f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d105      	bne.n	8002216 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800220a:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	4a11      	ldr	r2, [pc, #68]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8002210:	f023 0303 	bic.w	r3, r3, #3
 8002214:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 800221c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002224:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7fe ff27 	bl	8001078 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7fe ff23 	bl	8001078 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e00e      	b.n	800225e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <HAL_RCC_OscConfig+0x82c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x806>
 800224c:	e006      	b.n	800225c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e005      	b.n	800225e <HAL_RCC_OscConfig+0x836>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop

08002268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0c8      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800227c:	4b66      	ldr	r3, [pc, #408]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d910      	bls.n	80022ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b63      	ldr	r3, [pc, #396]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0207 	bic.w	r2, r3, #7
 8002292:	4961      	ldr	r1, [pc, #388]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b5f      	ldr	r3, [pc, #380]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0b0      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d04c      	beq.n	8002352 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c0:	4b56      	ldr	r3, [pc, #344]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d121      	bne.n	8002310 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e09e      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d115      	bne.n	8002310 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e092      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f0:	4b4a      	ldr	r3, [pc, #296]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e086      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002300:	4b46      	ldr	r3, [pc, #280]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e07e      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002310:	4b42      	ldr	r3, [pc, #264]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 0203 	bic.w	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	493f      	ldr	r1, [pc, #252]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002322:	f7fe fea9 	bl	8001078 <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002328:	e00a      	b.n	8002340 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232a:	f7fe fea5 	bl	8001078 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e066      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002340:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 020c 	and.w	r2, r3, #12
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	429a      	cmp	r2, r3
 8002350:	d1eb      	bne.n	800232a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800235e:	4b2f      	ldr	r3, [pc, #188]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	492c      	ldr	r1, [pc, #176]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002370:	4b29      	ldr	r3, [pc, #164]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d210      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b26      	ldr	r3, [pc, #152]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4924      	ldr	r1, [pc, #144]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b22      	ldr	r3, [pc, #136]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e036      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4918      	ldr	r1, [pc, #96]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4910      	ldr	r1, [pc, #64]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023de:	f000 f825 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023e2:	4602      	mov	r2, r0
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	490c      	ldr	r1, [pc, #48]	; (8002420 <HAL_RCC_ClockConfig+0x1b8>)
 80023f0:	5ccb      	ldrb	r3, [r1, r3]
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fde8 	bl	8000fd8 <HAL_InitTick>
 8002408:	4603      	mov	r3, r0
 800240a:	72fb      	strb	r3, [r7, #11]

  return status;
 800240c:	7afb      	ldrb	r3, [r7, #11]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
 8002420:	08006268 	.word	0x08006268
 8002424:	20000000 	.word	0x20000000
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243a:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002444:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x34>
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d121      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d11e      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002460:	4b34      	ldr	r3, [pc, #208]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800246c:	4b31      	ldr	r3, [pc, #196]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e005      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800247c:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002488:	4a2b      	ldr	r2, [pc, #172]	; (8002538 <HAL_RCC_GetSysClockFreq+0x10c>)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d102      	bne.n	80024aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <HAL_RCC_GetSysClockFreq+0x110>)
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e004      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b0:	4b23      	ldr	r3, [pc, #140]	; (8002540 <HAL_RCC_GetSysClockFreq+0x114>)
 80024b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d134      	bne.n	8002524 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d003      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d003      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0xac>
 80024d0:	e005      	b.n	80024de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024d2:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_RCC_GetSysClockFreq+0x110>)
 80024d4:	617b      	str	r3, [r7, #20]
      break;
 80024d6:	e005      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_GetSysClockFreq+0x114>)
 80024da:	617b      	str	r3, [r7, #20]
      break;
 80024dc:	e002      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	617b      	str	r3, [r7, #20]
      break;
 80024e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	3301      	adds	r3, #1
 80024f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	fb02 f203 	mul.w	r2, r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	0e5b      	lsrs	r3, r3, #25
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	3301      	adds	r3, #1
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002524:	69bb      	ldr	r3, [r7, #24]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	08006280 	.word	0x08006280
 800253c:	00f42400 	.word	0x00f42400
 8002540:	007a1200 	.word	0x007a1200

08002544 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_RCC_GetHCLKFreq+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000000 	.word	0x20000000

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002560:	f7ff fff0 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4904      	ldr	r1, [pc, #16]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	08006278 	.word	0x08006278

08002588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800258c:	f7ff ffda 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0adb      	lsrs	r3, r3, #11
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4904      	ldr	r1, [pc, #16]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	08006278 	.word	0x08006278

080025b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025cc:	f7ff f9c8 	bl	8001960 <HAL_PWREx_GetVoltageRange>
 80025d0:	6178      	str	r0, [r7, #20]
 80025d2:	e014      	b.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025d4:	4b25      	ldr	r3, [pc, #148]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	4a24      	ldr	r2, [pc, #144]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025de:	6593      	str	r3, [r2, #88]	; 0x58
 80025e0:	4b22      	ldr	r3, [pc, #136]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025ec:	f7ff f9b8 	bl	8001960 <HAL_PWREx_GetVoltageRange>
 80025f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025f2:	4b1e      	ldr	r3, [pc, #120]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	4a1d      	ldr	r2, [pc, #116]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002604:	d10b      	bne.n	800261e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	d919      	bls.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2ba0      	cmp	r3, #160	; 0xa0
 8002610:	d902      	bls.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002612:	2302      	movs	r3, #2
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	e013      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002618:	2301      	movs	r3, #1
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	e010      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b80      	cmp	r3, #128	; 0x80
 8002622:	d902      	bls.n	800262a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002624:	2303      	movs	r3, #3
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	e00a      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b80      	cmp	r3, #128	; 0x80
 800262e:	d102      	bne.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002630:	2302      	movs	r3, #2
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	e004      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b70      	cmp	r3, #112	; 0x70
 800263a:	d101      	bne.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800263c:	2301      	movs	r3, #1
 800263e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 0207 	bic.w	r2, r3, #7
 8002648:	4909      	ldr	r1, [pc, #36]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	429a      	cmp	r2, r3
 800265c:	d001      	beq.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	40022000 	.word	0x40022000

08002674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800267c:	2300      	movs	r3, #0
 800267e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002680:	2300      	movs	r3, #0
 8002682:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800268c:	2b00      	cmp	r3, #0
 800268e:	d031      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002698:	d01a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800269a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800269e:	d814      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026a8:	d10f      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80026aa:	4bac      	ldr	r3, [pc, #688]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4aab      	ldr	r2, [pc, #684]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026b6:	e00c      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3304      	adds	r3, #4
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f9cc 	bl	8002a5c <RCCEx_PLLSAI1_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c8:	e003      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	74fb      	strb	r3, [r7, #19]
      break;
 80026ce:	e000      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80026d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d2:	7cfb      	ldrb	r3, [r7, #19]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10b      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026d8:	4ba0      	ldr	r3, [pc, #640]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e6:	499d      	ldr	r1, [pc, #628]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026ee:	e001      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8099 	beq.w	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002706:	4b95      	ldr	r3, [pc, #596]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002716:	2300      	movs	r3, #0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00d      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	4b8f      	ldr	r3, [pc, #572]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	4a8e      	ldr	r2, [pc, #568]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002726:	6593      	str	r3, [r2, #88]	; 0x58
 8002728:	4b8c      	ldr	r3, [pc, #560]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002734:	2301      	movs	r3, #1
 8002736:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002738:	4b89      	ldr	r3, [pc, #548]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a88      	ldr	r2, [pc, #544]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800273e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002742:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002744:	f7fe fc98 	bl	8001078 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800274a:	e009      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274c:	f7fe fc94 	bl	8001078 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d902      	bls.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	74fb      	strb	r3, [r7, #19]
        break;
 800275e:	e005      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002760:	4b7f      	ldr	r3, [pc, #508]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ef      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d155      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002772:	4b7a      	ldr	r3, [pc, #488]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01e      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	429a      	cmp	r2, r3
 800278c:	d019      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800278e:	4b73      	ldr	r3, [pc, #460]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002798:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800279a:	4b70      	ldr	r3, [pc, #448]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	4a6e      	ldr	r2, [pc, #440]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027aa:	4b6c      	ldr	r3, [pc, #432]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b0:	4a6a      	ldr	r2, [pc, #424]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ba:	4a68      	ldr	r2, [pc, #416]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d016      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fc54 	bl	8001078 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d2:	e00b      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7fe fc50 	bl	8001078 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d902      	bls.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	74fb      	strb	r3, [r7, #19]
            break;
 80027ea:	e006      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ec:	4b5b      	ldr	r3, [pc, #364]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ec      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002800:	4b56      	ldr	r3, [pc, #344]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002806:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	4953      	ldr	r1, [pc, #332]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002816:	e004      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	74bb      	strb	r3, [r7, #18]
 800281c:	e001      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002822:	7c7b      	ldrb	r3, [r7, #17]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002828:	4b4c      	ldr	r3, [pc, #304]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	4a4b      	ldr	r2, [pc, #300]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800282e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002832:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002840:	4b46      	ldr	r3, [pc, #280]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	f023 0203 	bic.w	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4943      	ldr	r1, [pc, #268]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002862:	4b3e      	ldr	r3, [pc, #248]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	f023 020c 	bic.w	r2, r3, #12
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	493a      	ldr	r1, [pc, #232]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002884:	4b35      	ldr	r3, [pc, #212]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	4932      	ldr	r1, [pc, #200]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028a6:	4b2d      	ldr	r3, [pc, #180]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b4:	4929      	ldr	r1, [pc, #164]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028c8:	4b24      	ldr	r3, [pc, #144]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	4921      	ldr	r1, [pc, #132]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	4918      	ldr	r1, [pc, #96]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4910      	ldr	r1, [pc, #64]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d02c      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800294c:	d10a      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294e:	4b03      	ldr	r3, [pc, #12]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	4a02      	ldr	r2, [pc, #8]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002958:	60d3      	str	r3, [r2, #12]
 800295a:	e015      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800295c:	40021000 	.word	0x40021000
 8002960:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800296c:	d10c      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3304      	adds	r3, #4
 8002972:	2101      	movs	r1, #1
 8002974:	4618      	mov	r0, r3
 8002976:	f000 f871 	bl	8002a5c <RCCEx_PLLSAI1_Config>
 800297a:	4603      	mov	r3, r0
 800297c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d028      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002994:	4b30      	ldr	r3, [pc, #192]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	492d      	ldr	r1, [pc, #180]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b2:	d106      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b4:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a27      	ldr	r2, [pc, #156]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029be:	60d3      	str	r3, [r2, #12]
 80029c0:	e011      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ca:	d10c      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3304      	adds	r3, #4
 80029d0:	2101      	movs	r1, #1
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f842 	bl	8002a5c <RCCEx_PLLSAI1_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
 80029e4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d01c      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a00:	4915      	ldr	r1, [pc, #84]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2102      	movs	r1, #2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f81f 	bl	8002a5c <RCCEx_PLLSAI1_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	4904      	ldr	r1, [pc, #16]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000

08002a5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a6a:	4b74      	ldr	r3, [pc, #464]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d018      	beq.n	8002aa8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a76:	4b71      	ldr	r3, [pc, #452]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f003 0203 	and.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d10d      	bne.n	8002aa2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
       ||
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a8e:	4b6b      	ldr	r3, [pc, #428]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d047      	beq.n	8002b32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
 8002aa6:	e044      	b.n	8002b32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d018      	beq.n	8002ae2 <RCCEx_PLLSAI1_Config+0x86>
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d825      	bhi.n	8002b00 <RCCEx_PLLSAI1_Config+0xa4>
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d002      	beq.n	8002abe <RCCEx_PLLSAI1_Config+0x62>
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d009      	beq.n	8002ad0 <RCCEx_PLLSAI1_Config+0x74>
 8002abc:	e020      	b.n	8002b00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002abe:	4b5f      	ldr	r3, [pc, #380]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d11d      	bne.n	8002b06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ace:	e01a      	b.n	8002b06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ad0:	4b5a      	ldr	r3, [pc, #360]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d116      	bne.n	8002b0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae0:	e013      	b.n	8002b0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ae2:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aee:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002afe:	e006      	b.n	8002b0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e004      	b.n	8002b10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b06:	bf00      	nop
 8002b08:	e002      	b.n	8002b10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e000      	b.n	8002b10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10d      	bne.n	8002b32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b16:	4b49      	ldr	r3, [pc, #292]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6819      	ldr	r1, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	4943      	ldr	r1, [pc, #268]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d17c      	bne.n	8002c32 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b38:	4b40      	ldr	r3, [pc, #256]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a3f      	ldr	r2, [pc, #252]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b44:	f7fe fa98 	bl	8001078 <HAL_GetTick>
 8002b48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b4a:	e009      	b.n	8002b60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b4c:	f7fe fa94 	bl	8001078 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d902      	bls.n	8002b60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b5e:	e005      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b60:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ef      	bne.n	8002b4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d15f      	bne.n	8002c32 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d110      	bne.n	8002b9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b78:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002b80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6892      	ldr	r2, [r2, #8]
 8002b88:	0211      	lsls	r1, r2, #8
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68d2      	ldr	r2, [r2, #12]
 8002b8e:	06d2      	lsls	r2, r2, #27
 8002b90:	430a      	orrs	r2, r1
 8002b92:	492a      	ldr	r1, [pc, #168]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	610b      	str	r3, [r1, #16]
 8002b98:	e027      	b.n	8002bea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d112      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba0:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ba8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6892      	ldr	r2, [r2, #8]
 8002bb0:	0211      	lsls	r1, r2, #8
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6912      	ldr	r2, [r2, #16]
 8002bb6:	0852      	lsrs	r2, r2, #1
 8002bb8:	3a01      	subs	r2, #1
 8002bba:	0552      	lsls	r2, r2, #21
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	491f      	ldr	r1, [pc, #124]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	610b      	str	r3, [r1, #16]
 8002bc4:	e011      	b.n	8002bea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6892      	ldr	r2, [r2, #8]
 8002bd6:	0211      	lsls	r1, r2, #8
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6952      	ldr	r2, [r2, #20]
 8002bdc:	0852      	lsrs	r2, r2, #1
 8002bde:	3a01      	subs	r2, #1
 8002be0:	0652      	lsls	r2, r2, #25
 8002be2:	430a      	orrs	r2, r1
 8002be4:	4915      	ldr	r1, [pc, #84]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bea:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bf4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fa3f 	bl	8001078 <HAL_GetTick>
 8002bfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bfc:	e009      	b.n	8002c12 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bfe:	f7fe fa3b 	bl	8001078 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d902      	bls.n	8002c12 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	73fb      	strb	r3, [r7, #15]
          break;
 8002c10:	e005      	b.n	8002c1e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0ef      	beq.n	8002bfe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d106      	bne.n	8002c32 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	4903      	ldr	r1, [pc, #12]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000

08002c40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e095      	b.n	8002d7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c62:	d009      	beq.n	8002c78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	61da      	str	r2, [r3, #28]
 8002c6a:	e005      	b.n	8002c78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fd fe58 	bl	8000948 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cb8:	d902      	bls.n	8002cc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e002      	b.n	8002cc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002cce:	d007      	beq.n	8002ce0 <HAL_SPI_Init+0xa0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cd8:	d002      	beq.n	8002ce0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d22:	ea42 0103 	orr.w	r1, r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	0c1b      	lsrs	r3, r3, #16
 8002d3c:	f003 0204 	and.w	r2, r3, #4
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d5c:	ea42 0103 	orr.w	r1, r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_SPI_Transmit_IT+0x20>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e072      	b.n	8002e8e <HAL_SPI_Transmit_IT+0x106>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_SPI_Transmit_IT+0x34>
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dc0:	e060      	b.n	8002e84 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d002      	beq.n	8002dd4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dd2:	e057      	b.n	8002e84 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	88fa      	ldrh	r2, [r7, #6]
 8002dec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e18:	d903      	bls.n	8002e22 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <HAL_SPI_Transmit_IT+0x114>)
 8002e1e:	651a      	str	r2, [r3, #80]	; 0x50
 8002e20:	e002      	b.n	8002e28 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <HAL_SPI_Transmit_IT+0x118>)
 8002e26:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e30:	d10f      	bne.n	8002e52 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002e60:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d008      	beq.n	8002e82 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e000      	b.n	8002e84 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8002e82:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	080036d7 	.word	0x080036d7
 8002ea0:	08003691 	.word	0x08003691

08002ea4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d110      	bne.n	8002ee0 <HAL_SPI_Receive_IT+0x3c>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f894 	bl	8003004 <HAL_SPI_TransmitReceive_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	e089      	b.n	8002ff4 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_SPI_Receive_IT+0x4a>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e082      	b.n	8002ff4 <HAL_SPI_Receive_IT+0x150>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d002      	beq.n	8002f08 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
 8002f04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f06:	e070      	b.n	8002fea <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_SPI_Receive_IT+0x70>
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f18:	e067      	b.n	8002fea <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f5e:	d90b      	bls.n	8002f78 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f6e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <HAL_SPI_Receive_IT+0x158>)
 8002f74:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f76:	e00a      	b.n	8002f8e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f86:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <HAL_SPI_Receive_IT+0x15c>)
 8002f8c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f96:	d10f      	bne.n	8002fb8 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fb6:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002fc6:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b40      	cmp	r3, #64	; 0x40
 8002fd4:	d008      	beq.n	8002fe8 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e000      	b.n	8002fea <HAL_SPI_Receive_IT+0x146>
  }

error :
 8002fe8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	08003645 	.word	0x08003645
 8003000:	080035f5 	.word	0x080035f5

08003004 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_SPI_TransmitReceive_IT+0x20>
 8003020:	2302      	movs	r3, #2
 8003022:	e091      	b.n	8003148 <HAL_SPI_TransmitReceive_IT+0x144>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003032:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800303a:	7dbb      	ldrb	r3, [r7, #22]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d00d      	beq.n	800305c <HAL_SPI_TransmitReceive_IT+0x58>
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003046:	d106      	bne.n	8003056 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <HAL_SPI_TransmitReceive_IT+0x52>
 8003050:	7dbb      	ldrb	r3, [r7, #22]
 8003052:	2b04      	cmp	r3, #4
 8003054:	d002      	beq.n	800305c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003056:	2302      	movs	r3, #2
 8003058:	75fb      	strb	r3, [r7, #23]
    goto error;
 800305a:	e070      	b.n	800313e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_SPI_TransmitReceive_IT+0x6a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_SPI_TransmitReceive_IT+0x6a>
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003072:	e064      	b.n	800313e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b04      	cmp	r3, #4
 800307e:	d003      	beq.n	8003088 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2205      	movs	r2, #5
 8003084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	887a      	ldrh	r2, [r7, #2]
 800309e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	887a      	ldrh	r2, [r7, #2]
 80030aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	887a      	ldrh	r2, [r7, #2]
 80030b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030be:	d906      	bls.n	80030ce <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a24      	ldr	r2, [pc, #144]	; (8003154 <HAL_SPI_TransmitReceive_IT+0x150>)
 80030c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a23      	ldr	r2, [pc, #140]	; (8003158 <HAL_SPI_TransmitReceive_IT+0x154>)
 80030ca:	651a      	str	r2, [r3, #80]	; 0x50
 80030cc:	e005      	b.n	80030da <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a22      	ldr	r2, [pc, #136]	; (800315c <HAL_SPI_TransmitReceive_IT+0x158>)
 80030d2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a22      	ldr	r2, [pc, #136]	; (8003160 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80030d8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030e2:	d802      	bhi.n	80030ea <HAL_SPI_TransmitReceive_IT+0xe6>
 80030e4:	887b      	ldrh	r3, [r7, #2]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d908      	bls.n	80030fc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e007      	b.n	800310c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800310a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800311a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d008      	beq.n	800313c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e000      	b.n	800313e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800313c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
}
 8003148:	4618      	mov	r0, r3
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	0800352f 	.word	0x0800352f
 8003158:	08003595 	.word	0x08003595
 800315c:	080033df 	.word	0x080033df
 8003160:	0800349d 	.word	0x0800349d

08003164 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	099b      	lsrs	r3, r3, #6
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10f      	bne.n	80031a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d004      	beq.n	80031a8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
    return;
 80031a6:	e0d7      	b.n	8003358 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_SPI_IRQHandler+0x66>
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	09db      	lsrs	r3, r3, #7
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4798      	blx	r3
    return;
 80031c8:	e0c6      	b.n	8003358 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10c      	bne.n	80031f0 <HAL_SPI_IRQHandler+0x8c>
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	0a1b      	lsrs	r3, r3, #8
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80b4 	beq.w	8003358 <HAL_SPI_IRQHandler+0x1f4>
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80ad 	beq.w	8003358 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	099b      	lsrs	r3, r3, #6
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d023      	beq.n	8003252 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b03      	cmp	r3, #3
 8003214:	d011      	beq.n	800323a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	f043 0204 	orr.w	r2, r3, #4
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	e00b      	b.n	8003252 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	693b      	ldr	r3, [r7, #16]
        return;
 8003250:	e082      	b.n	8003358 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d014      	beq.n	8003288 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00c      	beq.n	80032ae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003298:	f043 0208 	orr.w	r2, r3, #8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d04f      	beq.n	8003356 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032c4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d104      	bne.n	80032e2 <HAL_SPI_IRQHandler+0x17e>
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d034      	beq.n	800334c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0203 	bic.w	r2, r2, #3
 80032f0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d011      	beq.n	800331e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	4a18      	ldr	r2, [pc, #96]	; (8003360 <HAL_SPI_IRQHandler+0x1fc>)
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe f811 	bl	800132e <HAL_DMA_Abort_IT>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003316:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	2b00      	cmp	r3, #0
 8003324:	d016      	beq.n	8003354 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <HAL_SPI_IRQHandler+0x1fc>)
 800332c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd fffb 	bl	800132e <HAL_DMA_Abort_IT>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800334a:	e003      	b.n	8003354 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f827 	bl	80033a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003352:	e000      	b.n	8003356 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003354:	bf00      	nop
    return;
 8003356:	bf00      	nop
  }
}
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	080033b5 	.word	0x080033b5

08003364 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f7ff ffe5 	bl	80033a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d923      	bls.n	800343a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	b292      	uxth	r2, r2
 80033fe:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b02      	subs	r3, #2
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d11f      	bne.n	8003468 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	e016      	b.n	8003468 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f103 020c 	add.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	7812      	ldrb	r2, [r2, #0]
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10f      	bne.n	8003494 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003482:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fafc 	bl	8003a8c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d912      	bls.n	80034d4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	881a      	ldrh	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	1c9a      	adds	r2, r3, #2
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b02      	subs	r3, #2
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034d2:	e012      	b.n	80034fa <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	7812      	ldrb	r2, [r2, #0]
 80034e0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d110      	bne.n	8003526 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003512:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fab3 	bl	8003a8c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	b292      	uxth	r2, r2
 8003542:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	1c9a      	adds	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10f      	bne.n	800358c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800357a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fa80 	bl	8003a8c <SPI_CloseRxTx_ISR>
    }
  }
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	1c9a      	adds	r2, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d110      	bne.n	80035ec <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035d8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d102      	bne.n	80035ec <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fa50 	bl	8003a8c <SPI_CloseRxTx_ISR>
    }
  }
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f103 020c 	add.w	r2, r3, #12
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa6a 	bl	8003b10 <SPI_CloseRx_ISR>
  }
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	b292      	uxth	r2, r2
 8003658:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	1c9a      	adds	r2, r3, #2
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fa44 	bl	8003b10 <SPI_CloseRx_ISR>
  }
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	330c      	adds	r3, #12
 80036a2:	7812      	ldrb	r2, [r2, #0]
 80036a4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fa51 	bl	8003b70 <SPI_CloseTx_ISR>
  }
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	881a      	ldrh	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	1c9a      	adds	r2, r3, #2
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fa2f 	bl	8003b70 <SPI_CloseTx_ISR>
  }
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800372c:	f7fd fca4 	bl	8001078 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	4413      	add	r3, r2
 800373a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800373c:	f7fd fc9c 	bl	8001078 <HAL_GetTick>
 8003740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003742:	4b39      	ldr	r3, [pc, #228]	; (8003828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	015b      	lsls	r3, r3, #5
 8003748:	0d1b      	lsrs	r3, r3, #20
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003752:	e054      	b.n	80037fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d050      	beq.n	80037fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800375c:	f7fd fc8c 	bl	8001078 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	429a      	cmp	r2, r3
 800376a:	d902      	bls.n	8003772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d13d      	bne.n	80037ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800378a:	d111      	bne.n	80037b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003794:	d004      	beq.n	80037a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379e:	d107      	bne.n	80037b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b8:	d10f      	bne.n	80037da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e017      	b.n	800381e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	429a      	cmp	r2, r3
 800381a:	d19b      	bne.n	8003754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000000 	.word	0x20000000

0800382c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800383a:	f7fd fc1d 	bl	8001078 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	4413      	add	r3, r2
 8003848:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800384a:	f7fd fc15 	bl	8001078 <HAL_GetTick>
 800384e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003850:	4b3e      	ldr	r3, [pc, #248]	; (800394c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	00da      	lsls	r2, r3, #3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	0d1b      	lsrs	r3, r3, #20
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003868:	e062      	b.n	8003930 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003870:	d109      	bne.n	8003886 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003884:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d050      	beq.n	8003930 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800388e:	f7fd fbf3 	bl	8001078 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	429a      	cmp	r2, r3
 800389c:	d902      	bls.n	80038a4 <SPI_WaitFifoStateUntilTimeout+0x78>
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d13d      	bne.n	8003920 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038bc:	d111      	bne.n	80038e2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c6:	d004      	beq.n	80038d2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d0:	d107      	bne.n	80038e2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ea:	d10f      	bne.n	800390c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800390a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e010      	b.n	8003942 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	3b01      	subs	r3, #1
 800392e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	4013      	ands	r3, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	d194      	bne.n	800386a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000000 	.word	0x20000000

08003950 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003964:	d111      	bne.n	800398a <SPI_EndRxTransaction+0x3a>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396e:	d004      	beq.n	800397a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003978:	d107      	bne.n	800398a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003988:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2200      	movs	r2, #0
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f7ff fec1 	bl	800371c <SPI_WaitFlagStateUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a4:	f043 0220 	orr.w	r2, r3, #32
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e023      	b.n	80039f8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039b8:	d11d      	bne.n	80039f6 <SPI_EndRxTransaction+0xa6>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c2:	d004      	beq.n	80039ce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039cc:	d113      	bne.n	80039f6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff ff26 	bl	800382c <SPI_WaitFifoStateUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ea:	f043 0220 	orr.w	r2, r3, #32
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e000      	b.n	80039f8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f7ff ff07 	bl	800382c <SPI_WaitFifoStateUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e027      	b.n	8003a84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2180      	movs	r1, #128	; 0x80
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff fe6c 	bl	800371c <SPI_WaitFlagStateUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4e:	f043 0220 	orr.w	r2, r3, #32
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e014      	b.n	8003a84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7ff fee0 	bl	800382c <SPI_WaitFifoStateUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e000      	b.n	8003a84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a94:	f7fd faf0 	bl	8001078 <HAL_GetTick>
 8003a98:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0220 	bic.w	r2, r2, #32
 8003aa8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	2164      	movs	r1, #100	; 0x64
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff ffa6 	bl	8003a00 <SPI_EndRxTxTransaction>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abe:	f043 0220 	orr.w	r2, r3, #32
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d115      	bne.n	8003afa <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d107      	bne.n	8003aea <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff fc48 	bl	8003378 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003ae8:	e00e      	b.n	8003b08 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff fc4a 	bl	800338c <HAL_SPI_TxRxCpltCallback>
}
 8003af8:	e006      	b.n	8003b08 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fc4c 	bl	80033a0 <HAL_SPI_ErrorCallback>
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b26:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003b28:	f7fd faa6 	bl	8001078 <HAL_GetTick>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	2164      	movs	r1, #100	; 0x64
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff ff0c 	bl	8003950 <SPI_EndRxTransaction>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff fc0c 	bl	8003378 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003b60:	e002      	b.n	8003b68 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff fc1c 	bl	80033a0 <HAL_SPI_ErrorCallback>
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b78:	f7fd fa7e 	bl	8001078 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b8c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	2164      	movs	r1, #100	; 0x64
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ff34 	bl	8003a00 <SPI_EndRxTxTransaction>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff fbe1 	bl	80033a0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003bde:	e002      	b.n	8003be6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fbbf 	bl	8003364 <HAL_SPI_TxCpltCallback>
}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e049      	b.n	8003c94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7fd f8c5 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f000 fa97 	bl	8004160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d001      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e03b      	b.n	8003d2c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d009      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0x4e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cde:	d004      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0x4e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <HAL_TIM_Base_Start_IT+0xa0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d115      	bne.n	8003d16 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <HAL_TIM_Base_Start_IT+0xa4>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b06      	cmp	r3, #6
 8003cfa:	d015      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x8c>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d02:	d011      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d14:	e008      	b.n	8003d28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e000      	b.n	8003d2a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	00010007 	.word	0x00010007

08003d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d122      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d11b      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0202 	mvn.w	r2, #2
 8003d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f9cb 	bl	8004122 <HAL_TIM_IC_CaptureCallback>
 8003d8c:	e005      	b.n	8003d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f9bd 	bl	800410e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f9ce 	bl	8004136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d122      	bne.n	8003df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d11b      	bne.n	8003df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0204 	mvn.w	r2, #4
 8003dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f9a1 	bl	8004122 <HAL_TIM_IC_CaptureCallback>
 8003de0:	e005      	b.n	8003dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f993 	bl	800410e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f9a4 	bl	8004136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d122      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d11b      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0208 	mvn.w	r2, #8
 8003e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f977 	bl	8004122 <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f969 	bl	800410e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f97a 	bl	8004136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0210 	mvn.w	r2, #16
 8003e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2208      	movs	r2, #8
 8003e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f94d 	bl	8004122 <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f93f 	bl	800410e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f950 	bl	8004136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0201 	mvn.w	r2, #1
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fc fda6 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee0:	2b80      	cmp	r3, #128	; 0x80
 8003ee2:	d107      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 faa4 	bl	800443c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f02:	d10e      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b80      	cmp	r3, #128	; 0x80
 8003f10:	d107      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fa97 	bl	8004450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d10e      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d107      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8fe 	bl	800414a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d10e      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d107      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f06f 0220 	mvn.w	r2, #32
 8003f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fa57 	bl	8004428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_ConfigClockSource+0x18>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0b5      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x184>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fbc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fc4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd6:	d03e      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0xd4>
 8003fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fdc:	f200 8087 	bhi.w	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe4:	f000 8085 	beq.w	80040f2 <HAL_TIM_ConfigClockSource+0x170>
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	d87f      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8003fee:	2b70      	cmp	r3, #112	; 0x70
 8003ff0:	d01a      	beq.n	8004028 <HAL_TIM_ConfigClockSource+0xa6>
 8003ff2:	2b70      	cmp	r3, #112	; 0x70
 8003ff4:	d87b      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8003ff6:	2b60      	cmp	r3, #96	; 0x60
 8003ff8:	d050      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x11a>
 8003ffa:	2b60      	cmp	r3, #96	; 0x60
 8003ffc:	d877      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8003ffe:	2b50      	cmp	r3, #80	; 0x50
 8004000:	d03c      	beq.n	800407c <HAL_TIM_ConfigClockSource+0xfa>
 8004002:	2b50      	cmp	r3, #80	; 0x50
 8004004:	d873      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d058      	beq.n	80040bc <HAL_TIM_ConfigClockSource+0x13a>
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d86f      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 800400e:	2b30      	cmp	r3, #48	; 0x30
 8004010:	d064      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x15a>
 8004012:	2b30      	cmp	r3, #48	; 0x30
 8004014:	d86b      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8004016:	2b20      	cmp	r3, #32
 8004018:	d060      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x15a>
 800401a:	2b20      	cmp	r3, #32
 800401c:	d867      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d05c      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x15a>
 8004022:	2b10      	cmp	r3, #16
 8004024:	d05a      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004026:	e062      	b.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6899      	ldr	r1, [r3, #8]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f000 f970 	bl	800431c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800404a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	609a      	str	r2, [r3, #8]
      break;
 8004054:	e04e      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6899      	ldr	r1, [r3, #8]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f000 f959 	bl	800431c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004078:	609a      	str	r2, [r3, #8]
      break;
 800407a:	e03b      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	461a      	mov	r2, r3
 800408a:	f000 f8cd 	bl	8004228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2150      	movs	r1, #80	; 0x50
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f926 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 800409a:	e02b      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	461a      	mov	r2, r3
 80040aa:	f000 f8ec 	bl	8004286 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2160      	movs	r1, #96	; 0x60
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 f916 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 80040ba:	e01b      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	461a      	mov	r2, r3
 80040ca:	f000 f8ad 	bl	8004228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2140      	movs	r1, #64	; 0x40
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 f906 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 80040da:	e00b      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 f8fd 	bl	80042e6 <TIM_ITRx_SetConfig>
        break;
 80040ec:	e002      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80040f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a2a      	ldr	r2, [pc, #168]	; (800421c <TIM_Base_SetConfig+0xbc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_Base_SetConfig+0x20>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417e:	d108      	bne.n	8004192 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a21      	ldr	r2, [pc, #132]	; (800421c <TIM_Base_SetConfig+0xbc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00b      	beq.n	80041b2 <TIM_Base_SetConfig+0x52>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d007      	beq.n	80041b2 <TIM_Base_SetConfig+0x52>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <TIM_Base_SetConfig+0xc0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_Base_SetConfig+0x52>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <TIM_Base_SetConfig+0xc4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d108      	bne.n	80041c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a0c      	ldr	r2, [pc, #48]	; (800421c <TIM_Base_SetConfig+0xbc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <TIM_Base_SetConfig+0xa0>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <TIM_Base_SetConfig+0xc0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_Base_SetConfig+0xa0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <TIM_Base_SetConfig+0xc4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d103      	bne.n	8004208 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	615a      	str	r2, [r3, #20]
}
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40014000 	.word	0x40014000
 8004224:	40014400 	.word	0x40014400

08004228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f023 0201 	bic.w	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f023 030a 	bic.w	r3, r3, #10
 8004264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004286:	b480      	push	{r7}
 8004288:	b087      	sub	sp, #28
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	f023 0210 	bic.w	r2, r3, #16
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	031b      	lsls	r3, r3, #12
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	f043 0307 	orr.w	r3, r3, #7
 8004308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	609a      	str	r2, [r3, #8]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	021a      	lsls	r2, r3, #8
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	431a      	orrs	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4313      	orrs	r3, r2
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	609a      	str	r2, [r3, #8]
}
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004370:	2302      	movs	r3, #2
 8004372:	e04f      	b.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a21      	ldr	r2, [pc, #132]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d108      	bne.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a14      	ldr	r2, [pc, #80]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d004      	beq.n	80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a10      	ldr	r2, [pc, #64]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d10c      	bne.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40014000 	.word	0x40014000

08004428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e040      	b.n	80044f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fc fcda 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fae2 	bl	8004a6c <UART_SetConfig>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e022      	b.n	80044f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fce2 	bl	8004e84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fd69 	bl	8004fc8 <UART_CheckIdleState>
 80044f6:	4603      	mov	r3, r0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	; 0x28
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004514:	2b20      	cmp	r3, #32
 8004516:	f040 8082 	bne.w	800461e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <HAL_UART_Transmit+0x26>
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e07a      	b.n	8004620 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_UART_Transmit+0x38>
 8004534:	2302      	movs	r3, #2
 8004536:	e073      	b.n	8004620 <HAL_UART_Transmit+0x120>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2221      	movs	r2, #33	; 0x21
 800454c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800454e:	f7fc fd93 	bl	8001078 <HAL_GetTick>
 8004552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	88fa      	ldrh	r2, [r7, #6]
 8004558:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456c:	d108      	bne.n	8004580 <HAL_UART_Transmit+0x80>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e003      	b.n	8004588 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004590:	e02d      	b.n	80045ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	2180      	movs	r1, #128	; 0x80
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fd5c 	bl	800505a <UART_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e039      	b.n	8004620 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10b      	bne.n	80045ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045be:	b292      	uxth	r2, r2
 80045c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	3302      	adds	r3, #2
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	e008      	b.n	80045dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	781a      	ldrb	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	b292      	uxth	r2, r2
 80045d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3301      	adds	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1cb      	bne.n	8004592 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2200      	movs	r2, #0
 8004602:	2140      	movs	r1, #64	; 0x40
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fd28 	bl	800505a <UART_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e005      	b.n	8004620 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	f640 030f 	movw	r3, #2063	; 0x80f
 800464e:	4013      	ands	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d113      	bne.n	8004680 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00e      	beq.n	8004680 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 81ce 	beq.w	8004a12 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
      }
      return;
 800467e:	e1c8      	b.n	8004a12 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 80e3 	beq.w	800484e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d105      	bne.n	800469e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4ba6      	ldr	r3, [pc, #664]	; (8004930 <HAL_UART_IRQHandler+0x308>)
 8004696:	4013      	ands	r3, r2
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80d8 	beq.w	800484e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d010      	beq.n	80046ca <HAL_UART_IRQHandler+0xa2>
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00b      	beq.n	80046ca <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2201      	movs	r2, #1
 80046b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c0:	f043 0201 	orr.w	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d010      	beq.n	80046f6 <HAL_UART_IRQHandler+0xce>
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2202      	movs	r2, #2
 80046e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ec:	f043 0204 	orr.w	r2, r3, #4
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <HAL_UART_IRQHandler+0xfa>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2204      	movs	r2, #4
 8004710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004718:	f043 0202 	orr.w	r2, r3, #2
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d015      	beq.n	8004758 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d104      	bne.n	8004740 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00b      	beq.n	8004758 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2208      	movs	r2, #8
 8004746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800474e:	f043 0208 	orr.w	r2, r3, #8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800475e:	2b00      	cmp	r3, #0
 8004760:	d011      	beq.n	8004786 <HAL_UART_IRQHandler+0x15e>
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00c      	beq.n	8004786 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8142 	beq.w	8004a16 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00c      	beq.n	80047b6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047bc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d004      	beq.n	80047d6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d031      	beq.n	800483a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fcbb 	bl	8005152 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d123      	bne.n	8004832 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d013      	beq.n	800482a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a4b      	ldr	r2, [pc, #300]	; (8004934 <HAL_UART_IRQHandler+0x30c>)
 8004808:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	4618      	mov	r0, r3
 8004810:	f7fc fd8d 	bl	800132e <HAL_DMA_Abort_IT>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d017      	beq.n	800484a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004824:	4610      	mov	r0, r2
 8004826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004828:	e00f      	b.n	800484a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f908 	bl	8004a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004830:	e00b      	b.n	800484a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f904 	bl	8004a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	e007      	b.n	800484a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f900 	bl	8004a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004848:	e0e5      	b.n	8004a16 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484a:	bf00      	nop
    return;
 800484c:	e0e3      	b.n	8004a16 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004852:	2b01      	cmp	r3, #1
 8004854:	f040 80a9 	bne.w	80049aa <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80a3 	beq.w	80049aa <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 809d 	beq.w	80049aa <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2210      	movs	r2, #16
 8004876:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d158      	bne.n	8004938 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004890:	893b      	ldrh	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80c1 	beq.w	8004a1a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800489e:	893a      	ldrh	r2, [r7, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	f080 80ba 	bcs.w	8004a1a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	893a      	ldrh	r2, [r7, #8]
 80048aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d12a      	bne.n	8004914 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0201 	bic.w	r2, r2, #1
 80048dc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ec:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0210 	bic.w	r2, r2, #16
 8004908:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	4618      	mov	r0, r3
 8004910:	f7fc fccf 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004920:	b29b      	uxth	r3, r3
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	b29b      	uxth	r3, r3
 8004926:	4619      	mov	r1, r3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f893 	bl	8004a54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800492e:	e074      	b.n	8004a1a <HAL_UART_IRQHandler+0x3f2>
 8004930:	04000120 	.word	0x04000120
 8004934:	080051b1 	.word	0x080051b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004944:	b29b      	uxth	r3, r3
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d063      	beq.n	8004a1e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8004956:	897b      	ldrh	r3, [r7, #10]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d060      	beq.n	8004a1e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800496a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0210 	bic.w	r2, r2, #16
 800499c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f856 	bl	8004a54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80049a8:	e039      	b.n	8004a1e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00d      	beq.n	80049d0 <HAL_UART_IRQHandler+0x3a8>
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80049c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fc20 	bl	800520e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049ce:	e029      	b.n	8004a24 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00d      	beq.n	80049f6 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01a      	beq.n	8004a22 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	4798      	blx	r3
    }
    return;
 80049f4:	e015      	b.n	8004a22 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d011      	beq.n	8004a24 <HAL_UART_IRQHandler+0x3fc>
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00c      	beq.n	8004a24 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fbe6 	bl	80051dc <UART_EndTransmit_IT>
    return;
 8004a10:	e008      	b.n	8004a24 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004a12:	bf00      	nop
 8004a14:	e006      	b.n	8004a24 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004a16:	bf00      	nop
 8004a18:	e004      	b.n	8004a24 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004a1a:	bf00      	nop
 8004a1c:	e002      	b.n	8004a24 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004a1e:	bf00      	nop
 8004a20:	e000      	b.n	8004a24 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004a22:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop

08004a2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a6c:	b5b0      	push	{r4, r5, r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4baf      	ldr	r3, [pc, #700]	; (8004d54 <UART_SetConfig+0x2e8>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	69f9      	ldr	r1, [r7, #28]
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4aa4      	ldr	r2, [pc, #656]	; (8004d58 <UART_SetConfig+0x2ec>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a9b      	ldr	r2, [pc, #620]	; (8004d5c <UART_SetConfig+0x2f0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d121      	bne.n	8004b36 <UART_SetConfig+0xca>
 8004af2:	4b9b      	ldr	r3, [pc, #620]	; (8004d60 <UART_SetConfig+0x2f4>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d817      	bhi.n	8004b30 <UART_SetConfig+0xc4>
 8004b00:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <UART_SetConfig+0x9c>)
 8004b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b06:	bf00      	nop
 8004b08:	08004b19 	.word	0x08004b19
 8004b0c:	08004b25 	.word	0x08004b25
 8004b10:	08004b1f 	.word	0x08004b1f
 8004b14:	08004b2b 	.word	0x08004b2b
 8004b18:	2301      	movs	r3, #1
 8004b1a:	76fb      	strb	r3, [r7, #27]
 8004b1c:	e070      	b.n	8004c00 <UART_SetConfig+0x194>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	76fb      	strb	r3, [r7, #27]
 8004b22:	e06d      	b.n	8004c00 <UART_SetConfig+0x194>
 8004b24:	2304      	movs	r3, #4
 8004b26:	76fb      	strb	r3, [r7, #27]
 8004b28:	e06a      	b.n	8004c00 <UART_SetConfig+0x194>
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	76fb      	strb	r3, [r7, #27]
 8004b2e:	e067      	b.n	8004c00 <UART_SetConfig+0x194>
 8004b30:	2310      	movs	r3, #16
 8004b32:	76fb      	strb	r3, [r7, #27]
 8004b34:	e064      	b.n	8004c00 <UART_SetConfig+0x194>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a8a      	ldr	r2, [pc, #552]	; (8004d64 <UART_SetConfig+0x2f8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d132      	bne.n	8004ba6 <UART_SetConfig+0x13a>
 8004b40:	4b87      	ldr	r3, [pc, #540]	; (8004d60 <UART_SetConfig+0x2f4>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d828      	bhi.n	8004ba0 <UART_SetConfig+0x134>
 8004b4e:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <UART_SetConfig+0xe8>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b89 	.word	0x08004b89
 8004b58:	08004ba1 	.word	0x08004ba1
 8004b5c:	08004ba1 	.word	0x08004ba1
 8004b60:	08004ba1 	.word	0x08004ba1
 8004b64:	08004b95 	.word	0x08004b95
 8004b68:	08004ba1 	.word	0x08004ba1
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004ba1 	.word	0x08004ba1
 8004b74:	08004b8f 	.word	0x08004b8f
 8004b78:	08004ba1 	.word	0x08004ba1
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba1 	.word	0x08004ba1
 8004b84:	08004b9b 	.word	0x08004b9b
 8004b88:	2300      	movs	r3, #0
 8004b8a:	76fb      	strb	r3, [r7, #27]
 8004b8c:	e038      	b.n	8004c00 <UART_SetConfig+0x194>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	76fb      	strb	r3, [r7, #27]
 8004b92:	e035      	b.n	8004c00 <UART_SetConfig+0x194>
 8004b94:	2304      	movs	r3, #4
 8004b96:	76fb      	strb	r3, [r7, #27]
 8004b98:	e032      	b.n	8004c00 <UART_SetConfig+0x194>
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	76fb      	strb	r3, [r7, #27]
 8004b9e:	e02f      	b.n	8004c00 <UART_SetConfig+0x194>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	76fb      	strb	r3, [r7, #27]
 8004ba4:	e02c      	b.n	8004c00 <UART_SetConfig+0x194>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a6b      	ldr	r2, [pc, #428]	; (8004d58 <UART_SetConfig+0x2ec>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d125      	bne.n	8004bfc <UART_SetConfig+0x190>
 8004bb0:	4b6b      	ldr	r3, [pc, #428]	; (8004d60 <UART_SetConfig+0x2f4>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bbe:	d017      	beq.n	8004bf0 <UART_SetConfig+0x184>
 8004bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bc4:	d817      	bhi.n	8004bf6 <UART_SetConfig+0x18a>
 8004bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bca:	d00b      	beq.n	8004be4 <UART_SetConfig+0x178>
 8004bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd0:	d811      	bhi.n	8004bf6 <UART_SetConfig+0x18a>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <UART_SetConfig+0x172>
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bda:	d006      	beq.n	8004bea <UART_SetConfig+0x17e>
 8004bdc:	e00b      	b.n	8004bf6 <UART_SetConfig+0x18a>
 8004bde:	2300      	movs	r3, #0
 8004be0:	76fb      	strb	r3, [r7, #27]
 8004be2:	e00d      	b.n	8004c00 <UART_SetConfig+0x194>
 8004be4:	2302      	movs	r3, #2
 8004be6:	76fb      	strb	r3, [r7, #27]
 8004be8:	e00a      	b.n	8004c00 <UART_SetConfig+0x194>
 8004bea:	2304      	movs	r3, #4
 8004bec:	76fb      	strb	r3, [r7, #27]
 8004bee:	e007      	b.n	8004c00 <UART_SetConfig+0x194>
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	76fb      	strb	r3, [r7, #27]
 8004bf4:	e004      	b.n	8004c00 <UART_SetConfig+0x194>
 8004bf6:	2310      	movs	r3, #16
 8004bf8:	76fb      	strb	r3, [r7, #27]
 8004bfa:	e001      	b.n	8004c00 <UART_SetConfig+0x194>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a54      	ldr	r2, [pc, #336]	; (8004d58 <UART_SetConfig+0x2ec>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d173      	bne.n	8004cf2 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c0a:	7efb      	ldrb	r3, [r7, #27]
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d824      	bhi.n	8004c5a <UART_SetConfig+0x1ee>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x1ac>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c5b 	.word	0x08004c5b
 8004c20:	08004c45 	.word	0x08004c45
 8004c24:	08004c5b 	.word	0x08004c5b
 8004c28:	08004c4b 	.word	0x08004c4b
 8004c2c:	08004c5b 	.word	0x08004c5b
 8004c30:	08004c5b 	.word	0x08004c5b
 8004c34:	08004c5b 	.word	0x08004c5b
 8004c38:	08004c53 	.word	0x08004c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f7fd fc8e 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8004c40:	6178      	str	r0, [r7, #20]
        break;
 8004c42:	e00f      	b.n	8004c64 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c44:	4b48      	ldr	r3, [pc, #288]	; (8004d68 <UART_SetConfig+0x2fc>)
 8004c46:	617b      	str	r3, [r7, #20]
        break;
 8004c48:	e00c      	b.n	8004c64 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4a:	f7fd fbef 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8004c4e:	6178      	str	r0, [r7, #20]
        break;
 8004c50:	e008      	b.n	8004c64 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c56:	617b      	str	r3, [r7, #20]
        break;
 8004c58:	e004      	b.n	8004c64 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	76bb      	strb	r3, [r7, #26]
        break;
 8004c62:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 80fe 	beq.w	8004e68 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4413      	add	r3, r2
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d305      	bcc.n	8004c88 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d902      	bls.n	8004c8e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	76bb      	strb	r3, [r7, #26]
 8004c8c:	e0ec      	b.n	8004e68 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f04f 0100 	mov.w	r1, #0
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	020b      	lsls	r3, r1, #8
 8004ca0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ca4:	0202      	lsls	r2, r0, #8
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	6849      	ldr	r1, [r1, #4]
 8004caa:	0849      	lsrs	r1, r1, #1
 8004cac:	4608      	mov	r0, r1
 8004cae:	f04f 0100 	mov.w	r1, #0
 8004cb2:	1814      	adds	r4, r2, r0
 8004cb4:	eb43 0501 	adc.w	r5, r3, r1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f7fb fad3 	bl	8000270 <__aeabi_uldivmod>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4613      	mov	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd8:	d308      	bcc.n	8004cec <UART_SetConfig+0x280>
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce0:	d204      	bcs.n	8004cec <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	60da      	str	r2, [r3, #12]
 8004cea:	e0bd      	b.n	8004e68 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	76bb      	strb	r3, [r7, #26]
 8004cf0:	e0ba      	b.n	8004e68 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cfa:	d168      	bne.n	8004dce <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8004cfc:	7efb      	ldrb	r3, [r7, #27]
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d834      	bhi.n	8004d6c <UART_SetConfig+0x300>
 8004d02:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <UART_SetConfig+0x29c>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d2d 	.word	0x08004d2d
 8004d0c:	08004d35 	.word	0x08004d35
 8004d10:	08004d3d 	.word	0x08004d3d
 8004d14:	08004d6d 	.word	0x08004d6d
 8004d18:	08004d43 	.word	0x08004d43
 8004d1c:	08004d6d 	.word	0x08004d6d
 8004d20:	08004d6d 	.word	0x08004d6d
 8004d24:	08004d6d 	.word	0x08004d6d
 8004d28:	08004d4b 	.word	0x08004d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d2c:	f7fd fc16 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8004d30:	6178      	str	r0, [r7, #20]
        break;
 8004d32:	e020      	b.n	8004d76 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d34:	f7fd fc28 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8004d38:	6178      	str	r0, [r7, #20]
        break;
 8004d3a:	e01c      	b.n	8004d76 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <UART_SetConfig+0x2fc>)
 8004d3e:	617b      	str	r3, [r7, #20]
        break;
 8004d40:	e019      	b.n	8004d76 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d42:	f7fd fb73 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8004d46:	6178      	str	r0, [r7, #20]
        break;
 8004d48:	e015      	b.n	8004d76 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d4e:	617b      	str	r3, [r7, #20]
        break;
 8004d50:	e011      	b.n	8004d76 <UART_SetConfig+0x30a>
 8004d52:	bf00      	nop
 8004d54:	efff69f3 	.word	0xefff69f3
 8004d58:	40008000 	.word	0x40008000
 8004d5c:	40013800 	.word	0x40013800
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40004400 	.word	0x40004400
 8004d68:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	76bb      	strb	r3, [r7, #26]
        break;
 8004d74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d075      	beq.n	8004e68 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	005a      	lsls	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	441a      	add	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b0f      	cmp	r3, #15
 8004d98:	d916      	bls.n	8004dc8 <UART_SetConfig+0x35c>
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da0:	d212      	bcs.n	8004dc8 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	f023 030f 	bic.w	r3, r3, #15
 8004daa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	89fb      	ldrh	r3, [r7, #14]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	89fa      	ldrh	r2, [r7, #14]
 8004dc4:	60da      	str	r2, [r3, #12]
 8004dc6:	e04f      	b.n	8004e68 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	76bb      	strb	r3, [r7, #26]
 8004dcc:	e04c      	b.n	8004e68 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dce:	7efb      	ldrb	r3, [r7, #27]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d828      	bhi.n	8004e26 <UART_SetConfig+0x3ba>
 8004dd4:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <UART_SetConfig+0x370>)
 8004dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dda:	bf00      	nop
 8004ddc:	08004e01 	.word	0x08004e01
 8004de0:	08004e09 	.word	0x08004e09
 8004de4:	08004e11 	.word	0x08004e11
 8004de8:	08004e27 	.word	0x08004e27
 8004dec:	08004e17 	.word	0x08004e17
 8004df0:	08004e27 	.word	0x08004e27
 8004df4:	08004e27 	.word	0x08004e27
 8004df8:	08004e27 	.word	0x08004e27
 8004dfc:	08004e1f 	.word	0x08004e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e00:	f7fd fbac 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8004e04:	6178      	str	r0, [r7, #20]
        break;
 8004e06:	e013      	b.n	8004e30 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e08:	f7fd fbbe 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8004e0c:	6178      	str	r0, [r7, #20]
        break;
 8004e0e:	e00f      	b.n	8004e30 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <UART_SetConfig+0x414>)
 8004e12:	617b      	str	r3, [r7, #20]
        break;
 8004e14:	e00c      	b.n	8004e30 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e16:	f7fd fb09 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8004e1a:	6178      	str	r0, [r7, #20]
        break;
 8004e1c:	e008      	b.n	8004e30 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e22:	617b      	str	r3, [r7, #20]
        break;
 8004e24:	e004      	b.n	8004e30 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	76bb      	strb	r3, [r7, #26]
        break;
 8004e2e:	bf00      	nop
    }

    if (pclk != 0U)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d018      	beq.n	8004e68 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	085a      	lsrs	r2, r3, #1
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	441a      	add	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b0f      	cmp	r3, #15
 8004e50:	d908      	bls.n	8004e64 <UART_SetConfig+0x3f8>
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e58:	d204      	bcs.n	8004e64 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	e001      	b.n	8004e68 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e74:	7ebb      	ldrb	r3, [r7, #26]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	00f42400 	.word	0x00f42400

08004e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01a      	beq.n	8004f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f82:	d10a      	bne.n	8004f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	605a      	str	r2, [r3, #4]
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fd8:	f7fc f84e 	bl	8001078 <HAL_GetTick>
 8004fdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d10e      	bne.n	800500a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f82d 	bl	800505a <UART_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e023      	b.n	8005052 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b04      	cmp	r3, #4
 8005016:	d10e      	bne.n	8005036 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f817 	bl	800505a <UART_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e00d      	b.n	8005052 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	603b      	str	r3, [r7, #0]
 8005066:	4613      	mov	r3, r2
 8005068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506a:	e05e      	b.n	800512a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d05a      	beq.n	800512a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005074:	f7fc f800 	bl	8001078 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	429a      	cmp	r2, r3
 8005082:	d302      	bcc.n	800508a <UART_WaitOnFlagUntilTimeout+0x30>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11b      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005098:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e043      	b.n	800514a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d02c      	beq.n	800512a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050de:	d124      	bne.n	800512a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050f8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e00f      	b.n	800514a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4013      	ands	r3, r2
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	429a      	cmp	r2, r3
 8005138:	bf0c      	ite	eq
 800513a:	2301      	moveq	r3, #1
 800513c:	2300      	movne	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	429a      	cmp	r2, r3
 8005146:	d091      	beq.n	800506c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005168:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517e:	2b01      	cmp	r3, #1
 8005180:	d107      	bne.n	8005192 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0210 	bic.w	r2, r2, #16
 8005190:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff fc36 	bl	8004a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff fc13 	bl	8004a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005222:	b084      	sub	sp, #16
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	f107 0014 	add.w	r0, r7, #20
 8005230:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	b004      	add	sp, #16
 8005242:	4770      	bx	lr

08005244 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800524c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005250:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	b29b      	uxth	r3, r3
 800525e:	43db      	mvns	r3, r3
 8005260:	b29b      	uxth	r3, r3
 8005262:	4013      	ands	r3, r2
 8005264:	b29a      	uxth	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005294:	b084      	sub	sp, #16
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	f107 0014 	add.w	r0, r7, #20
 80052a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	b004      	add	sp, #16
 80052d4:	4770      	bx	lr

080052d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <__errno>:
 8005300:	4b01      	ldr	r3, [pc, #4]	; (8005308 <__errno+0x8>)
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	2000000c 	.word	0x2000000c

0800530c <__libc_init_array>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	4d0d      	ldr	r5, [pc, #52]	; (8005344 <__libc_init_array+0x38>)
 8005310:	4c0d      	ldr	r4, [pc, #52]	; (8005348 <__libc_init_array+0x3c>)
 8005312:	1b64      	subs	r4, r4, r5
 8005314:	10a4      	asrs	r4, r4, #2
 8005316:	2600      	movs	r6, #0
 8005318:	42a6      	cmp	r6, r4
 800531a:	d109      	bne.n	8005330 <__libc_init_array+0x24>
 800531c:	4d0b      	ldr	r5, [pc, #44]	; (800534c <__libc_init_array+0x40>)
 800531e:	4c0c      	ldr	r4, [pc, #48]	; (8005350 <__libc_init_array+0x44>)
 8005320:	f000 ff76 	bl	8006210 <_init>
 8005324:	1b64      	subs	r4, r4, r5
 8005326:	10a4      	asrs	r4, r4, #2
 8005328:	2600      	movs	r6, #0
 800532a:	42a6      	cmp	r6, r4
 800532c:	d105      	bne.n	800533a <__libc_init_array+0x2e>
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	f855 3b04 	ldr.w	r3, [r5], #4
 8005334:	4798      	blx	r3
 8005336:	3601      	adds	r6, #1
 8005338:	e7ee      	b.n	8005318 <__libc_init_array+0xc>
 800533a:	f855 3b04 	ldr.w	r3, [r5], #4
 800533e:	4798      	blx	r3
 8005340:	3601      	adds	r6, #1
 8005342:	e7f2      	b.n	800532a <__libc_init_array+0x1e>
 8005344:	08006350 	.word	0x08006350
 8005348:	08006350 	.word	0x08006350
 800534c:	08006350 	.word	0x08006350
 8005350:	08006354 	.word	0x08006354

08005354 <memset>:
 8005354:	4402      	add	r2, r0
 8005356:	4603      	mov	r3, r0
 8005358:	4293      	cmp	r3, r2
 800535a:	d100      	bne.n	800535e <memset+0xa>
 800535c:	4770      	bx	lr
 800535e:	f803 1b01 	strb.w	r1, [r3], #1
 8005362:	e7f9      	b.n	8005358 <memset+0x4>

08005364 <iprintf>:
 8005364:	b40f      	push	{r0, r1, r2, r3}
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <iprintf+0x2c>)
 8005368:	b513      	push	{r0, r1, r4, lr}
 800536a:	681c      	ldr	r4, [r3, #0]
 800536c:	b124      	cbz	r4, 8005378 <iprintf+0x14>
 800536e:	69a3      	ldr	r3, [r4, #24]
 8005370:	b913      	cbnz	r3, 8005378 <iprintf+0x14>
 8005372:	4620      	mov	r0, r4
 8005374:	f000 f866 	bl	8005444 <__sinit>
 8005378:	ab05      	add	r3, sp, #20
 800537a:	9a04      	ldr	r2, [sp, #16]
 800537c:	68a1      	ldr	r1, [r4, #8]
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	4620      	mov	r0, r4
 8005382:	f000 f983 	bl	800568c <_vfiprintf_r>
 8005386:	b002      	add	sp, #8
 8005388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538c:	b004      	add	sp, #16
 800538e:	4770      	bx	lr
 8005390:	2000000c 	.word	0x2000000c

08005394 <std>:
 8005394:	2300      	movs	r3, #0
 8005396:	b510      	push	{r4, lr}
 8005398:	4604      	mov	r4, r0
 800539a:	e9c0 3300 	strd	r3, r3, [r0]
 800539e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053a2:	6083      	str	r3, [r0, #8]
 80053a4:	8181      	strh	r1, [r0, #12]
 80053a6:	6643      	str	r3, [r0, #100]	; 0x64
 80053a8:	81c2      	strh	r2, [r0, #14]
 80053aa:	6183      	str	r3, [r0, #24]
 80053ac:	4619      	mov	r1, r3
 80053ae:	2208      	movs	r2, #8
 80053b0:	305c      	adds	r0, #92	; 0x5c
 80053b2:	f7ff ffcf 	bl	8005354 <memset>
 80053b6:	4b05      	ldr	r3, [pc, #20]	; (80053cc <std+0x38>)
 80053b8:	6263      	str	r3, [r4, #36]	; 0x24
 80053ba:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <std+0x3c>)
 80053bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80053be:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <std+0x40>)
 80053c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053c2:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <std+0x44>)
 80053c4:	6224      	str	r4, [r4, #32]
 80053c6:	6323      	str	r3, [r4, #48]	; 0x30
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	bf00      	nop
 80053cc:	08005c35 	.word	0x08005c35
 80053d0:	08005c57 	.word	0x08005c57
 80053d4:	08005c8f 	.word	0x08005c8f
 80053d8:	08005cb3 	.word	0x08005cb3

080053dc <_cleanup_r>:
 80053dc:	4901      	ldr	r1, [pc, #4]	; (80053e4 <_cleanup_r+0x8>)
 80053de:	f000 b8af 	b.w	8005540 <_fwalk_reent>
 80053e2:	bf00      	nop
 80053e4:	08005f8d 	.word	0x08005f8d

080053e8 <__sfmoreglue>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	1e4a      	subs	r2, r1, #1
 80053ec:	2568      	movs	r5, #104	; 0x68
 80053ee:	4355      	muls	r5, r2
 80053f0:	460e      	mov	r6, r1
 80053f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053f6:	f000 f8c5 	bl	8005584 <_malloc_r>
 80053fa:	4604      	mov	r4, r0
 80053fc:	b140      	cbz	r0, 8005410 <__sfmoreglue+0x28>
 80053fe:	2100      	movs	r1, #0
 8005400:	e9c0 1600 	strd	r1, r6, [r0]
 8005404:	300c      	adds	r0, #12
 8005406:	60a0      	str	r0, [r4, #8]
 8005408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800540c:	f7ff ffa2 	bl	8005354 <memset>
 8005410:	4620      	mov	r0, r4
 8005412:	bd70      	pop	{r4, r5, r6, pc}

08005414 <__sfp_lock_acquire>:
 8005414:	4801      	ldr	r0, [pc, #4]	; (800541c <__sfp_lock_acquire+0x8>)
 8005416:	f000 b8b3 	b.w	8005580 <__retarget_lock_acquire_recursive>
 800541a:	bf00      	nop
 800541c:	200006e4 	.word	0x200006e4

08005420 <__sfp_lock_release>:
 8005420:	4801      	ldr	r0, [pc, #4]	; (8005428 <__sfp_lock_release+0x8>)
 8005422:	f000 b8ae 	b.w	8005582 <__retarget_lock_release_recursive>
 8005426:	bf00      	nop
 8005428:	200006e4 	.word	0x200006e4

0800542c <__sinit_lock_acquire>:
 800542c:	4801      	ldr	r0, [pc, #4]	; (8005434 <__sinit_lock_acquire+0x8>)
 800542e:	f000 b8a7 	b.w	8005580 <__retarget_lock_acquire_recursive>
 8005432:	bf00      	nop
 8005434:	200006df 	.word	0x200006df

08005438 <__sinit_lock_release>:
 8005438:	4801      	ldr	r0, [pc, #4]	; (8005440 <__sinit_lock_release+0x8>)
 800543a:	f000 b8a2 	b.w	8005582 <__retarget_lock_release_recursive>
 800543e:	bf00      	nop
 8005440:	200006df 	.word	0x200006df

08005444 <__sinit>:
 8005444:	b510      	push	{r4, lr}
 8005446:	4604      	mov	r4, r0
 8005448:	f7ff fff0 	bl	800542c <__sinit_lock_acquire>
 800544c:	69a3      	ldr	r3, [r4, #24]
 800544e:	b11b      	cbz	r3, 8005458 <__sinit+0x14>
 8005450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005454:	f7ff bff0 	b.w	8005438 <__sinit_lock_release>
 8005458:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800545c:	6523      	str	r3, [r4, #80]	; 0x50
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <__sinit+0x68>)
 8005460:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <__sinit+0x6c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	62a2      	str	r2, [r4, #40]	; 0x28
 8005466:	42a3      	cmp	r3, r4
 8005468:	bf04      	itt	eq
 800546a:	2301      	moveq	r3, #1
 800546c:	61a3      	streq	r3, [r4, #24]
 800546e:	4620      	mov	r0, r4
 8005470:	f000 f820 	bl	80054b4 <__sfp>
 8005474:	6060      	str	r0, [r4, #4]
 8005476:	4620      	mov	r0, r4
 8005478:	f000 f81c 	bl	80054b4 <__sfp>
 800547c:	60a0      	str	r0, [r4, #8]
 800547e:	4620      	mov	r0, r4
 8005480:	f000 f818 	bl	80054b4 <__sfp>
 8005484:	2200      	movs	r2, #0
 8005486:	60e0      	str	r0, [r4, #12]
 8005488:	2104      	movs	r1, #4
 800548a:	6860      	ldr	r0, [r4, #4]
 800548c:	f7ff ff82 	bl	8005394 <std>
 8005490:	68a0      	ldr	r0, [r4, #8]
 8005492:	2201      	movs	r2, #1
 8005494:	2109      	movs	r1, #9
 8005496:	f7ff ff7d 	bl	8005394 <std>
 800549a:	68e0      	ldr	r0, [r4, #12]
 800549c:	2202      	movs	r2, #2
 800549e:	2112      	movs	r1, #18
 80054a0:	f7ff ff78 	bl	8005394 <std>
 80054a4:	2301      	movs	r3, #1
 80054a6:	61a3      	str	r3, [r4, #24]
 80054a8:	e7d2      	b.n	8005450 <__sinit+0xc>
 80054aa:	bf00      	nop
 80054ac:	080062b0 	.word	0x080062b0
 80054b0:	080053dd 	.word	0x080053dd

080054b4 <__sfp>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	4607      	mov	r7, r0
 80054b8:	f7ff ffac 	bl	8005414 <__sfp_lock_acquire>
 80054bc:	4b1e      	ldr	r3, [pc, #120]	; (8005538 <__sfp+0x84>)
 80054be:	681e      	ldr	r6, [r3, #0]
 80054c0:	69b3      	ldr	r3, [r6, #24]
 80054c2:	b913      	cbnz	r3, 80054ca <__sfp+0x16>
 80054c4:	4630      	mov	r0, r6
 80054c6:	f7ff ffbd 	bl	8005444 <__sinit>
 80054ca:	3648      	adds	r6, #72	; 0x48
 80054cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	d503      	bpl.n	80054dc <__sfp+0x28>
 80054d4:	6833      	ldr	r3, [r6, #0]
 80054d6:	b30b      	cbz	r3, 800551c <__sfp+0x68>
 80054d8:	6836      	ldr	r6, [r6, #0]
 80054da:	e7f7      	b.n	80054cc <__sfp+0x18>
 80054dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054e0:	b9d5      	cbnz	r5, 8005518 <__sfp+0x64>
 80054e2:	4b16      	ldr	r3, [pc, #88]	; (800553c <__sfp+0x88>)
 80054e4:	60e3      	str	r3, [r4, #12]
 80054e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054ea:	6665      	str	r5, [r4, #100]	; 0x64
 80054ec:	f000 f847 	bl	800557e <__retarget_lock_init_recursive>
 80054f0:	f7ff ff96 	bl	8005420 <__sfp_lock_release>
 80054f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80054fc:	6025      	str	r5, [r4, #0]
 80054fe:	61a5      	str	r5, [r4, #24]
 8005500:	2208      	movs	r2, #8
 8005502:	4629      	mov	r1, r5
 8005504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005508:	f7ff ff24 	bl	8005354 <memset>
 800550c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005514:	4620      	mov	r0, r4
 8005516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005518:	3468      	adds	r4, #104	; 0x68
 800551a:	e7d9      	b.n	80054d0 <__sfp+0x1c>
 800551c:	2104      	movs	r1, #4
 800551e:	4638      	mov	r0, r7
 8005520:	f7ff ff62 	bl	80053e8 <__sfmoreglue>
 8005524:	4604      	mov	r4, r0
 8005526:	6030      	str	r0, [r6, #0]
 8005528:	2800      	cmp	r0, #0
 800552a:	d1d5      	bne.n	80054d8 <__sfp+0x24>
 800552c:	f7ff ff78 	bl	8005420 <__sfp_lock_release>
 8005530:	230c      	movs	r3, #12
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	e7ee      	b.n	8005514 <__sfp+0x60>
 8005536:	bf00      	nop
 8005538:	080062b0 	.word	0x080062b0
 800553c:	ffff0001 	.word	0xffff0001

08005540 <_fwalk_reent>:
 8005540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005544:	4606      	mov	r6, r0
 8005546:	4688      	mov	r8, r1
 8005548:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800554c:	2700      	movs	r7, #0
 800554e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005552:	f1b9 0901 	subs.w	r9, r9, #1
 8005556:	d505      	bpl.n	8005564 <_fwalk_reent+0x24>
 8005558:	6824      	ldr	r4, [r4, #0]
 800555a:	2c00      	cmp	r4, #0
 800555c:	d1f7      	bne.n	800554e <_fwalk_reent+0xe>
 800555e:	4638      	mov	r0, r7
 8005560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005564:	89ab      	ldrh	r3, [r5, #12]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d907      	bls.n	800557a <_fwalk_reent+0x3a>
 800556a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800556e:	3301      	adds	r3, #1
 8005570:	d003      	beq.n	800557a <_fwalk_reent+0x3a>
 8005572:	4629      	mov	r1, r5
 8005574:	4630      	mov	r0, r6
 8005576:	47c0      	blx	r8
 8005578:	4307      	orrs	r7, r0
 800557a:	3568      	adds	r5, #104	; 0x68
 800557c:	e7e9      	b.n	8005552 <_fwalk_reent+0x12>

0800557e <__retarget_lock_init_recursive>:
 800557e:	4770      	bx	lr

08005580 <__retarget_lock_acquire_recursive>:
 8005580:	4770      	bx	lr

08005582 <__retarget_lock_release_recursive>:
 8005582:	4770      	bx	lr

08005584 <_malloc_r>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	1ccd      	adds	r5, r1, #3
 8005588:	f025 0503 	bic.w	r5, r5, #3
 800558c:	3508      	adds	r5, #8
 800558e:	2d0c      	cmp	r5, #12
 8005590:	bf38      	it	cc
 8005592:	250c      	movcc	r5, #12
 8005594:	2d00      	cmp	r5, #0
 8005596:	4606      	mov	r6, r0
 8005598:	db01      	blt.n	800559e <_malloc_r+0x1a>
 800559a:	42a9      	cmp	r1, r5
 800559c:	d903      	bls.n	80055a6 <_malloc_r+0x22>
 800559e:	230c      	movs	r3, #12
 80055a0:	6033      	str	r3, [r6, #0]
 80055a2:	2000      	movs	r0, #0
 80055a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a6:	f000 fda3 	bl	80060f0 <__malloc_lock>
 80055aa:	4921      	ldr	r1, [pc, #132]	; (8005630 <_malloc_r+0xac>)
 80055ac:	680a      	ldr	r2, [r1, #0]
 80055ae:	4614      	mov	r4, r2
 80055b0:	b99c      	cbnz	r4, 80055da <_malloc_r+0x56>
 80055b2:	4f20      	ldr	r7, [pc, #128]	; (8005634 <_malloc_r+0xb0>)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	b923      	cbnz	r3, 80055c2 <_malloc_r+0x3e>
 80055b8:	4621      	mov	r1, r4
 80055ba:	4630      	mov	r0, r6
 80055bc:	f000 fb2a 	bl	8005c14 <_sbrk_r>
 80055c0:	6038      	str	r0, [r7, #0]
 80055c2:	4629      	mov	r1, r5
 80055c4:	4630      	mov	r0, r6
 80055c6:	f000 fb25 	bl	8005c14 <_sbrk_r>
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	d123      	bne.n	8005616 <_malloc_r+0x92>
 80055ce:	230c      	movs	r3, #12
 80055d0:	6033      	str	r3, [r6, #0]
 80055d2:	4630      	mov	r0, r6
 80055d4:	f000 fd92 	bl	80060fc <__malloc_unlock>
 80055d8:	e7e3      	b.n	80055a2 <_malloc_r+0x1e>
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	1b5b      	subs	r3, r3, r5
 80055de:	d417      	bmi.n	8005610 <_malloc_r+0x8c>
 80055e0:	2b0b      	cmp	r3, #11
 80055e2:	d903      	bls.n	80055ec <_malloc_r+0x68>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	441c      	add	r4, r3
 80055e8:	6025      	str	r5, [r4, #0]
 80055ea:	e004      	b.n	80055f6 <_malloc_r+0x72>
 80055ec:	6863      	ldr	r3, [r4, #4]
 80055ee:	42a2      	cmp	r2, r4
 80055f0:	bf0c      	ite	eq
 80055f2:	600b      	streq	r3, [r1, #0]
 80055f4:	6053      	strne	r3, [r2, #4]
 80055f6:	4630      	mov	r0, r6
 80055f8:	f000 fd80 	bl	80060fc <__malloc_unlock>
 80055fc:	f104 000b 	add.w	r0, r4, #11
 8005600:	1d23      	adds	r3, r4, #4
 8005602:	f020 0007 	bic.w	r0, r0, #7
 8005606:	1ac2      	subs	r2, r0, r3
 8005608:	d0cc      	beq.n	80055a4 <_malloc_r+0x20>
 800560a:	1a1b      	subs	r3, r3, r0
 800560c:	50a3      	str	r3, [r4, r2]
 800560e:	e7c9      	b.n	80055a4 <_malloc_r+0x20>
 8005610:	4622      	mov	r2, r4
 8005612:	6864      	ldr	r4, [r4, #4]
 8005614:	e7cc      	b.n	80055b0 <_malloc_r+0x2c>
 8005616:	1cc4      	adds	r4, r0, #3
 8005618:	f024 0403 	bic.w	r4, r4, #3
 800561c:	42a0      	cmp	r0, r4
 800561e:	d0e3      	beq.n	80055e8 <_malloc_r+0x64>
 8005620:	1a21      	subs	r1, r4, r0
 8005622:	4630      	mov	r0, r6
 8005624:	f000 faf6 	bl	8005c14 <_sbrk_r>
 8005628:	3001      	adds	r0, #1
 800562a:	d1dd      	bne.n	80055e8 <_malloc_r+0x64>
 800562c:	e7cf      	b.n	80055ce <_malloc_r+0x4a>
 800562e:	bf00      	nop
 8005630:	200002a8 	.word	0x200002a8
 8005634:	200002ac 	.word	0x200002ac

08005638 <__sfputc_r>:
 8005638:	6893      	ldr	r3, [r2, #8]
 800563a:	3b01      	subs	r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	b410      	push	{r4}
 8005640:	6093      	str	r3, [r2, #8]
 8005642:	da08      	bge.n	8005656 <__sfputc_r+0x1e>
 8005644:	6994      	ldr	r4, [r2, #24]
 8005646:	42a3      	cmp	r3, r4
 8005648:	db01      	blt.n	800564e <__sfputc_r+0x16>
 800564a:	290a      	cmp	r1, #10
 800564c:	d103      	bne.n	8005656 <__sfputc_r+0x1e>
 800564e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005652:	f000 bb33 	b.w	8005cbc <__swbuf_r>
 8005656:	6813      	ldr	r3, [r2, #0]
 8005658:	1c58      	adds	r0, r3, #1
 800565a:	6010      	str	r0, [r2, #0]
 800565c:	7019      	strb	r1, [r3, #0]
 800565e:	4608      	mov	r0, r1
 8005660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005664:	4770      	bx	lr

08005666 <__sfputs_r>:
 8005666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005668:	4606      	mov	r6, r0
 800566a:	460f      	mov	r7, r1
 800566c:	4614      	mov	r4, r2
 800566e:	18d5      	adds	r5, r2, r3
 8005670:	42ac      	cmp	r4, r5
 8005672:	d101      	bne.n	8005678 <__sfputs_r+0x12>
 8005674:	2000      	movs	r0, #0
 8005676:	e007      	b.n	8005688 <__sfputs_r+0x22>
 8005678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800567c:	463a      	mov	r2, r7
 800567e:	4630      	mov	r0, r6
 8005680:	f7ff ffda 	bl	8005638 <__sfputc_r>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d1f3      	bne.n	8005670 <__sfputs_r+0xa>
 8005688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800568c <_vfiprintf_r>:
 800568c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005690:	460d      	mov	r5, r1
 8005692:	b09d      	sub	sp, #116	; 0x74
 8005694:	4614      	mov	r4, r2
 8005696:	4698      	mov	r8, r3
 8005698:	4606      	mov	r6, r0
 800569a:	b118      	cbz	r0, 80056a4 <_vfiprintf_r+0x18>
 800569c:	6983      	ldr	r3, [r0, #24]
 800569e:	b90b      	cbnz	r3, 80056a4 <_vfiprintf_r+0x18>
 80056a0:	f7ff fed0 	bl	8005444 <__sinit>
 80056a4:	4b89      	ldr	r3, [pc, #548]	; (80058cc <_vfiprintf_r+0x240>)
 80056a6:	429d      	cmp	r5, r3
 80056a8:	d11b      	bne.n	80056e2 <_vfiprintf_r+0x56>
 80056aa:	6875      	ldr	r5, [r6, #4]
 80056ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056ae:	07d9      	lsls	r1, r3, #31
 80056b0:	d405      	bmi.n	80056be <_vfiprintf_r+0x32>
 80056b2:	89ab      	ldrh	r3, [r5, #12]
 80056b4:	059a      	lsls	r2, r3, #22
 80056b6:	d402      	bmi.n	80056be <_vfiprintf_r+0x32>
 80056b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ba:	f7ff ff61 	bl	8005580 <__retarget_lock_acquire_recursive>
 80056be:	89ab      	ldrh	r3, [r5, #12]
 80056c0:	071b      	lsls	r3, r3, #28
 80056c2:	d501      	bpl.n	80056c8 <_vfiprintf_r+0x3c>
 80056c4:	692b      	ldr	r3, [r5, #16]
 80056c6:	b9eb      	cbnz	r3, 8005704 <_vfiprintf_r+0x78>
 80056c8:	4629      	mov	r1, r5
 80056ca:	4630      	mov	r0, r6
 80056cc:	f000 fb5a 	bl	8005d84 <__swsetup_r>
 80056d0:	b1c0      	cbz	r0, 8005704 <_vfiprintf_r+0x78>
 80056d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056d4:	07dc      	lsls	r4, r3, #31
 80056d6:	d50e      	bpl.n	80056f6 <_vfiprintf_r+0x6a>
 80056d8:	f04f 30ff 	mov.w	r0, #4294967295
 80056dc:	b01d      	add	sp, #116	; 0x74
 80056de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e2:	4b7b      	ldr	r3, [pc, #492]	; (80058d0 <_vfiprintf_r+0x244>)
 80056e4:	429d      	cmp	r5, r3
 80056e6:	d101      	bne.n	80056ec <_vfiprintf_r+0x60>
 80056e8:	68b5      	ldr	r5, [r6, #8]
 80056ea:	e7df      	b.n	80056ac <_vfiprintf_r+0x20>
 80056ec:	4b79      	ldr	r3, [pc, #484]	; (80058d4 <_vfiprintf_r+0x248>)
 80056ee:	429d      	cmp	r5, r3
 80056f0:	bf08      	it	eq
 80056f2:	68f5      	ldreq	r5, [r6, #12]
 80056f4:	e7da      	b.n	80056ac <_vfiprintf_r+0x20>
 80056f6:	89ab      	ldrh	r3, [r5, #12]
 80056f8:	0598      	lsls	r0, r3, #22
 80056fa:	d4ed      	bmi.n	80056d8 <_vfiprintf_r+0x4c>
 80056fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056fe:	f7ff ff40 	bl	8005582 <__retarget_lock_release_recursive>
 8005702:	e7e9      	b.n	80056d8 <_vfiprintf_r+0x4c>
 8005704:	2300      	movs	r3, #0
 8005706:	9309      	str	r3, [sp, #36]	; 0x24
 8005708:	2320      	movs	r3, #32
 800570a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800570e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005712:	2330      	movs	r3, #48	; 0x30
 8005714:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058d8 <_vfiprintf_r+0x24c>
 8005718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800571c:	f04f 0901 	mov.w	r9, #1
 8005720:	4623      	mov	r3, r4
 8005722:	469a      	mov	sl, r3
 8005724:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005728:	b10a      	cbz	r2, 800572e <_vfiprintf_r+0xa2>
 800572a:	2a25      	cmp	r2, #37	; 0x25
 800572c:	d1f9      	bne.n	8005722 <_vfiprintf_r+0x96>
 800572e:	ebba 0b04 	subs.w	fp, sl, r4
 8005732:	d00b      	beq.n	800574c <_vfiprintf_r+0xc0>
 8005734:	465b      	mov	r3, fp
 8005736:	4622      	mov	r2, r4
 8005738:	4629      	mov	r1, r5
 800573a:	4630      	mov	r0, r6
 800573c:	f7ff ff93 	bl	8005666 <__sfputs_r>
 8005740:	3001      	adds	r0, #1
 8005742:	f000 80aa 	beq.w	800589a <_vfiprintf_r+0x20e>
 8005746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005748:	445a      	add	r2, fp
 800574a:	9209      	str	r2, [sp, #36]	; 0x24
 800574c:	f89a 3000 	ldrb.w	r3, [sl]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80a2 	beq.w	800589a <_vfiprintf_r+0x20e>
 8005756:	2300      	movs	r3, #0
 8005758:	f04f 32ff 	mov.w	r2, #4294967295
 800575c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005760:	f10a 0a01 	add.w	sl, sl, #1
 8005764:	9304      	str	r3, [sp, #16]
 8005766:	9307      	str	r3, [sp, #28]
 8005768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800576c:	931a      	str	r3, [sp, #104]	; 0x68
 800576e:	4654      	mov	r4, sl
 8005770:	2205      	movs	r2, #5
 8005772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005776:	4858      	ldr	r0, [pc, #352]	; (80058d8 <_vfiprintf_r+0x24c>)
 8005778:	f7fa fd2a 	bl	80001d0 <memchr>
 800577c:	9a04      	ldr	r2, [sp, #16]
 800577e:	b9d8      	cbnz	r0, 80057b8 <_vfiprintf_r+0x12c>
 8005780:	06d1      	lsls	r1, r2, #27
 8005782:	bf44      	itt	mi
 8005784:	2320      	movmi	r3, #32
 8005786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800578a:	0713      	lsls	r3, r2, #28
 800578c:	bf44      	itt	mi
 800578e:	232b      	movmi	r3, #43	; 0x2b
 8005790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005794:	f89a 3000 	ldrb.w	r3, [sl]
 8005798:	2b2a      	cmp	r3, #42	; 0x2a
 800579a:	d015      	beq.n	80057c8 <_vfiprintf_r+0x13c>
 800579c:	9a07      	ldr	r2, [sp, #28]
 800579e:	4654      	mov	r4, sl
 80057a0:	2000      	movs	r0, #0
 80057a2:	f04f 0c0a 	mov.w	ip, #10
 80057a6:	4621      	mov	r1, r4
 80057a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ac:	3b30      	subs	r3, #48	; 0x30
 80057ae:	2b09      	cmp	r3, #9
 80057b0:	d94e      	bls.n	8005850 <_vfiprintf_r+0x1c4>
 80057b2:	b1b0      	cbz	r0, 80057e2 <_vfiprintf_r+0x156>
 80057b4:	9207      	str	r2, [sp, #28]
 80057b6:	e014      	b.n	80057e2 <_vfiprintf_r+0x156>
 80057b8:	eba0 0308 	sub.w	r3, r0, r8
 80057bc:	fa09 f303 	lsl.w	r3, r9, r3
 80057c0:	4313      	orrs	r3, r2
 80057c2:	9304      	str	r3, [sp, #16]
 80057c4:	46a2      	mov	sl, r4
 80057c6:	e7d2      	b.n	800576e <_vfiprintf_r+0xe2>
 80057c8:	9b03      	ldr	r3, [sp, #12]
 80057ca:	1d19      	adds	r1, r3, #4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	9103      	str	r1, [sp, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bfbb      	ittet	lt
 80057d4:	425b      	neglt	r3, r3
 80057d6:	f042 0202 	orrlt.w	r2, r2, #2
 80057da:	9307      	strge	r3, [sp, #28]
 80057dc:	9307      	strlt	r3, [sp, #28]
 80057de:	bfb8      	it	lt
 80057e0:	9204      	strlt	r2, [sp, #16]
 80057e2:	7823      	ldrb	r3, [r4, #0]
 80057e4:	2b2e      	cmp	r3, #46	; 0x2e
 80057e6:	d10c      	bne.n	8005802 <_vfiprintf_r+0x176>
 80057e8:	7863      	ldrb	r3, [r4, #1]
 80057ea:	2b2a      	cmp	r3, #42	; 0x2a
 80057ec:	d135      	bne.n	800585a <_vfiprintf_r+0x1ce>
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	1d1a      	adds	r2, r3, #4
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	9203      	str	r2, [sp, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bfb8      	it	lt
 80057fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80057fe:	3402      	adds	r4, #2
 8005800:	9305      	str	r3, [sp, #20]
 8005802:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058e8 <_vfiprintf_r+0x25c>
 8005806:	7821      	ldrb	r1, [r4, #0]
 8005808:	2203      	movs	r2, #3
 800580a:	4650      	mov	r0, sl
 800580c:	f7fa fce0 	bl	80001d0 <memchr>
 8005810:	b140      	cbz	r0, 8005824 <_vfiprintf_r+0x198>
 8005812:	2340      	movs	r3, #64	; 0x40
 8005814:	eba0 000a 	sub.w	r0, r0, sl
 8005818:	fa03 f000 	lsl.w	r0, r3, r0
 800581c:	9b04      	ldr	r3, [sp, #16]
 800581e:	4303      	orrs	r3, r0
 8005820:	3401      	adds	r4, #1
 8005822:	9304      	str	r3, [sp, #16]
 8005824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005828:	482c      	ldr	r0, [pc, #176]	; (80058dc <_vfiprintf_r+0x250>)
 800582a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800582e:	2206      	movs	r2, #6
 8005830:	f7fa fcce 	bl	80001d0 <memchr>
 8005834:	2800      	cmp	r0, #0
 8005836:	d03f      	beq.n	80058b8 <_vfiprintf_r+0x22c>
 8005838:	4b29      	ldr	r3, [pc, #164]	; (80058e0 <_vfiprintf_r+0x254>)
 800583a:	bb1b      	cbnz	r3, 8005884 <_vfiprintf_r+0x1f8>
 800583c:	9b03      	ldr	r3, [sp, #12]
 800583e:	3307      	adds	r3, #7
 8005840:	f023 0307 	bic.w	r3, r3, #7
 8005844:	3308      	adds	r3, #8
 8005846:	9303      	str	r3, [sp, #12]
 8005848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800584a:	443b      	add	r3, r7
 800584c:	9309      	str	r3, [sp, #36]	; 0x24
 800584e:	e767      	b.n	8005720 <_vfiprintf_r+0x94>
 8005850:	fb0c 3202 	mla	r2, ip, r2, r3
 8005854:	460c      	mov	r4, r1
 8005856:	2001      	movs	r0, #1
 8005858:	e7a5      	b.n	80057a6 <_vfiprintf_r+0x11a>
 800585a:	2300      	movs	r3, #0
 800585c:	3401      	adds	r4, #1
 800585e:	9305      	str	r3, [sp, #20]
 8005860:	4619      	mov	r1, r3
 8005862:	f04f 0c0a 	mov.w	ip, #10
 8005866:	4620      	mov	r0, r4
 8005868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800586c:	3a30      	subs	r2, #48	; 0x30
 800586e:	2a09      	cmp	r2, #9
 8005870:	d903      	bls.n	800587a <_vfiprintf_r+0x1ee>
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0c5      	beq.n	8005802 <_vfiprintf_r+0x176>
 8005876:	9105      	str	r1, [sp, #20]
 8005878:	e7c3      	b.n	8005802 <_vfiprintf_r+0x176>
 800587a:	fb0c 2101 	mla	r1, ip, r1, r2
 800587e:	4604      	mov	r4, r0
 8005880:	2301      	movs	r3, #1
 8005882:	e7f0      	b.n	8005866 <_vfiprintf_r+0x1da>
 8005884:	ab03      	add	r3, sp, #12
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	462a      	mov	r2, r5
 800588a:	4b16      	ldr	r3, [pc, #88]	; (80058e4 <_vfiprintf_r+0x258>)
 800588c:	a904      	add	r1, sp, #16
 800588e:	4630      	mov	r0, r6
 8005890:	f3af 8000 	nop.w
 8005894:	4607      	mov	r7, r0
 8005896:	1c78      	adds	r0, r7, #1
 8005898:	d1d6      	bne.n	8005848 <_vfiprintf_r+0x1bc>
 800589a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800589c:	07d9      	lsls	r1, r3, #31
 800589e:	d405      	bmi.n	80058ac <_vfiprintf_r+0x220>
 80058a0:	89ab      	ldrh	r3, [r5, #12]
 80058a2:	059a      	lsls	r2, r3, #22
 80058a4:	d402      	bmi.n	80058ac <_vfiprintf_r+0x220>
 80058a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058a8:	f7ff fe6b 	bl	8005582 <__retarget_lock_release_recursive>
 80058ac:	89ab      	ldrh	r3, [r5, #12]
 80058ae:	065b      	lsls	r3, r3, #25
 80058b0:	f53f af12 	bmi.w	80056d8 <_vfiprintf_r+0x4c>
 80058b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058b6:	e711      	b.n	80056dc <_vfiprintf_r+0x50>
 80058b8:	ab03      	add	r3, sp, #12
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	462a      	mov	r2, r5
 80058be:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <_vfiprintf_r+0x258>)
 80058c0:	a904      	add	r1, sp, #16
 80058c2:	4630      	mov	r0, r6
 80058c4:	f000 f880 	bl	80059c8 <_printf_i>
 80058c8:	e7e4      	b.n	8005894 <_vfiprintf_r+0x208>
 80058ca:	bf00      	nop
 80058cc:	080062d4 	.word	0x080062d4
 80058d0:	080062f4 	.word	0x080062f4
 80058d4:	080062b4 	.word	0x080062b4
 80058d8:	08006314 	.word	0x08006314
 80058dc:	0800631e 	.word	0x0800631e
 80058e0:	00000000 	.word	0x00000000
 80058e4:	08005667 	.word	0x08005667
 80058e8:	0800631a 	.word	0x0800631a

080058ec <_printf_common>:
 80058ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	4616      	mov	r6, r2
 80058f2:	4699      	mov	r9, r3
 80058f4:	688a      	ldr	r2, [r1, #8]
 80058f6:	690b      	ldr	r3, [r1, #16]
 80058f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058fc:	4293      	cmp	r3, r2
 80058fe:	bfb8      	it	lt
 8005900:	4613      	movlt	r3, r2
 8005902:	6033      	str	r3, [r6, #0]
 8005904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005908:	4607      	mov	r7, r0
 800590a:	460c      	mov	r4, r1
 800590c:	b10a      	cbz	r2, 8005912 <_printf_common+0x26>
 800590e:	3301      	adds	r3, #1
 8005910:	6033      	str	r3, [r6, #0]
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	0699      	lsls	r1, r3, #26
 8005916:	bf42      	ittt	mi
 8005918:	6833      	ldrmi	r3, [r6, #0]
 800591a:	3302      	addmi	r3, #2
 800591c:	6033      	strmi	r3, [r6, #0]
 800591e:	6825      	ldr	r5, [r4, #0]
 8005920:	f015 0506 	ands.w	r5, r5, #6
 8005924:	d106      	bne.n	8005934 <_printf_common+0x48>
 8005926:	f104 0a19 	add.w	sl, r4, #25
 800592a:	68e3      	ldr	r3, [r4, #12]
 800592c:	6832      	ldr	r2, [r6, #0]
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	42ab      	cmp	r3, r5
 8005932:	dc26      	bgt.n	8005982 <_printf_common+0x96>
 8005934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005938:	1e13      	subs	r3, r2, #0
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	bf18      	it	ne
 800593e:	2301      	movne	r3, #1
 8005940:	0692      	lsls	r2, r2, #26
 8005942:	d42b      	bmi.n	800599c <_printf_common+0xb0>
 8005944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005948:	4649      	mov	r1, r9
 800594a:	4638      	mov	r0, r7
 800594c:	47c0      	blx	r8
 800594e:	3001      	adds	r0, #1
 8005950:	d01e      	beq.n	8005990 <_printf_common+0xa4>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	68e5      	ldr	r5, [r4, #12]
 8005956:	6832      	ldr	r2, [r6, #0]
 8005958:	f003 0306 	and.w	r3, r3, #6
 800595c:	2b04      	cmp	r3, #4
 800595e:	bf08      	it	eq
 8005960:	1aad      	subeq	r5, r5, r2
 8005962:	68a3      	ldr	r3, [r4, #8]
 8005964:	6922      	ldr	r2, [r4, #16]
 8005966:	bf0c      	ite	eq
 8005968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800596c:	2500      	movne	r5, #0
 800596e:	4293      	cmp	r3, r2
 8005970:	bfc4      	itt	gt
 8005972:	1a9b      	subgt	r3, r3, r2
 8005974:	18ed      	addgt	r5, r5, r3
 8005976:	2600      	movs	r6, #0
 8005978:	341a      	adds	r4, #26
 800597a:	42b5      	cmp	r5, r6
 800597c:	d11a      	bne.n	80059b4 <_printf_common+0xc8>
 800597e:	2000      	movs	r0, #0
 8005980:	e008      	b.n	8005994 <_printf_common+0xa8>
 8005982:	2301      	movs	r3, #1
 8005984:	4652      	mov	r2, sl
 8005986:	4649      	mov	r1, r9
 8005988:	4638      	mov	r0, r7
 800598a:	47c0      	blx	r8
 800598c:	3001      	adds	r0, #1
 800598e:	d103      	bne.n	8005998 <_printf_common+0xac>
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005998:	3501      	adds	r5, #1
 800599a:	e7c6      	b.n	800592a <_printf_common+0x3e>
 800599c:	18e1      	adds	r1, r4, r3
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	2030      	movs	r0, #48	; 0x30
 80059a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059a6:	4422      	add	r2, r4
 80059a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059b0:	3302      	adds	r3, #2
 80059b2:	e7c7      	b.n	8005944 <_printf_common+0x58>
 80059b4:	2301      	movs	r3, #1
 80059b6:	4622      	mov	r2, r4
 80059b8:	4649      	mov	r1, r9
 80059ba:	4638      	mov	r0, r7
 80059bc:	47c0      	blx	r8
 80059be:	3001      	adds	r0, #1
 80059c0:	d0e6      	beq.n	8005990 <_printf_common+0xa4>
 80059c2:	3601      	adds	r6, #1
 80059c4:	e7d9      	b.n	800597a <_printf_common+0x8e>
	...

080059c8 <_printf_i>:
 80059c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059cc:	460c      	mov	r4, r1
 80059ce:	4691      	mov	r9, r2
 80059d0:	7e27      	ldrb	r7, [r4, #24]
 80059d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059d4:	2f78      	cmp	r7, #120	; 0x78
 80059d6:	4680      	mov	r8, r0
 80059d8:	469a      	mov	sl, r3
 80059da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059de:	d807      	bhi.n	80059f0 <_printf_i+0x28>
 80059e0:	2f62      	cmp	r7, #98	; 0x62
 80059e2:	d80a      	bhi.n	80059fa <_printf_i+0x32>
 80059e4:	2f00      	cmp	r7, #0
 80059e6:	f000 80d8 	beq.w	8005b9a <_printf_i+0x1d2>
 80059ea:	2f58      	cmp	r7, #88	; 0x58
 80059ec:	f000 80a3 	beq.w	8005b36 <_printf_i+0x16e>
 80059f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059f8:	e03a      	b.n	8005a70 <_printf_i+0xa8>
 80059fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059fe:	2b15      	cmp	r3, #21
 8005a00:	d8f6      	bhi.n	80059f0 <_printf_i+0x28>
 8005a02:	a001      	add	r0, pc, #4	; (adr r0, 8005a08 <_printf_i+0x40>)
 8005a04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a08:	08005a61 	.word	0x08005a61
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	080059f1 	.word	0x080059f1
 8005a14:	080059f1 	.word	0x080059f1
 8005a18:	080059f1 	.word	0x080059f1
 8005a1c:	080059f1 	.word	0x080059f1
 8005a20:	08005a75 	.word	0x08005a75
 8005a24:	080059f1 	.word	0x080059f1
 8005a28:	080059f1 	.word	0x080059f1
 8005a2c:	080059f1 	.word	0x080059f1
 8005a30:	080059f1 	.word	0x080059f1
 8005a34:	08005b81 	.word	0x08005b81
 8005a38:	08005aa5 	.word	0x08005aa5
 8005a3c:	08005b63 	.word	0x08005b63
 8005a40:	080059f1 	.word	0x080059f1
 8005a44:	080059f1 	.word	0x080059f1
 8005a48:	08005ba3 	.word	0x08005ba3
 8005a4c:	080059f1 	.word	0x080059f1
 8005a50:	08005aa5 	.word	0x08005aa5
 8005a54:	080059f1 	.word	0x080059f1
 8005a58:	080059f1 	.word	0x080059f1
 8005a5c:	08005b6b 	.word	0x08005b6b
 8005a60:	680b      	ldr	r3, [r1, #0]
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	600a      	str	r2, [r1, #0]
 8005a68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0a3      	b.n	8005bbc <_printf_i+0x1f4>
 8005a74:	6825      	ldr	r5, [r4, #0]
 8005a76:	6808      	ldr	r0, [r1, #0]
 8005a78:	062e      	lsls	r6, r5, #24
 8005a7a:	f100 0304 	add.w	r3, r0, #4
 8005a7e:	d50a      	bpl.n	8005a96 <_printf_i+0xce>
 8005a80:	6805      	ldr	r5, [r0, #0]
 8005a82:	600b      	str	r3, [r1, #0]
 8005a84:	2d00      	cmp	r5, #0
 8005a86:	da03      	bge.n	8005a90 <_printf_i+0xc8>
 8005a88:	232d      	movs	r3, #45	; 0x2d
 8005a8a:	426d      	negs	r5, r5
 8005a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a90:	485e      	ldr	r0, [pc, #376]	; (8005c0c <_printf_i+0x244>)
 8005a92:	230a      	movs	r3, #10
 8005a94:	e019      	b.n	8005aca <_printf_i+0x102>
 8005a96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a9a:	6805      	ldr	r5, [r0, #0]
 8005a9c:	600b      	str	r3, [r1, #0]
 8005a9e:	bf18      	it	ne
 8005aa0:	b22d      	sxthne	r5, r5
 8005aa2:	e7ef      	b.n	8005a84 <_printf_i+0xbc>
 8005aa4:	680b      	ldr	r3, [r1, #0]
 8005aa6:	6825      	ldr	r5, [r4, #0]
 8005aa8:	1d18      	adds	r0, r3, #4
 8005aaa:	6008      	str	r0, [r1, #0]
 8005aac:	0628      	lsls	r0, r5, #24
 8005aae:	d501      	bpl.n	8005ab4 <_printf_i+0xec>
 8005ab0:	681d      	ldr	r5, [r3, #0]
 8005ab2:	e002      	b.n	8005aba <_printf_i+0xf2>
 8005ab4:	0669      	lsls	r1, r5, #25
 8005ab6:	d5fb      	bpl.n	8005ab0 <_printf_i+0xe8>
 8005ab8:	881d      	ldrh	r5, [r3, #0]
 8005aba:	4854      	ldr	r0, [pc, #336]	; (8005c0c <_printf_i+0x244>)
 8005abc:	2f6f      	cmp	r7, #111	; 0x6f
 8005abe:	bf0c      	ite	eq
 8005ac0:	2308      	moveq	r3, #8
 8005ac2:	230a      	movne	r3, #10
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aca:	6866      	ldr	r6, [r4, #4]
 8005acc:	60a6      	str	r6, [r4, #8]
 8005ace:	2e00      	cmp	r6, #0
 8005ad0:	bfa2      	ittt	ge
 8005ad2:	6821      	ldrge	r1, [r4, #0]
 8005ad4:	f021 0104 	bicge.w	r1, r1, #4
 8005ad8:	6021      	strge	r1, [r4, #0]
 8005ada:	b90d      	cbnz	r5, 8005ae0 <_printf_i+0x118>
 8005adc:	2e00      	cmp	r6, #0
 8005ade:	d04d      	beq.n	8005b7c <_printf_i+0x1b4>
 8005ae0:	4616      	mov	r6, r2
 8005ae2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ae6:	fb03 5711 	mls	r7, r3, r1, r5
 8005aea:	5dc7      	ldrb	r7, [r0, r7]
 8005aec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005af0:	462f      	mov	r7, r5
 8005af2:	42bb      	cmp	r3, r7
 8005af4:	460d      	mov	r5, r1
 8005af6:	d9f4      	bls.n	8005ae2 <_printf_i+0x11a>
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d10b      	bne.n	8005b14 <_printf_i+0x14c>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	07df      	lsls	r7, r3, #31
 8005b00:	d508      	bpl.n	8005b14 <_printf_i+0x14c>
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	6861      	ldr	r1, [r4, #4]
 8005b06:	4299      	cmp	r1, r3
 8005b08:	bfde      	ittt	le
 8005b0a:	2330      	movle	r3, #48	; 0x30
 8005b0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b14:	1b92      	subs	r2, r2, r6
 8005b16:	6122      	str	r2, [r4, #16]
 8005b18:	f8cd a000 	str.w	sl, [sp]
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	aa03      	add	r2, sp, #12
 8005b20:	4621      	mov	r1, r4
 8005b22:	4640      	mov	r0, r8
 8005b24:	f7ff fee2 	bl	80058ec <_printf_common>
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d14c      	bne.n	8005bc6 <_printf_i+0x1fe>
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	b004      	add	sp, #16
 8005b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b36:	4835      	ldr	r0, [pc, #212]	; (8005c0c <_printf_i+0x244>)
 8005b38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	680e      	ldr	r6, [r1, #0]
 8005b40:	061f      	lsls	r7, r3, #24
 8005b42:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b46:	600e      	str	r6, [r1, #0]
 8005b48:	d514      	bpl.n	8005b74 <_printf_i+0x1ac>
 8005b4a:	07d9      	lsls	r1, r3, #31
 8005b4c:	bf44      	itt	mi
 8005b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b52:	6023      	strmi	r3, [r4, #0]
 8005b54:	b91d      	cbnz	r5, 8005b5e <_printf_i+0x196>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	f023 0320 	bic.w	r3, r3, #32
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	2310      	movs	r3, #16
 8005b60:	e7b0      	b.n	8005ac4 <_printf_i+0xfc>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	f043 0320 	orr.w	r3, r3, #32
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	2378      	movs	r3, #120	; 0x78
 8005b6c:	4828      	ldr	r0, [pc, #160]	; (8005c10 <_printf_i+0x248>)
 8005b6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b72:	e7e3      	b.n	8005b3c <_printf_i+0x174>
 8005b74:	065e      	lsls	r6, r3, #25
 8005b76:	bf48      	it	mi
 8005b78:	b2ad      	uxthmi	r5, r5
 8005b7a:	e7e6      	b.n	8005b4a <_printf_i+0x182>
 8005b7c:	4616      	mov	r6, r2
 8005b7e:	e7bb      	b.n	8005af8 <_printf_i+0x130>
 8005b80:	680b      	ldr	r3, [r1, #0]
 8005b82:	6826      	ldr	r6, [r4, #0]
 8005b84:	6960      	ldr	r0, [r4, #20]
 8005b86:	1d1d      	adds	r5, r3, #4
 8005b88:	600d      	str	r5, [r1, #0]
 8005b8a:	0635      	lsls	r5, r6, #24
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	d501      	bpl.n	8005b94 <_printf_i+0x1cc>
 8005b90:	6018      	str	r0, [r3, #0]
 8005b92:	e002      	b.n	8005b9a <_printf_i+0x1d2>
 8005b94:	0671      	lsls	r1, r6, #25
 8005b96:	d5fb      	bpl.n	8005b90 <_printf_i+0x1c8>
 8005b98:	8018      	strh	r0, [r3, #0]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6123      	str	r3, [r4, #16]
 8005b9e:	4616      	mov	r6, r2
 8005ba0:	e7ba      	b.n	8005b18 <_printf_i+0x150>
 8005ba2:	680b      	ldr	r3, [r1, #0]
 8005ba4:	1d1a      	adds	r2, r3, #4
 8005ba6:	600a      	str	r2, [r1, #0]
 8005ba8:	681e      	ldr	r6, [r3, #0]
 8005baa:	6862      	ldr	r2, [r4, #4]
 8005bac:	2100      	movs	r1, #0
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f7fa fb0e 	bl	80001d0 <memchr>
 8005bb4:	b108      	cbz	r0, 8005bba <_printf_i+0x1f2>
 8005bb6:	1b80      	subs	r0, r0, r6
 8005bb8:	6060      	str	r0, [r4, #4]
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	6123      	str	r3, [r4, #16]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc4:	e7a8      	b.n	8005b18 <_printf_i+0x150>
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	4632      	mov	r2, r6
 8005bca:	4649      	mov	r1, r9
 8005bcc:	4640      	mov	r0, r8
 8005bce:	47d0      	blx	sl
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d0ab      	beq.n	8005b2c <_printf_i+0x164>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	079b      	lsls	r3, r3, #30
 8005bd8:	d413      	bmi.n	8005c02 <_printf_i+0x23a>
 8005bda:	68e0      	ldr	r0, [r4, #12]
 8005bdc:	9b03      	ldr	r3, [sp, #12]
 8005bde:	4298      	cmp	r0, r3
 8005be0:	bfb8      	it	lt
 8005be2:	4618      	movlt	r0, r3
 8005be4:	e7a4      	b.n	8005b30 <_printf_i+0x168>
 8005be6:	2301      	movs	r3, #1
 8005be8:	4632      	mov	r2, r6
 8005bea:	4649      	mov	r1, r9
 8005bec:	4640      	mov	r0, r8
 8005bee:	47d0      	blx	sl
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d09b      	beq.n	8005b2c <_printf_i+0x164>
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	68e3      	ldr	r3, [r4, #12]
 8005bf8:	9903      	ldr	r1, [sp, #12]
 8005bfa:	1a5b      	subs	r3, r3, r1
 8005bfc:	42ab      	cmp	r3, r5
 8005bfe:	dcf2      	bgt.n	8005be6 <_printf_i+0x21e>
 8005c00:	e7eb      	b.n	8005bda <_printf_i+0x212>
 8005c02:	2500      	movs	r5, #0
 8005c04:	f104 0619 	add.w	r6, r4, #25
 8005c08:	e7f5      	b.n	8005bf6 <_printf_i+0x22e>
 8005c0a:	bf00      	nop
 8005c0c:	08006325 	.word	0x08006325
 8005c10:	08006336 	.word	0x08006336

08005c14 <_sbrk_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4d06      	ldr	r5, [pc, #24]	; (8005c30 <_sbrk_r+0x1c>)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	602b      	str	r3, [r5, #0]
 8005c20:	f7fb f800 	bl	8000c24 <_sbrk>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_sbrk_r+0x1a>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_sbrk_r+0x1a>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	200006e8 	.word	0x200006e8

08005c34 <__sread>:
 8005c34:	b510      	push	{r4, lr}
 8005c36:	460c      	mov	r4, r1
 8005c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3c:	f000 fab4 	bl	80061a8 <_read_r>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	bfab      	itete	ge
 8005c44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c46:	89a3      	ldrhlt	r3, [r4, #12]
 8005c48:	181b      	addge	r3, r3, r0
 8005c4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c4e:	bfac      	ite	ge
 8005c50:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c52:	81a3      	strhlt	r3, [r4, #12]
 8005c54:	bd10      	pop	{r4, pc}

08005c56 <__swrite>:
 8005c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5a:	461f      	mov	r7, r3
 8005c5c:	898b      	ldrh	r3, [r1, #12]
 8005c5e:	05db      	lsls	r3, r3, #23
 8005c60:	4605      	mov	r5, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	4616      	mov	r6, r2
 8005c66:	d505      	bpl.n	8005c74 <__swrite+0x1e>
 8005c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f000 f9c8 	bl	8006004 <_lseek_r>
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c7e:	81a3      	strh	r3, [r4, #12]
 8005c80:	4632      	mov	r2, r6
 8005c82:	463b      	mov	r3, r7
 8005c84:	4628      	mov	r0, r5
 8005c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8a:	f000 b869 	b.w	8005d60 <_write_r>

08005c8e <__sseek>:
 8005c8e:	b510      	push	{r4, lr}
 8005c90:	460c      	mov	r4, r1
 8005c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c96:	f000 f9b5 	bl	8006004 <_lseek_r>
 8005c9a:	1c43      	adds	r3, r0, #1
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	bf15      	itete	ne
 8005ca0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005caa:	81a3      	strheq	r3, [r4, #12]
 8005cac:	bf18      	it	ne
 8005cae:	81a3      	strhne	r3, [r4, #12]
 8005cb0:	bd10      	pop	{r4, pc}

08005cb2 <__sclose>:
 8005cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb6:	f000 b8d3 	b.w	8005e60 <_close_r>
	...

08005cbc <__swbuf_r>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	460e      	mov	r6, r1
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	b118      	cbz	r0, 8005cce <__swbuf_r+0x12>
 8005cc6:	6983      	ldr	r3, [r0, #24]
 8005cc8:	b90b      	cbnz	r3, 8005cce <__swbuf_r+0x12>
 8005cca:	f7ff fbbb 	bl	8005444 <__sinit>
 8005cce:	4b21      	ldr	r3, [pc, #132]	; (8005d54 <__swbuf_r+0x98>)
 8005cd0:	429c      	cmp	r4, r3
 8005cd2:	d12b      	bne.n	8005d2c <__swbuf_r+0x70>
 8005cd4:	686c      	ldr	r4, [r5, #4]
 8005cd6:	69a3      	ldr	r3, [r4, #24]
 8005cd8:	60a3      	str	r3, [r4, #8]
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	071a      	lsls	r2, r3, #28
 8005cde:	d52f      	bpl.n	8005d40 <__swbuf_r+0x84>
 8005ce0:	6923      	ldr	r3, [r4, #16]
 8005ce2:	b36b      	cbz	r3, 8005d40 <__swbuf_r+0x84>
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	6820      	ldr	r0, [r4, #0]
 8005ce8:	1ac0      	subs	r0, r0, r3
 8005cea:	6963      	ldr	r3, [r4, #20]
 8005cec:	b2f6      	uxtb	r6, r6
 8005cee:	4283      	cmp	r3, r0
 8005cf0:	4637      	mov	r7, r6
 8005cf2:	dc04      	bgt.n	8005cfe <__swbuf_r+0x42>
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 f948 	bl	8005f8c <_fflush_r>
 8005cfc:	bb30      	cbnz	r0, 8005d4c <__swbuf_r+0x90>
 8005cfe:	68a3      	ldr	r3, [r4, #8]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	60a3      	str	r3, [r4, #8]
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	6022      	str	r2, [r4, #0]
 8005d0a:	701e      	strb	r6, [r3, #0]
 8005d0c:	6963      	ldr	r3, [r4, #20]
 8005d0e:	3001      	adds	r0, #1
 8005d10:	4283      	cmp	r3, r0
 8005d12:	d004      	beq.n	8005d1e <__swbuf_r+0x62>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	07db      	lsls	r3, r3, #31
 8005d18:	d506      	bpl.n	8005d28 <__swbuf_r+0x6c>
 8005d1a:	2e0a      	cmp	r6, #10
 8005d1c:	d104      	bne.n	8005d28 <__swbuf_r+0x6c>
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 f933 	bl	8005f8c <_fflush_r>
 8005d26:	b988      	cbnz	r0, 8005d4c <__swbuf_r+0x90>
 8005d28:	4638      	mov	r0, r7
 8005d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <__swbuf_r+0x9c>)
 8005d2e:	429c      	cmp	r4, r3
 8005d30:	d101      	bne.n	8005d36 <__swbuf_r+0x7a>
 8005d32:	68ac      	ldr	r4, [r5, #8]
 8005d34:	e7cf      	b.n	8005cd6 <__swbuf_r+0x1a>
 8005d36:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <__swbuf_r+0xa0>)
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	bf08      	it	eq
 8005d3c:	68ec      	ldreq	r4, [r5, #12]
 8005d3e:	e7ca      	b.n	8005cd6 <__swbuf_r+0x1a>
 8005d40:	4621      	mov	r1, r4
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 f81e 	bl	8005d84 <__swsetup_r>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d0cb      	beq.n	8005ce4 <__swbuf_r+0x28>
 8005d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8005d50:	e7ea      	b.n	8005d28 <__swbuf_r+0x6c>
 8005d52:	bf00      	nop
 8005d54:	080062d4 	.word	0x080062d4
 8005d58:	080062f4 	.word	0x080062f4
 8005d5c:	080062b4 	.word	0x080062b4

08005d60 <_write_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4d07      	ldr	r5, [pc, #28]	; (8005d80 <_write_r+0x20>)
 8005d64:	4604      	mov	r4, r0
 8005d66:	4608      	mov	r0, r1
 8005d68:	4611      	mov	r1, r2
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	602a      	str	r2, [r5, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f7fa ff07 	bl	8000b82 <_write>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d102      	bne.n	8005d7e <_write_r+0x1e>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	b103      	cbz	r3, 8005d7e <_write_r+0x1e>
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}
 8005d80:	200006e8 	.word	0x200006e8

08005d84 <__swsetup_r>:
 8005d84:	4b32      	ldr	r3, [pc, #200]	; (8005e50 <__swsetup_r+0xcc>)
 8005d86:	b570      	push	{r4, r5, r6, lr}
 8005d88:	681d      	ldr	r5, [r3, #0]
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	b125      	cbz	r5, 8005d9a <__swsetup_r+0x16>
 8005d90:	69ab      	ldr	r3, [r5, #24]
 8005d92:	b913      	cbnz	r3, 8005d9a <__swsetup_r+0x16>
 8005d94:	4628      	mov	r0, r5
 8005d96:	f7ff fb55 	bl	8005444 <__sinit>
 8005d9a:	4b2e      	ldr	r3, [pc, #184]	; (8005e54 <__swsetup_r+0xd0>)
 8005d9c:	429c      	cmp	r4, r3
 8005d9e:	d10f      	bne.n	8005dc0 <__swsetup_r+0x3c>
 8005da0:	686c      	ldr	r4, [r5, #4]
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005da8:	0719      	lsls	r1, r3, #28
 8005daa:	d42c      	bmi.n	8005e06 <__swsetup_r+0x82>
 8005dac:	06dd      	lsls	r5, r3, #27
 8005dae:	d411      	bmi.n	8005dd4 <__swsetup_r+0x50>
 8005db0:	2309      	movs	r3, #9
 8005db2:	6033      	str	r3, [r6, #0]
 8005db4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005db8:	81a3      	strh	r3, [r4, #12]
 8005dba:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbe:	e03e      	b.n	8005e3e <__swsetup_r+0xba>
 8005dc0:	4b25      	ldr	r3, [pc, #148]	; (8005e58 <__swsetup_r+0xd4>)
 8005dc2:	429c      	cmp	r4, r3
 8005dc4:	d101      	bne.n	8005dca <__swsetup_r+0x46>
 8005dc6:	68ac      	ldr	r4, [r5, #8]
 8005dc8:	e7eb      	b.n	8005da2 <__swsetup_r+0x1e>
 8005dca:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <__swsetup_r+0xd8>)
 8005dcc:	429c      	cmp	r4, r3
 8005dce:	bf08      	it	eq
 8005dd0:	68ec      	ldreq	r4, [r5, #12]
 8005dd2:	e7e6      	b.n	8005da2 <__swsetup_r+0x1e>
 8005dd4:	0758      	lsls	r0, r3, #29
 8005dd6:	d512      	bpl.n	8005dfe <__swsetup_r+0x7a>
 8005dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dda:	b141      	cbz	r1, 8005dee <__swsetup_r+0x6a>
 8005ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005de0:	4299      	cmp	r1, r3
 8005de2:	d002      	beq.n	8005dea <__swsetup_r+0x66>
 8005de4:	4630      	mov	r0, r6
 8005de6:	f000 f98f 	bl	8006108 <_free_r>
 8005dea:	2300      	movs	r3, #0
 8005dec:	6363      	str	r3, [r4, #52]	; 0x34
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	2300      	movs	r3, #0
 8005df8:	6063      	str	r3, [r4, #4]
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	f043 0308 	orr.w	r3, r3, #8
 8005e04:	81a3      	strh	r3, [r4, #12]
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	b94b      	cbnz	r3, 8005e1e <__swsetup_r+0x9a>
 8005e0a:	89a3      	ldrh	r3, [r4, #12]
 8005e0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e14:	d003      	beq.n	8005e1e <__swsetup_r+0x9a>
 8005e16:	4621      	mov	r1, r4
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 f929 	bl	8006070 <__smakebuf_r>
 8005e1e:	89a0      	ldrh	r0, [r4, #12]
 8005e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e24:	f010 0301 	ands.w	r3, r0, #1
 8005e28:	d00a      	beq.n	8005e40 <__swsetup_r+0xbc>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60a3      	str	r3, [r4, #8]
 8005e2e:	6963      	ldr	r3, [r4, #20]
 8005e30:	425b      	negs	r3, r3
 8005e32:	61a3      	str	r3, [r4, #24]
 8005e34:	6923      	ldr	r3, [r4, #16]
 8005e36:	b943      	cbnz	r3, 8005e4a <__swsetup_r+0xc6>
 8005e38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e3c:	d1ba      	bne.n	8005db4 <__swsetup_r+0x30>
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	0781      	lsls	r1, r0, #30
 8005e42:	bf58      	it	pl
 8005e44:	6963      	ldrpl	r3, [r4, #20]
 8005e46:	60a3      	str	r3, [r4, #8]
 8005e48:	e7f4      	b.n	8005e34 <__swsetup_r+0xb0>
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	e7f7      	b.n	8005e3e <__swsetup_r+0xba>
 8005e4e:	bf00      	nop
 8005e50:	2000000c 	.word	0x2000000c
 8005e54:	080062d4 	.word	0x080062d4
 8005e58:	080062f4 	.word	0x080062f4
 8005e5c:	080062b4 	.word	0x080062b4

08005e60 <_close_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4d06      	ldr	r5, [pc, #24]	; (8005e7c <_close_r+0x1c>)
 8005e64:	2300      	movs	r3, #0
 8005e66:	4604      	mov	r4, r0
 8005e68:	4608      	mov	r0, r1
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	f7fa fea5 	bl	8000bba <_close>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_close_r+0x1a>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_close_r+0x1a>
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	200006e8 	.word	0x200006e8

08005e80 <__sflush_r>:
 8005e80:	898a      	ldrh	r2, [r1, #12]
 8005e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e86:	4605      	mov	r5, r0
 8005e88:	0710      	lsls	r0, r2, #28
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	d458      	bmi.n	8005f40 <__sflush_r+0xc0>
 8005e8e:	684b      	ldr	r3, [r1, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	dc05      	bgt.n	8005ea0 <__sflush_r+0x20>
 8005e94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	dc02      	bgt.n	8005ea0 <__sflush_r+0x20>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ea2:	2e00      	cmp	r6, #0
 8005ea4:	d0f9      	beq.n	8005e9a <__sflush_r+0x1a>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005eac:	682f      	ldr	r7, [r5, #0]
 8005eae:	602b      	str	r3, [r5, #0]
 8005eb0:	d032      	beq.n	8005f18 <__sflush_r+0x98>
 8005eb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	075a      	lsls	r2, r3, #29
 8005eb8:	d505      	bpl.n	8005ec6 <__sflush_r+0x46>
 8005eba:	6863      	ldr	r3, [r4, #4]
 8005ebc:	1ac0      	subs	r0, r0, r3
 8005ebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ec0:	b10b      	cbz	r3, 8005ec6 <__sflush_r+0x46>
 8005ec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ec4:	1ac0      	subs	r0, r0, r3
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ecc:	6a21      	ldr	r1, [r4, #32]
 8005ece:	4628      	mov	r0, r5
 8005ed0:	47b0      	blx	r6
 8005ed2:	1c43      	adds	r3, r0, #1
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	d106      	bne.n	8005ee6 <__sflush_r+0x66>
 8005ed8:	6829      	ldr	r1, [r5, #0]
 8005eda:	291d      	cmp	r1, #29
 8005edc:	d82c      	bhi.n	8005f38 <__sflush_r+0xb8>
 8005ede:	4a2a      	ldr	r2, [pc, #168]	; (8005f88 <__sflush_r+0x108>)
 8005ee0:	40ca      	lsrs	r2, r1
 8005ee2:	07d6      	lsls	r6, r2, #31
 8005ee4:	d528      	bpl.n	8005f38 <__sflush_r+0xb8>
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	6062      	str	r2, [r4, #4]
 8005eea:	04d9      	lsls	r1, r3, #19
 8005eec:	6922      	ldr	r2, [r4, #16]
 8005eee:	6022      	str	r2, [r4, #0]
 8005ef0:	d504      	bpl.n	8005efc <__sflush_r+0x7c>
 8005ef2:	1c42      	adds	r2, r0, #1
 8005ef4:	d101      	bne.n	8005efa <__sflush_r+0x7a>
 8005ef6:	682b      	ldr	r3, [r5, #0]
 8005ef8:	b903      	cbnz	r3, 8005efc <__sflush_r+0x7c>
 8005efa:	6560      	str	r0, [r4, #84]	; 0x54
 8005efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005efe:	602f      	str	r7, [r5, #0]
 8005f00:	2900      	cmp	r1, #0
 8005f02:	d0ca      	beq.n	8005e9a <__sflush_r+0x1a>
 8005f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f08:	4299      	cmp	r1, r3
 8005f0a:	d002      	beq.n	8005f12 <__sflush_r+0x92>
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 f8fb 	bl	8006108 <_free_r>
 8005f12:	2000      	movs	r0, #0
 8005f14:	6360      	str	r0, [r4, #52]	; 0x34
 8005f16:	e7c1      	b.n	8005e9c <__sflush_r+0x1c>
 8005f18:	6a21      	ldr	r1, [r4, #32]
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b0      	blx	r6
 8005f20:	1c41      	adds	r1, r0, #1
 8005f22:	d1c7      	bne.n	8005eb4 <__sflush_r+0x34>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0c4      	beq.n	8005eb4 <__sflush_r+0x34>
 8005f2a:	2b1d      	cmp	r3, #29
 8005f2c:	d001      	beq.n	8005f32 <__sflush_r+0xb2>
 8005f2e:	2b16      	cmp	r3, #22
 8005f30:	d101      	bne.n	8005f36 <__sflush_r+0xb6>
 8005f32:	602f      	str	r7, [r5, #0]
 8005f34:	e7b1      	b.n	8005e9a <__sflush_r+0x1a>
 8005f36:	89a3      	ldrh	r3, [r4, #12]
 8005f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f3c:	81a3      	strh	r3, [r4, #12]
 8005f3e:	e7ad      	b.n	8005e9c <__sflush_r+0x1c>
 8005f40:	690f      	ldr	r7, [r1, #16]
 8005f42:	2f00      	cmp	r7, #0
 8005f44:	d0a9      	beq.n	8005e9a <__sflush_r+0x1a>
 8005f46:	0793      	lsls	r3, r2, #30
 8005f48:	680e      	ldr	r6, [r1, #0]
 8005f4a:	bf08      	it	eq
 8005f4c:	694b      	ldreq	r3, [r1, #20]
 8005f4e:	600f      	str	r7, [r1, #0]
 8005f50:	bf18      	it	ne
 8005f52:	2300      	movne	r3, #0
 8005f54:	eba6 0807 	sub.w	r8, r6, r7
 8005f58:	608b      	str	r3, [r1, #8]
 8005f5a:	f1b8 0f00 	cmp.w	r8, #0
 8005f5e:	dd9c      	ble.n	8005e9a <__sflush_r+0x1a>
 8005f60:	6a21      	ldr	r1, [r4, #32]
 8005f62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f64:	4643      	mov	r3, r8
 8005f66:	463a      	mov	r2, r7
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b0      	blx	r6
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	dc06      	bgt.n	8005f7e <__sflush_r+0xfe>
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f76:	81a3      	strh	r3, [r4, #12]
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7c:	e78e      	b.n	8005e9c <__sflush_r+0x1c>
 8005f7e:	4407      	add	r7, r0
 8005f80:	eba8 0800 	sub.w	r8, r8, r0
 8005f84:	e7e9      	b.n	8005f5a <__sflush_r+0xda>
 8005f86:	bf00      	nop
 8005f88:	20400001 	.word	0x20400001

08005f8c <_fflush_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	690b      	ldr	r3, [r1, #16]
 8005f90:	4605      	mov	r5, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	b913      	cbnz	r3, 8005f9c <_fflush_r+0x10>
 8005f96:	2500      	movs	r5, #0
 8005f98:	4628      	mov	r0, r5
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}
 8005f9c:	b118      	cbz	r0, 8005fa6 <_fflush_r+0x1a>
 8005f9e:	6983      	ldr	r3, [r0, #24]
 8005fa0:	b90b      	cbnz	r3, 8005fa6 <_fflush_r+0x1a>
 8005fa2:	f7ff fa4f 	bl	8005444 <__sinit>
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <_fflush_r+0x6c>)
 8005fa8:	429c      	cmp	r4, r3
 8005faa:	d11b      	bne.n	8005fe4 <_fflush_r+0x58>
 8005fac:	686c      	ldr	r4, [r5, #4]
 8005fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0ef      	beq.n	8005f96 <_fflush_r+0xa>
 8005fb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fb8:	07d0      	lsls	r0, r2, #31
 8005fba:	d404      	bmi.n	8005fc6 <_fflush_r+0x3a>
 8005fbc:	0599      	lsls	r1, r3, #22
 8005fbe:	d402      	bmi.n	8005fc6 <_fflush_r+0x3a>
 8005fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fc2:	f7ff fadd 	bl	8005580 <__retarget_lock_acquire_recursive>
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	4621      	mov	r1, r4
 8005fca:	f7ff ff59 	bl	8005e80 <__sflush_r>
 8005fce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fd0:	07da      	lsls	r2, r3, #31
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	d4e0      	bmi.n	8005f98 <_fflush_r+0xc>
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	059b      	lsls	r3, r3, #22
 8005fda:	d4dd      	bmi.n	8005f98 <_fflush_r+0xc>
 8005fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fde:	f7ff fad0 	bl	8005582 <__retarget_lock_release_recursive>
 8005fe2:	e7d9      	b.n	8005f98 <_fflush_r+0xc>
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <_fflush_r+0x70>)
 8005fe6:	429c      	cmp	r4, r3
 8005fe8:	d101      	bne.n	8005fee <_fflush_r+0x62>
 8005fea:	68ac      	ldr	r4, [r5, #8]
 8005fec:	e7df      	b.n	8005fae <_fflush_r+0x22>
 8005fee:	4b04      	ldr	r3, [pc, #16]	; (8006000 <_fflush_r+0x74>)
 8005ff0:	429c      	cmp	r4, r3
 8005ff2:	bf08      	it	eq
 8005ff4:	68ec      	ldreq	r4, [r5, #12]
 8005ff6:	e7da      	b.n	8005fae <_fflush_r+0x22>
 8005ff8:	080062d4 	.word	0x080062d4
 8005ffc:	080062f4 	.word	0x080062f4
 8006000:	080062b4 	.word	0x080062b4

08006004 <_lseek_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4d07      	ldr	r5, [pc, #28]	; (8006024 <_lseek_r+0x20>)
 8006008:	4604      	mov	r4, r0
 800600a:	4608      	mov	r0, r1
 800600c:	4611      	mov	r1, r2
 800600e:	2200      	movs	r2, #0
 8006010:	602a      	str	r2, [r5, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	f7fa fdf8 	bl	8000c08 <_lseek>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_lseek_r+0x1e>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_lseek_r+0x1e>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	200006e8 	.word	0x200006e8

08006028 <__swhatbuf_r>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	460e      	mov	r6, r1
 800602c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006030:	2900      	cmp	r1, #0
 8006032:	b096      	sub	sp, #88	; 0x58
 8006034:	4614      	mov	r4, r2
 8006036:	461d      	mov	r5, r3
 8006038:	da07      	bge.n	800604a <__swhatbuf_r+0x22>
 800603a:	2300      	movs	r3, #0
 800603c:	602b      	str	r3, [r5, #0]
 800603e:	89b3      	ldrh	r3, [r6, #12]
 8006040:	061a      	lsls	r2, r3, #24
 8006042:	d410      	bmi.n	8006066 <__swhatbuf_r+0x3e>
 8006044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006048:	e00e      	b.n	8006068 <__swhatbuf_r+0x40>
 800604a:	466a      	mov	r2, sp
 800604c:	f000 f8be 	bl	80061cc <_fstat_r>
 8006050:	2800      	cmp	r0, #0
 8006052:	dbf2      	blt.n	800603a <__swhatbuf_r+0x12>
 8006054:	9a01      	ldr	r2, [sp, #4]
 8006056:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800605a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800605e:	425a      	negs	r2, r3
 8006060:	415a      	adcs	r2, r3
 8006062:	602a      	str	r2, [r5, #0]
 8006064:	e7ee      	b.n	8006044 <__swhatbuf_r+0x1c>
 8006066:	2340      	movs	r3, #64	; 0x40
 8006068:	2000      	movs	r0, #0
 800606a:	6023      	str	r3, [r4, #0]
 800606c:	b016      	add	sp, #88	; 0x58
 800606e:	bd70      	pop	{r4, r5, r6, pc}

08006070 <__smakebuf_r>:
 8006070:	898b      	ldrh	r3, [r1, #12]
 8006072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006074:	079d      	lsls	r5, r3, #30
 8006076:	4606      	mov	r6, r0
 8006078:	460c      	mov	r4, r1
 800607a:	d507      	bpl.n	800608c <__smakebuf_r+0x1c>
 800607c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	6123      	str	r3, [r4, #16]
 8006084:	2301      	movs	r3, #1
 8006086:	6163      	str	r3, [r4, #20]
 8006088:	b002      	add	sp, #8
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	ab01      	add	r3, sp, #4
 800608e:	466a      	mov	r2, sp
 8006090:	f7ff ffca 	bl	8006028 <__swhatbuf_r>
 8006094:	9900      	ldr	r1, [sp, #0]
 8006096:	4605      	mov	r5, r0
 8006098:	4630      	mov	r0, r6
 800609a:	f7ff fa73 	bl	8005584 <_malloc_r>
 800609e:	b948      	cbnz	r0, 80060b4 <__smakebuf_r+0x44>
 80060a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060a4:	059a      	lsls	r2, r3, #22
 80060a6:	d4ef      	bmi.n	8006088 <__smakebuf_r+0x18>
 80060a8:	f023 0303 	bic.w	r3, r3, #3
 80060ac:	f043 0302 	orr.w	r3, r3, #2
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	e7e3      	b.n	800607c <__smakebuf_r+0xc>
 80060b4:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <__smakebuf_r+0x7c>)
 80060b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80060b8:	89a3      	ldrh	r3, [r4, #12]
 80060ba:	6020      	str	r0, [r4, #0]
 80060bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c0:	81a3      	strh	r3, [r4, #12]
 80060c2:	9b00      	ldr	r3, [sp, #0]
 80060c4:	6163      	str	r3, [r4, #20]
 80060c6:	9b01      	ldr	r3, [sp, #4]
 80060c8:	6120      	str	r0, [r4, #16]
 80060ca:	b15b      	cbz	r3, 80060e4 <__smakebuf_r+0x74>
 80060cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060d0:	4630      	mov	r0, r6
 80060d2:	f000 f88d 	bl	80061f0 <_isatty_r>
 80060d6:	b128      	cbz	r0, 80060e4 <__smakebuf_r+0x74>
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	f023 0303 	bic.w	r3, r3, #3
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	81a3      	strh	r3, [r4, #12]
 80060e4:	89a0      	ldrh	r0, [r4, #12]
 80060e6:	4305      	orrs	r5, r0
 80060e8:	81a5      	strh	r5, [r4, #12]
 80060ea:	e7cd      	b.n	8006088 <__smakebuf_r+0x18>
 80060ec:	080053dd 	.word	0x080053dd

080060f0 <__malloc_lock>:
 80060f0:	4801      	ldr	r0, [pc, #4]	; (80060f8 <__malloc_lock+0x8>)
 80060f2:	f7ff ba45 	b.w	8005580 <__retarget_lock_acquire_recursive>
 80060f6:	bf00      	nop
 80060f8:	200006e0 	.word	0x200006e0

080060fc <__malloc_unlock>:
 80060fc:	4801      	ldr	r0, [pc, #4]	; (8006104 <__malloc_unlock+0x8>)
 80060fe:	f7ff ba40 	b.w	8005582 <__retarget_lock_release_recursive>
 8006102:	bf00      	nop
 8006104:	200006e0 	.word	0x200006e0

08006108 <_free_r>:
 8006108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800610a:	2900      	cmp	r1, #0
 800610c:	d048      	beq.n	80061a0 <_free_r+0x98>
 800610e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006112:	9001      	str	r0, [sp, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	f1a1 0404 	sub.w	r4, r1, #4
 800611a:	bfb8      	it	lt
 800611c:	18e4      	addlt	r4, r4, r3
 800611e:	f7ff ffe7 	bl	80060f0 <__malloc_lock>
 8006122:	4a20      	ldr	r2, [pc, #128]	; (80061a4 <_free_r+0x9c>)
 8006124:	9801      	ldr	r0, [sp, #4]
 8006126:	6813      	ldr	r3, [r2, #0]
 8006128:	4615      	mov	r5, r2
 800612a:	b933      	cbnz	r3, 800613a <_free_r+0x32>
 800612c:	6063      	str	r3, [r4, #4]
 800612e:	6014      	str	r4, [r2, #0]
 8006130:	b003      	add	sp, #12
 8006132:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006136:	f7ff bfe1 	b.w	80060fc <__malloc_unlock>
 800613a:	42a3      	cmp	r3, r4
 800613c:	d90b      	bls.n	8006156 <_free_r+0x4e>
 800613e:	6821      	ldr	r1, [r4, #0]
 8006140:	1862      	adds	r2, r4, r1
 8006142:	4293      	cmp	r3, r2
 8006144:	bf04      	itt	eq
 8006146:	681a      	ldreq	r2, [r3, #0]
 8006148:	685b      	ldreq	r3, [r3, #4]
 800614a:	6063      	str	r3, [r4, #4]
 800614c:	bf04      	itt	eq
 800614e:	1852      	addeq	r2, r2, r1
 8006150:	6022      	streq	r2, [r4, #0]
 8006152:	602c      	str	r4, [r5, #0]
 8006154:	e7ec      	b.n	8006130 <_free_r+0x28>
 8006156:	461a      	mov	r2, r3
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	b10b      	cbz	r3, 8006160 <_free_r+0x58>
 800615c:	42a3      	cmp	r3, r4
 800615e:	d9fa      	bls.n	8006156 <_free_r+0x4e>
 8006160:	6811      	ldr	r1, [r2, #0]
 8006162:	1855      	adds	r5, r2, r1
 8006164:	42a5      	cmp	r5, r4
 8006166:	d10b      	bne.n	8006180 <_free_r+0x78>
 8006168:	6824      	ldr	r4, [r4, #0]
 800616a:	4421      	add	r1, r4
 800616c:	1854      	adds	r4, r2, r1
 800616e:	42a3      	cmp	r3, r4
 8006170:	6011      	str	r1, [r2, #0]
 8006172:	d1dd      	bne.n	8006130 <_free_r+0x28>
 8006174:	681c      	ldr	r4, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	6053      	str	r3, [r2, #4]
 800617a:	4421      	add	r1, r4
 800617c:	6011      	str	r1, [r2, #0]
 800617e:	e7d7      	b.n	8006130 <_free_r+0x28>
 8006180:	d902      	bls.n	8006188 <_free_r+0x80>
 8006182:	230c      	movs	r3, #12
 8006184:	6003      	str	r3, [r0, #0]
 8006186:	e7d3      	b.n	8006130 <_free_r+0x28>
 8006188:	6825      	ldr	r5, [r4, #0]
 800618a:	1961      	adds	r1, r4, r5
 800618c:	428b      	cmp	r3, r1
 800618e:	bf04      	itt	eq
 8006190:	6819      	ldreq	r1, [r3, #0]
 8006192:	685b      	ldreq	r3, [r3, #4]
 8006194:	6063      	str	r3, [r4, #4]
 8006196:	bf04      	itt	eq
 8006198:	1949      	addeq	r1, r1, r5
 800619a:	6021      	streq	r1, [r4, #0]
 800619c:	6054      	str	r4, [r2, #4]
 800619e:	e7c7      	b.n	8006130 <_free_r+0x28>
 80061a0:	b003      	add	sp, #12
 80061a2:	bd30      	pop	{r4, r5, pc}
 80061a4:	200002a8 	.word	0x200002a8

080061a8 <_read_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4d07      	ldr	r5, [pc, #28]	; (80061c8 <_read_r+0x20>)
 80061ac:	4604      	mov	r4, r0
 80061ae:	4608      	mov	r0, r1
 80061b0:	4611      	mov	r1, r2
 80061b2:	2200      	movs	r2, #0
 80061b4:	602a      	str	r2, [r5, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f7fa fcc6 	bl	8000b48 <_read>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_read_r+0x1e>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_read_r+0x1e>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	200006e8 	.word	0x200006e8

080061cc <_fstat_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d07      	ldr	r5, [pc, #28]	; (80061ec <_fstat_r+0x20>)
 80061d0:	2300      	movs	r3, #0
 80061d2:	4604      	mov	r4, r0
 80061d4:	4608      	mov	r0, r1
 80061d6:	4611      	mov	r1, r2
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	f7fa fcfa 	bl	8000bd2 <_fstat>
 80061de:	1c43      	adds	r3, r0, #1
 80061e0:	d102      	bne.n	80061e8 <_fstat_r+0x1c>
 80061e2:	682b      	ldr	r3, [r5, #0]
 80061e4:	b103      	cbz	r3, 80061e8 <_fstat_r+0x1c>
 80061e6:	6023      	str	r3, [r4, #0]
 80061e8:	bd38      	pop	{r3, r4, r5, pc}
 80061ea:	bf00      	nop
 80061ec:	200006e8 	.word	0x200006e8

080061f0 <_isatty_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d06      	ldr	r5, [pc, #24]	; (800620c <_isatty_r+0x1c>)
 80061f4:	2300      	movs	r3, #0
 80061f6:	4604      	mov	r4, r0
 80061f8:	4608      	mov	r0, r1
 80061fa:	602b      	str	r3, [r5, #0]
 80061fc:	f7fa fcf9 	bl	8000bf2 <_isatty>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d102      	bne.n	800620a <_isatty_r+0x1a>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	b103      	cbz	r3, 800620a <_isatty_r+0x1a>
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	bd38      	pop	{r3, r4, r5, pc}
 800620c:	200006e8 	.word	0x200006e8

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
